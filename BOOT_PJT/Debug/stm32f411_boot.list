
stm32f411_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f334  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  0800f4d8  0800f4d8  0001f4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fed4  0800fed4  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fed4  0800fed4  0001fed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fedc  0800fedc  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fedc  0800fedc  0001fedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800fee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000296c  200003c4  080102a8  000203c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d30  080102a8  00022d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ca2  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006345  00000000  00000000  00048096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0004e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0004f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002026b  00000000  00000000  00050d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025033  00000000  00000000  00070fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980aa  00000000  00000000  00095fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  0012e0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c4 	.word	0x200003c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4bc 	.word	0x0800f4bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	0800f4bc 	.word	0x0800f4bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <apInit>:




void apInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	//  cliOpen(_DEF_UART1, 57600);
	 uartOpen(_DEF_UART2, 57600);
 8000fd0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f002 fa21 	bl	800341c <uartOpen>
	 cliOpen(_DEF_UART3, 57600);
 8000fda:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f000 fc02 	bl	80017e8 <cliOpen>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <apMain>:
UART_HandleTypeDef huart2;

uint16_t count;

void apMain(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint32_t led_blink_time = 1000;
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	603b      	str	r3, [r7, #0]


  pre_time = millis();
 8000ff4:	f000 f853 	bl	800109e <millis>
 8000ff8:	6078      	str	r0, [r7, #4]

  if(resetGetCount() >= 2)
 8000ffa:	f002 f951 	bl	80032a0 <resetGetCount>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d901      	bls.n	8001008 <apMain+0x20>
  {
    led_blink_time = 200;
 8001004:	23c8      	movs	r3, #200	; 0xc8
 8001006:	603b      	str	r3, [r7, #0]
  }


	while(1)
	{
		if(millis()-pre_time >= led_blink_time) //
 8001008:	f000 f849 	bl	800109e <millis>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d807      	bhi.n	8001028 <apMain+0x40>
		{
			pre_time = millis();
 8001018:	f000 f841 	bl	800109e <millis>
 800101c:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <apMain+0x48>)
 8001024:	f006 fd53 	bl	8007ace <HAL_GPIO_TogglePin>
	  }
	#endif



		cliMain();
 8001028:	f000 fc96 	bl	8001958 <cliMain>
		if(millis()-pre_time >= led_blink_time) //
 800102c:	e7ec      	b.n	8001008 <apMain+0x20>
 800102e:	bf00      	nop
 8001030:	40020800 	.word	0x40020800

08001034 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  HAL_Init();
 800103a:	f005 f9fd 	bl	8006438 <HAL_Init>
  SystemClock_Config();
 800103e:	f000 f835 	bl	80010ac <SystemClock_Config>

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <bspInit+0x50>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <bspInit+0x50>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <bspInit+0x50>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <bspInit+0x50>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a07      	ldr	r2, [pc, #28]	; (8001084 <bspInit+0x50>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <bspInit+0x50>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <delay>:

void delay(uint32_t ms)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  HAL_Delay(ms);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f005 fa43 	bl	800651c <HAL_Delay>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <millis>:

uint32_t millis(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010a2:	f005 fa2f 	bl	8006504 <HAL_GetTick>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}

080010ac <SystemClock_Config>:



void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09a      	sub	sp, #104	; 0x68
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00b f876 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <SystemClock_Config+0xfc>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <SystemClock_Config+0xfc>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <SystemClock_Config+0xfc>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <SystemClock_Config+0x100>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <SystemClock_Config+0x100>)
 8001108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <SystemClock_Config+0x100>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800111a:	2305      	movs	r3, #5
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001130:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001132:	2319      	movs	r3, #25
 8001134:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800113e:	2304      	movs	r3, #4
 8001140:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001146:	4618      	mov	r0, r3
 8001148:	f007 fe60 	bl	8008e0c <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001152:	f000 f82d 	bl	80011b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	2103      	movs	r1, #3
 8001172:	4618      	mov	r0, r3
 8001174:	f008 f8ba 	bl	80092ec <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800117e:	f000 f817 	bl	80011b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001182:	2302      	movs	r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fa7b 	bl	800968c <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800119c:	f000 f808 	bl	80011b0 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3768      	adds	r7, #104	; 0x68
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <Error_Handler>:

void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f005 f93e 	bl	80064dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Stream5_IRQHandler+0x10>)
 800126a:	f005 fc45 	bl	8006af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200019c4 	.word	0x200019c4

08001278 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Stream6_IRQHandler+0x10>)
 800127e:	f005 fc3b 	bl	8006af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20001a88 	.word	0x20001a88

0800128c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <USART1_IRQHandler+0x10>)
 8001292:	f008 fd67 	bl	8009d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20001ae8 	.word	0x20001ae8

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f008 fd5d 	bl	8009d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
 // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20001508 	.word	0x20001508

080012b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <OTG_FS_IRQHandler+0x10>)
 80012ba:	f006 fd73 	bl	8007da4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200028f4 	.word	0x200028f4

080012c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <DMA2_Stream7_IRQHandler+0x10>)
 80012ce:	f005 fc13 	bl	8006af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20001a28 	.word	0x20001a28

080012dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_kill>:

int _kill(int pid, int sig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012f6:	f00a ff11 	bl	800c11c <__errno>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2216      	movs	r2, #22
 80012fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_exit>:

void _exit (int status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe7 	bl	80012ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800131e:	e7fe      	b.n	800131e <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
	}

return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
	}
	return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
	return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f00a fe76 	bl	800c11c <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20020000 	.word	0x20020000
 800145c:	00000400 	.word	0x00000400
 8001460:	200003e0 	.word	0x200003e0
 8001464:	20002d30 	.word	0x20002d30

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <SystemInit+0x28>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <SystemInit+0x28>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SystemInit+0x28>)
 800147e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001482:	609a      	str	r2, [r3, #8]
#endif
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800149a:	e003      	b.n	80014a4 <LoopCopyDataInit>

0800149c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014a2:	3104      	adds	r1, #4

080014a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ac:	d3f6      	bcc.n	800149c <CopyDataInit>
  ldr  r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b0:	e002      	b.n	80014b8 <LoopFillZerobss>

080014b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b4:	f842 3b04 	str.w	r3, [r2], #4

080014b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014bc:	d3f9      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014be:	f7ff ffd3 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f00a fe31 	bl	800c128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f00a fe1d 	bl	800c104 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014d0:	0800fee4 	.word	0x0800fee4
  ldr  r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d8:	200003c4 	.word	0x200003c4
  ldr  r2, =_sbss
 80014dc:	200003c4 	.word	0x200003c4
  ldr  r3, = _ebss
 80014e0:	20002d30 	.word	0x20002d30

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>

080014e6 <qbufferCreate>:




bool qbufferCreate (qbuffer_t *p_node, uint8_t *p_buf,  uint32_t length)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]

   bool ret = true;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]

   p_node->in =  0;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
   p_node->out = 0;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
   p_node->len = length;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
   p_node->size  = 1;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	60da      	str	r2, [r3, #12]
   p_node->p_buf = p_buf;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	611a      	str	r2, [r3, #16]


   return ret;
 8001514:	7dfb      	ldrb	r3, [r7, #23]

}
 8001516:	4618      	mov	r0, r3
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <qbufferRead>:
  }

  return ret;
}
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001522:	b480      	push	{r7}
 8001524:	b087      	sub	sp, #28
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]


  for(int i =0; i<length; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e026      	b.n	8001586 <qbufferRead+0x64>
  {
    if(p_node-> p_buf != NULL)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	441a      	add	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	440b      	add	r3, r1
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d00c      	beq.n	800157a <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	fbb3 f1f2 	udiv	r1, r3, r2
 800156e:	fb02 f201 	mul.w	r2, r2, r1
 8001572:	1a9a      	subs	r2, r3, r2
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	e002      	b.n	8001580 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
      break;
 800157e:	e006      	b.n	800158e <qbufferRead+0x6c>
  for(int i =0; i<length; i++)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	3301      	adds	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d8d4      	bhi.n	8001538 <qbufferRead+0x16>
    }

  }


  return ret;
 800158e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <qbufferAvailable>:


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node ->in - p_node->out) % p_node->len;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6892      	ldr	r2, [r2, #8]
 80015b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80015b6:	fb02 f201 	mul.w	r2, r2, r1
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  return ret;
 80015be:	68fb      	ldr	r3, [r7, #12]

}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
	bool ret = true;
 80015d2:	2301      	movs	r3, #1
 80015d4:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]

  for(int i = 0 ; i < BUTTON_MAX_CH ; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e019      	b.n	8001626 <buttonInit+0x5a>
  {
  	 GPIO_InitStruct.Pin = button_tbl[i].pin;
 80015f2:	4913      	ldr	r1, [pc, #76]	; (8001640 <buttonInit+0x74>)
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	607b      	str	r3, [r7, #4]
  	 HAL_GPIO_Init(button_tbl[i].port,&GPIO_InitStruct);
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <buttonInit+0x74>)
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1d3a      	adds	r2, r7, #4
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f005 ffbe 	bl	800759c <HAL_GPIO_Init>
  for(int i = 0 ; i < BUTTON_MAX_CH ; i++)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b00      	cmp	r3, #0
 800162a:	dde2      	ble.n	80015f2 <buttonInit+0x26>
  }

	#ifdef _USE_HW_CLI
		cliAdd("button",cliButton);
 800162c:	4905      	ldr	r1, [pc, #20]	; (8001644 <buttonInit+0x78>)
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <buttonInit+0x7c>)
 8001630:	f000 fec8 	bl	80023c4 <cliAdd>
	#endif
	return ret;
 8001634:	7efb      	ldrb	r3, [r7, #27]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000004 	.word	0x20000004
 8001644:	080016bd 	.word	0x080016bd
 8001648:	0800f4d8 	.word	0x0800f4d8

0800164c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]

	if(ch > BUTTON_MAX_CH)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d901      	bls.n	8001664 <buttonGetPressed+0x18>
	{
		return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e024      	b.n	80016ae <buttonGetPressed+0x62>
	}

	if( HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state ) //읽은값이 0 이면//
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4914      	ldr	r1, [pc, #80]	; (80016b8 <buttonGetPressed+0x6c>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	4910      	ldr	r1, [pc, #64]	; (80016b8 <buttonGetPressed+0x6c>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	f006 f9ef 	bl	8007a6c <HAL_GPIO_ReadPin>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	4908      	ldr	r1, [pc, #32]	; (80016b8 <buttonGetPressed+0x6c>)
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	3308      	adds	r3, #8
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4298      	cmp	r0, r3
 80016a6:	d101      	bne.n	80016ac <buttonGetPressed+0x60>
	{
		ret = true;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]

}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000004 	.word	0x20000004

080016bc <cliButton>:

	#ifdef _USE_HW_CLI
	void cliButton(cli_args_t *args)
	{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
		bool  ret = false;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
		uint16_t pre_time;

		if(args->argc == 1 && args->isStr(0, "show") == true)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d12c      	bne.n	800172a <cliButton+0x6e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	491b      	ldr	r1, [pc, #108]	; (8001744 <cliButton+0x88>)
 80016d6:	2000      	movs	r0, #0
 80016d8:	4798      	blx	r3
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d024      	beq.n	800172a <cliButton+0x6e>
		{
			while(cliKeepLoop())
 80016e0:	e01e      	b.n	8001720 <cliButton+0x64>
			{

			  if( millis() - pre_time > 500)
 80016e2:	f7ff fcdc 	bl	800109e <millis>
 80016e6:	4602      	mov	r2, r0
 80016e8:	8afb      	ldrh	r3, [r7, #22]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f0:	d916      	bls.n	8001720 <cliButton+0x64>
			  {
			     pre_time = millis();
 80016f2:	f7ff fcd4 	bl	800109e <millis>
 80016f6:	4603      	mov	r3, r0
 80016f8:	82fb      	strh	r3, [r7, #22]

           for( int i = 0 ; i < BUTTON_MAX_CH ; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e00c      	b.n	800171a <cliButton+0x5e>
           {
            cliPrintf("Button  : %d \n", buttonGetPressed(i));
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ffa1 	bl	800164c <buttonGetPressed>
 800170a:	4603      	mov	r3, r0
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <cliButton+0x8c>)
 8001710:	f000 fd48 	bl	80021a4 <cliPrintf>
           for( int i = 0 ; i < BUTTON_MAX_CH ; i++)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3301      	adds	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	ddef      	ble.n	8001700 <cliButton+0x44>
			while(cliKeepLoop())
 8001720:	f000 fe3a 	bl	8002398 <cliKeepLoop>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1db      	bne.n	80016e2 <cliButton+0x26>
			  // delay(100);
			}
		}


		if(ret != true )
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <cliButton+0x80>
		{
		  cliPrintf("button show\n");
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <cliButton+0x90>)
 8001738:	f000 fd34 	bl	80021a4 <cliPrintf>
		}

	}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800f4e0 	.word	0x0800f4e0
 8001748:	0800f4e8 	.word	0x0800f4e8
 800174c:	0800f4f8 	.word	0x0800f4f8

08001750 <cliInit>:
void cliShowList(cli_args_t *args);                      // "HELP"를 치면 실행되믄 함수. 저장된 명령어 List 출력함수
void cliMemoryDump(cli_args_t *args);                    // "MD"를 치면 지정된 메모리주소, 크기 만금 출력하는 함수


bool cliInit(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <cliInit+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <cliInit+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <cliInit+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <cliInit+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <cliInit+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <cliInit+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <cliInit+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;   // 입력 인수의 정수형 숫자 데이터 GET
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <cliInit+0x74>)
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <cliInit+0x78>)
 800178a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;  // 입력 인수의 플롯형 숫자 데이터 GET
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <cliInit+0x74>)
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <cliInit+0x7c>)
 8001792:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;    // 입력된 string 문자 GET
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <cliInit+0x74>)
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <cliInit+0x80>)
 800179a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;     // 입력된 string 문자 비교해서 동일하면 "1" 리턴
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <cliInit+0x74>)
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <cliInit+0x84>)
 80017a2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <cliInit+0x74>)
 80017a8:	f000 fb72 	bl	8001e90 <cliLineClean>


  cliAdd("help", cliShowList);   // 현재 저장된 명령어 출력
 80017ac:	490a      	ldr	r1, [pc, #40]	; (80017d8 <cliInit+0x88>)
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <cliInit+0x8c>)
 80017b0:	f000 fe08 	bl	80023c4 <cliAdd>
  cliAdd("md"  , cliMemoryDump); // 특정주소 메모리 출력
 80017b4:	490a      	ldr	r1, [pc, #40]	; (80017e0 <cliInit+0x90>)
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <cliInit+0x94>)
 80017b8:	f000 fe04 	bl	80023c4 <cliAdd>

  return true;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20001548 	.word	0x20001548
 80017c8:	08002255 	.word	0x08002255
 80017cc:	080022a5 	.word	0x080022a5
 80017d0:	080022fd 	.word	0x080022fd
 80017d4:	08002345 	.word	0x08002345
 80017d8:	08002459 	.word	0x08002459
 80017dc:	0800f508 	.word	0x0800f508
 80017e0:	080024c9 	.word	0x080024c9
 80017e4:	0800f510 	.word	0x0800f510

080017e8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <cliOpen+0x38>)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <cliOpen+0x38>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fe09 	bl	800341c <uartOpen>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <cliOpen+0x38>)
 8001810:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <cliOpen+0x38>)
 8001814:	7a1b      	ldrb	r3, [r3, #8]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001548 	.word	0x20001548

08001824 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <cliShowLog+0xdc>)
 800182e:	7a5b      	ldrb	r3, [r3, #9]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d061      	beq.n	80018f8 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);    // 현재 커서 위치
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7a98      	ldrb	r0, [r3, #10]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800183e:	461a      	mov	r2, r3
 8001840:	4930      	ldr	r1, [pc, #192]	; (8001904 <cliShowLog+0xe0>)
 8001842:	f002 f88b 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);     // 입력된 문자 갯수
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a98      	ldrb	r0, [r3, #10]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001850:	461a      	mov	r2, r3
 8001852:	492d      	ldr	r1, [pc, #180]	; (8001908 <cliShowLog+0xe4>)
 8001854:	f002 f882 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);   // 버퍼크기
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a98      	ldrb	r0, [r3, #10]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001862:	461a      	mov	r2, r3
 8001864:	4929      	ldr	r1, [pc, #164]	; (800190c <cliShowLog+0xe8>)
 8001866:	f002 f879 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);       // 버퍼
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7a98      	ldrb	r0, [r3, #10]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001874:	461a      	mov	r2, r3
 8001876:	4926      	ldr	r1, [pc, #152]	; (8001910 <cliShowLog+0xec>)
 8001878:	f002 f870 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);    // 이전에 저장된 배열 index 번호 ( 사용자가 정하면 늘어남. 현재는 4개만 선언
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a98      	ldrb	r0, [r3, #10]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001886:	461a      	mov	r2, r3
 8001888:	4922      	ldr	r1, [pc, #136]	; (8001914 <cliShowLog+0xf0>)
 800188a:	f002 f867 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last); // 다음에 써야할 배열 index 번호
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7a98      	ldrb	r0, [r3, #10]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001898:	461a      	mov	r2, r3
 800189a:	491f      	ldr	r1, [pc, #124]	; (8001918 <cliShowLog+0xf4>)
 800189c:	f002 f85e 	bl	800395c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);// 히스토리 카운트. 저장 몇번 했는지 알려줌// 현재 4 다차면 4로 유지됨
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7a98      	ldrb	r0, [r3, #10]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80018aa:	461a      	mov	r2, r3
 80018ac:	491b      	ldr	r1, [pc, #108]	; (800191c <cliShowLog+0xf8>)
 80018ae:	f002 f855 	bl	800395c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e012      	b.n	80018de <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7a98      	ldrb	r0, [r3, #10]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4913      	ldr	r1, [pc, #76]	; (8001920 <cliShowLog+0xfc>)
 80018d4:	f002 f842 	bl	800395c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dbe5      	blt.n	80018b8 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7a9b      	ldrb	r3, [r3, #10]
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <cliShowLog+0x100>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f832 	bl	800395c <uartPrintf>
  }
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20001548 	.word	0x20001548
 8001904:	0800f514 	.word	0x0800f514
 8001908:	0800f524 	.word	0x0800f524
 800190c:	0800f534 	.word	0x0800f534
 8001910:	0800f544 	.word	0x0800f544
 8001914:	0800f554 	.word	0x0800f554
 8001918:	0800f564 	.word	0x0800f564
 800191c:	0800f574 	.word	0x0800f574
 8001920:	0800f584 	.word	0x0800f584
 8001924:	0800f594 	.word	0x0800f594

08001928 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <cliShowPrompt+0x28>)
 8001936:	4618      	mov	r0, r3
 8001938:	f002 f810 	bl	800395c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4904      	ldr	r1, [pc, #16]	; (8001954 <cliShowPrompt+0x2c>)
 8001942:	4618      	mov	r0, r3
 8001944:	f002 f80a 	bl	800395c <uartPrintf>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800f598 	.word	0x0800f598
 8001954:	0800f59c 	.word	0x0800f59c

08001958 <cliMain>:

bool cliMain(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <cliMain+0x40>)
 800195e:	7a1b      	ldrb	r3, [r3, #8]
 8001960:	f083 0301 	eor.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <cliMain+0x16>
  {
    return false;
 800196a:	2300      	movs	r3, #0
 800196c:	e012      	b.n	8001994 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0) // 실제적으로 한바이트 이상 들어오면 Update 함수를 실행해서 계속 업데이트 해주는 역활
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <cliMain+0x40>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 ff0a 	bl	800378c <uartAvailable>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <cliMain+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f001 ff48 	bl	8003818 <uartRead>
 8001988:	4603      	mov	r3, r0
 800198a:	4619      	mov	r1, r3
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <cliMain+0x40>)
 800198e:	f000 f819 	bl	80019c4 <cliUpdate>
  }

  return true;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20001548 	.word	0x20001548

0800199c <cliWrite>:
{
  return uartRead(cli_node.ch);
}

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <cliWrite+0x24>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 ff5e 	bl	8003870 <uartWrite>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001548 	.word	0x20001548

080019c4 <cliUpdate>:


bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line; // 구조체는 주소를 반환하기 때문에 포인터로 선언해서 접근해야됨//

  line = &p_cli->line; // 좀더 편하게 맴버에 접근 하기 위함//
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80019dc:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)  // 조합키여부 판단, 처음에는 무조건 실행되서 조합키(여러개 문자)인지 판별함
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7c1b      	ldrb	r3, [r3, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8168 	bne.w	8001cb8 <cliUpdate+0x2f4>
  {                                 // CLI_RX_IDLE : 1바이트인 문자키 일때는 IDLE임
    switch(rx_data)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b7f      	cmp	r3, #127	; 0x7f
 80019ec:	d02a      	beq.n	8001a44 <cliUpdate+0x80>
 80019ee:	2b7f      	cmp	r3, #127	; 0x7f
 80019f0:	f300 80da 	bgt.w	8001ba8 <cliUpdate+0x1e4>
 80019f4:	2b1b      	cmp	r3, #27
 80019f6:	d021      	beq.n	8001a3c <cliUpdate+0x78>
 80019f8:	2b1b      	cmp	r3, #27
 80019fa:	f300 80d5 	bgt.w	8001ba8 <cliUpdate+0x1e4>
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d062      	beq.n	8001ac8 <cliUpdate+0x104>
 8001a02:	2b0d      	cmp	r3, #13
 8001a04:	f040 80d0 	bne.w	8001ba8 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0) // 라인상 데이터 있으면//
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli); // 히스토리에 라인에 저장을 해라//
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa56 	bl	8001ec4 <cliLineAdd>
          cliRunCmd(p_cli);  // cli RunCmd 함수// 파싱부터 입력문자에 따라 할 일 정의되 있음//
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fb21 	bl	8002060 <cliRunCmd>
        }

       // p_cli->line.count =0; // 아래와 같은 표현이지만 *line 선언해서 좀더 간결하게 맴버에 접근함//
        line->count = 0;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff77 	bl	8001928 <cliShowPrompt>
        break;
 8001a3a:	e144      	b.n	8001cc6 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1; // 스페셜키 처리해주세요~
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	741a      	strb	r2, [r3, #16]
        break;
 8001a42:	e140      	b.n	8001cc6 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count) // 커서위치가 입력된 문자열보다 작아야 Del 키 동작//
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f080 8133 	bcs.w	8001cbc <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001a66:	2301      	movs	r3, #1
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6a:	e013      	b.n	8001a94 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];// 라인커서 위치에서  +1 된 테이터를 왼쪽으로 하나씩 미루는 구문//
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	461a      	mov	r2, r3
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	441a      	add	r2, r3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	440b      	add	r3, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	69f9      	ldr	r1, [r7, #28]
 8001a88:	5c89      	ldrb	r1, [r1, r2]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	3301      	adds	r3, #1
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a94:	7efb      	ldrb	r3, [r7, #27]
 8001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbe7      	blt.n	8001a6c <cliUpdate+0xa8>
          }

          line->count--;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");//VT100 에서 커서위치 문자 삭제하라는 명령어임
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	498e      	ldr	r1, [pc, #568]	; (8001cf8 <cliUpdate+0x334>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 ff4b 	bl	800395c <uartPrintf>
        }
        break;
 8001ac6:	e0f9      	b.n	8001cbc <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d055      	beq.n	8001b7e <cliUpdate+0x1ba>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d050      	beq.n	8001b7e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)// 커서가 맨뒤에 있을때
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10e      	bne.n	8001b0a <cliUpdate+0x146>
          {
            line->count--;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;// 마지막에 NULL문자 추가
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b02:	461a      	mov	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2100      	movs	r1, #0
 8001b08:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)//입력된 문자 안에 커서 있을때
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d231      	bcs.n	8001b7e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	e013      	b.n	8001b58 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b36:	461a      	mov	r2, r3
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	441a      	add	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b42:	4619      	mov	r1, r3
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	440b      	add	r3, r1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	69f9      	ldr	r1, [r7, #28]
 8001b4c:	5c89      	ldrb	r1, [r1, r2]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	3301      	adds	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b58:	7ebb      	ldrb	r3, [r7, #26]
 8001b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbe7      	blt.n	8001b30 <cliUpdate+0x16c>
            }

            line->count--;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b76:	461a      	mov	r2, r3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 809b 	beq.w	8001cc0 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");//백스페이스 \b \b  VT100
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4957      	ldr	r1, [pc, #348]	; (8001cfc <cliUpdate+0x338>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fedb 	bl	800395c <uartPrintf>
        }
        break;
 8001ba6:	e08b      	b.n	8001cc0 <cliUpdate+0x2fc>


      default:// 위에 스페셜키가 아닐경우 처리//
        if ((line->count + 1) < line->buf_len)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bae:	3301      	adds	r3, #1
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f280 8084 	bge.w	8001cc4 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)// 맨뒤에서 문자가 삽입되면
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d124      	bne.n	8001c16 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	1cf9      	adds	r1, r7, #3
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fe4b 	bl	8003870 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be0:	461a      	mov	r2, r3
 8001be2:	78f9      	ldrb	r1, [r7, #3]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c0e:	461a      	mov	r2, r3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)// 중간에 문자가 삽입되면
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d24e      	bcs.n	8001cc4 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e013      	b.n	8001c64 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c42:	461a      	mov	r2, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c50:	4619      	mov	r1, r3
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	1acb      	subs	r3, r1, r3
 8001c56:	69f9      	ldr	r1, [r7, #28]
 8001c58:	5c89      	ldrb	r1, [r1, r2]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	7e7b      	ldrb	r3, [r7, #25]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbe7      	blt.n	8001c3c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c72:	461a      	mov	r2, r3
 8001c74:	78f9      	ldrb	r1, [r7, #3]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <cliUpdate+0x33c>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fe53 	bl	800395c <uartPrintf>
          }
        }
        break;
 8001cb6:	e005      	b.n	8001cc4 <cliUpdate+0x300>
    }
  }
 8001cb8:	bf00      	nop
 8001cba:	e004      	b.n	8001cc6 <cliUpdate+0x302>
        break;
 8001cbc:	bf00      	nop
 8001cbe:	e002      	b.n	8001cc6 <cliUpdate+0x302>
        break;
 8001cc0:	bf00      	nop
 8001cc2:	e000      	b.n	8001cc6 <cliUpdate+0x302>
        break;
 8001cc4:	bf00      	nop

  switch(p_cli->state)// 조합키 처리
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7c1b      	ldrb	r3, [r3, #16]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	f200 80d2 	bhi.w	8001e76 <cliUpdate+0x4b2>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <cliUpdate+0x314>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001d05 	.word	0x08001d05
 8001ce4:	08001e6d 	.word	0x08001e6d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;// 조합키 처리하니 단축키 처리 하지 마셈 의미//
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	741a      	strb	r2, [r3, #16]
      break;
 8001cee:	e0c2      	b.n	8001e76 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	741a      	strb	r2, [r3, #16]
      break;
 8001cf6:	e0be      	b.n	8001e76 <cliUpdate+0x4b2>
 8001cf8:	0800f5a4 	.word	0x0800f5a4
 8001cfc:	0800f5ac 	.word	0x0800f5ac
 8001d00:	0800f5b4 	.word	0x0800f5b4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;// 조합키를 처리하는 단계가 아닐때만 수행
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	2b44      	cmp	r3, #68	; 0x44
 8001d0e:	d11a      	bne.n	8001d46 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <cliUpdate+0x382>
        {
          line->cursor--;// 커서 왼쪽
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001d2a:	231b      	movs	r3, #27
 8001d2c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001d2e:	235b      	movs	r3, #91	; 0x5b
 8001d30:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);//VT100 명령어 출력 3개
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f107 010c 	add.w	r1, r7, #12
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fd95 	bl	8003870 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	2b43      	cmp	r3, #67	; 0x43
 8001d4a:	d11d      	bne.n	8001d88 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->buf_len)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <cliUpdate+0x3a8>
        {
          line->cursor++;// 커서 오른쪽
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        tx_buf[0] = 0x1B;
 8001d6c:	231b      	movs	r3, #27
 8001d6e:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 8001d70:	235b      	movs	r3, #91	; 0x5b
 8001d72:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);//VT100 명령어 출력 3개
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	2203      	movs	r2, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fd74 	bl	8003870 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	2b41      	cmp	r3, #65	; 0x41
 8001d8c:	d10c      	bne.n	8001da8 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);// 버퍼에 저장되어 있는 값을 호출//
 8001d8e:	2101      	movs	r1, #1
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8db 	bl	8001f4c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f001 fdda 	bl	800395c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b42      	cmp	r3, #66	; 0x42
 8001dac:	d10c      	bne.n	8001dc8 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8001dae:	2100      	movs	r1, #0
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8cb 	bl	8001f4c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f001 fdca 	bl	800395c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b31      	cmp	r3, #49	; 0x31
 8001dcc:	d10f      	bne.n	8001dee <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);//VT100 명령어
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7818      	ldrb	r0, [r3, #0]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	461a      	mov	r2, r3
 8001dda:	492b      	ldr	r1, [pc, #172]	; (8001e88 <cliUpdate+0x4c4>)
 8001ddc:	f001 fdbe 	bl	800395c <uartPrintf>
        line->cursor = 0;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b34      	cmp	r3, #52	; 0x34
 8001df2:	d13f      	bne.n	8001e74 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d210      	bcs.n	8001e26 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);//VT100 명령어
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	8afa      	ldrh	r2, [r7, #22]
 8001e1e:	491b      	ldr	r1, [pc, #108]	; (8001e8c <cliUpdate+0x4c8>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 fd9b 	bl	800395c <uartPrintf>
        }
        if (line->cursor > line->count)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);//VT100 명령어
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	8afa      	ldrh	r2, [r7, #22]
 8001e50:	490d      	ldr	r1, [pc, #52]	; (8001e88 <cliUpdate+0x4c4>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fd82 	bl	800395c <uartPrintf>
        }
        line->cursor = line->count;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001e6a:	e003      	b.n	8001e74 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	741a      	strb	r2, [r3, #16]
      break;
 8001e72:	e000      	b.n	8001e76 <cliUpdate+0x4b2>
      break;
 8001e74:	bf00      	nop
  }



  cliShowLog(p_cli); // log용 미러 화면을 추가시 관련 내용을 뿌리는 함수 //
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fcd4 	bl	8001824 <cliShowLog>

  return ret;
 8001e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	0800f5c0 	.word	0x0800f5c0
 8001e8c:	0800f5c8 	.word	0x0800f5c8

08001e90 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	223f      	movs	r2, #63	; 0x3f
 8001eac:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001eee:	2243      	movs	r2, #67	; 0x43
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f00a f94d 	bl	800c190 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d807      	bhi.n	8001f10 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001f16:	b25a      	sxtb	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001f24:	3301      	adds	r3, #1
 8001f26:	425a      	negs	r2, r3
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	bf58      	it	pl
 8001f32:	4253      	negpl	r3, r2
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d076      	beq.n	8002050 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7818      	ldrb	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001f76:	461a      	mov	r2, r3
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <cliLineChange+0x10c>)
 8001f7a:	f001 fcef 	bl	800395c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7818      	ldrb	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001f92:	461a      	mov	r2, r3
 8001f94:	4931      	ldr	r1, [pc, #196]	; (800205c <cliLineChange+0x110>)
 8001f96:	f001 fce1 	bl	800395c <uartPrintf>
  }


  if (key_up == true)
 8001f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d125      	bne.n	8001fee <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001fd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fd6:	fb02 f201 	mul.w	r2, r2, r1
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	b25a      	sxtb	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    // 최근에 저장된 인댁스 에서 (-1)전꺼면 상위로 올라가는 의미 UP일떄는 -1//
    change_i = p_cli->hist_line_i;//즉 최종 출력할 인덱스 번호를 저장
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e013      	b.n	8002016 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001ffc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002000:	fb02 f201 	mul.w	r2, r2, r1
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	b25a      	sxtb	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002014:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i]; // 현재 라인에 최종 출력할 인덱스 버퍼를 출력시켜줌
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	4403      	add	r3, r0
 8002028:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800202c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002030:	4611      	mov	r1, r2
 8002032:	2243      	movs	r2, #67	; 0x43
 8002034:	4618      	mov	r0, r3
 8002036:	f00a f8ab 	bl	800c190 <memcpy>
  p_cli->line.cursor = p_cli->line.count;  // 커서 위치를 맨뒤로 보내줌
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800204e:	e000      	b.n	8002052 <cliLineChange+0x106>
    return;
 8002050:	bf00      	nop
}
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800f5c0 	.word	0x0800f5c0
 800205c:	0800f5d0 	.word	0x0800f5d0

08002060 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002068:	2300      	movs	r3, #0
 800206a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f851 	bl	8002114 <cliParseArgs>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d046      	beq.n	8002106 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002078:	4825      	ldr	r0, [pc, #148]	; (8002110 <cliRunCmd+0xb0>)
 800207a:	f000 f893 	bl	80021a4 <cliPrintf>

    cliToUpper(p_cli->argv[0]); // 0번째는 명령어, 대문자로 변경하는 함수//
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f8b1 	bl	80021ec <cliToUpper>

    for (int i=0; i < p_cli->cmd_count; i++) // List에 저장된 CMD 만큼 루프 돌려줌
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e033      	b.n	80020f8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0) // 입력된 명령어(HELP, MD, LED)와 저장된 명령어가 같으면 아래 실행//
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe f898 	bl	80001e0 <strcmp>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11d      	bne.n	80020f2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;     // 입력된 문자열 갯수는 하나 뺴줌. CMD는 제외
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];      // 입력된 문자열 배열 0 뺴줌. CMD는 제외
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);  // 해당하는 명령어의 콜백 함수를 실행//HELP, MD, LED 가르키는 함수 실행//
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
        break;
 80020f0:	e009      	b.n	8002106 <cliRunCmd+0xa6>
    for (int i=0; i < p_cli->cmd_count; i++) // List에 저장된 CMD 만큼 루프 돌려줌
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4293      	cmp	r3, r2
 8002104:	dbc4      	blt.n	8002090 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002106:	7afb      	ldrb	r3, [r7, #11]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	0800f5d8 	.word	0x0800f5d8

08002114 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v"; //\r 열복귀 \n 줄바꿈\t 탭문자
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002132:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800213a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

  // 입력 CMD 를 파싱하는 부분//
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <cliParseArgs+0x8c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f107 0208 	add.w	r2, r7, #8
 8002150:	4619      	mov	r1, r3
 8002152:	6938      	ldr	r0, [r7, #16]
 8002154:	f00a ffd0 	bl	800d0f8 <strtok_r>
 8002158:	61b8      	str	r0, [r7, #24]
 800215a:	e010      	b.n	800217e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;  // 입력된 명령어 문자열 배열형태로 argv 에  저장//
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	82fa      	strh	r2, [r7, #22]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <cliParseArgs+0x8c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f107 0208 	add.w	r2, r7, #8
 8002174:	4619      	mov	r1, r3
 8002176:	2000      	movs	r0, #0
 8002178:	f00a ffbe 	bl	800d0f8 <strtok_r>
 800217c:	61b8      	str	r0, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1eb      	bne.n	800215c <cliParseArgs+0x48>
  }

  // ex test 0 1 2 3 입력 //  argv[0] = test,  argv[1] = 0, //

  p_cli->argc = argc; // 입력된 파라미터 문자열의 갯수
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8afa      	ldrh	r2, [r7, #22]
 8002188:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 800218c:	8afb      	ldrh	r3, [r7, #22]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <cliParseArgs+0x82>
  {
    ret = true;
 8002192:	2301      	movs	r3, #1
 8002194:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002196:	7ffb      	ldrb	r3, [r7, #31]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000010 	.word	0x20000010

080021a4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80021a4:	b40f      	push	{r0, r1, r2, r3}
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <cliPrintf+0x44>)
 80021b4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f103 0011 	add.w	r0, r3, #17
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c4:	f00b f84e 	bl	800d264 <vsniprintf>
 80021c8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	7818      	ldrb	r0, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3311      	adds	r3, #17
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f001 fb4b 	bl	8003870 <uartWrite>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021e4:	b004      	add	sp, #16
 80021e6:	4770      	bx	lr
 80021e8:	20001548 	.word	0x20001548

080021ec <cliToUpper>:

void cliToUpper(char *str)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	81fb      	strh	r3, [r7, #14]
 80021f8:	e018      	b.n	800222c <cliToUpper+0x40>
  {
    str_ch = str[i];
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002204:	7b7b      	ldrb	r3, [r7, #13]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d014      	beq.n	8002234 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800220a:	7b7b      	ldrb	r3, [r7, #13]
 800220c:	2b60      	cmp	r3, #96	; 0x60
 800220e:	d905      	bls.n	800221c <cliToUpper+0x30>
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	2b7a      	cmp	r3, #122	; 0x7a
 8002214:	d802      	bhi.n	800221c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002216:	7b7b      	ldrb	r3, [r7, #13]
 8002218:	3b20      	subs	r3, #32
 800221a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	7b7a      	ldrb	r2, [r7, #13]
 8002224:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	3301      	adds	r3, #1
 800222a:	81fb      	strh	r3, [r7, #14]
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d9e3      	bls.n	80021fa <cliToUpper+0xe>
 8002232:	e000      	b.n	8002236 <cliToUpper+0x4a>
      break;
 8002234:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d105      	bne.n	8002248 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	3b01      	subs	r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
  }
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <cliArgsGetData+0x4c>)
 8002264:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	b29a      	uxth	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002270:	429a      	cmp	r2, r3
 8002272:	d301      	bcc.n	8002278 <cliArgsGetData+0x24>
  {
    return 0;
 8002274:	2300      	movs	r3, #0
 8002276:	e00e      	b.n	8002296 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f00a ffb4 	bl	800d1f8 <strtoul>
 8002290:	4603      	mov	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]
  // 숫자가 아닌 문자를 만나면 그 포인터 위치도 구해줌(2번쨰 변수에 저장)
  // strtoul( 입려문자 , 문자열위치(숫자로변경못하는문자열) ,  진수 선택(10진수..등등)
  // 진수가 NULL 이면 2번째 변수의 시작위치를 구하지 않음
  // 즉 파싱한 p_cli->cmd_args.argv[index] 의 문자를 입력받아 strtoul 을 이용하여 unsigned long 으로 변환하여 ret에 리턴시킴//

  return ret;
 8002294:	68fb      	ldr	r3, [r7, #12]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20001548 	.word	0x20001548

080022a4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <cliArgsGetFloat+0x54>)
 80022b6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <cliArgsGetFloat+0x28>
  {
    return 0;
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e00d      	b.n	80022e8 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f00a fe89 	bl	800cff4 <strtof>
 80022e2:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	ee07 3a90 	vmov	s15, r3
}
 80022ec:	eeb0 0a67 	vmov.f32	s0, s15
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20001548 	.word	0x20001548

080022fc <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <cliArgsGetStr+0x44>)
 800230c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	b29a      	uxth	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002318:	429a      	cmp	r2, r3
 800231a:	d301      	bcc.n	8002320 <cliArgsGetStr+0x24>
  {
    return 0;
 800231c:	2300      	movs	r3, #0
 800231e:	e008      	b.n	8002332 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20001548 	.word	0x20001548

08002344 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <cliArgsIsStr+0x50>)
 8002356:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	b29a      	uxth	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002362:	429a      	cmp	r2, r3
 8002364:	d301      	bcc.n	800236a <cliArgsIsStr+0x26>
  {
    return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e010      	b.n	800238c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f7fd ff30 	bl	80001e0 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20001548 	.word	0x20001548

08002398 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <cliKeepLoop+0x28>)
 80023a0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f9f0 	bl	800378c <uartAvailable>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <cliKeepLoop+0x1e>
  {
    return true;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80023b6:	2300      	movs	r3, #0
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20001548 	.word	0x20001548

080023c4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <cliAdd+0x90>)
 80023d4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d901      	bls.n	80023e4 <cliAdd+0x20>
  {
    return false;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e032      	b.n	800244a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80023ea:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str); //입력된 명령어를(cmd_str) CMD LIST에 복사해서 등록해줌
 80023ec:	89fa      	ldrh	r2, [r7, #14]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f009 ffc8 	bl	800c398 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func; // 명령어의 콜백 함수를 등록해줌
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);  // 명령어를 대문자 변환//
 800241e:	89fa      	ldrh	r2, [r7, #14]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff feda 	bl	80021ec <cliToUpper>

  p_cli->cmd_count++;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800243e:	3301      	adds	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20001548 	.word	0x20001548

08002458 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <cliShowList+0x60>)
 8002462:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002464:	4815      	ldr	r0, [pc, #84]	; (80024bc <cliShowList+0x64>)
 8002466:	f7ff fe9d 	bl	80021a4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800246a:	4815      	ldr	r0, [pc, #84]	; (80024c0 <cliShowList+0x68>)
 800246c:	f7ff fe9a 	bl	80021a4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e012      	b.n	800249c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fe8a 	bl	80021a4 <cliPrintf>
    cliPrintf("\r\n");
 8002490:	480a      	ldr	r0, [pc, #40]	; (80024bc <cliShowList+0x64>)
 8002492:	f7ff fe87 	bl	80021a4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	dbe5      	blt.n	8002476 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <cliShowList+0x6c>)
 80024ac:	f7ff fe7a 	bl	80021a4 <cliPrintf>
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20001548 	.word	0x20001548
 80024bc:	0800f5d8 	.word	0x0800f5d8
 80024c0:	0800f5dc 	.word	0x0800f5dc
 80024c4:	0800f5fc 	.word	0x0800f5fc

080024c8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80024d0:	2310      	movs	r3, #16
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];
  uint32_t pre_time;

  int    argc = args->argc;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80024e8:	4846      	ldr	r0, [pc, #280]	; (8002604 <cliMemoryDump+0x13c>)
 80024ea:	f7ff fe5b 	bl	80021a4 <cliPrintf>
 80024ee:	e086      	b.n	80025fe <cliMemoryDump+0x136>
    return;
  }

  if(argc > 1)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	dd09      	ble.n	800250a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f00a fe79 	bl	800d1f8 <strtoul>
 8002506:	4603      	mov	r3, r0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f00a fe70 	bl	800d1f8 <strtoul>
 8002518:	4603      	mov	r3, r0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002520:	4839      	ldr	r0, [pc, #228]	; (8002608 <cliMemoryDump+0x140>)
 8002522:	f7ff fe3f 	bl	80021a4 <cliPrintf>

  pre_time = millis();
 8002526:	f7fe fdba 	bl	800109e <millis>
 800252a:	60f8      	str	r0, [r7, #12]

  for (idx = 0; idx<size; idx++)
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	e058      	b.n	80025e4 <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <cliMemoryDump+0x7e>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	4619      	mov	r1, r3
 8002540:	4832      	ldr	r0, [pc, #200]	; (800260c <cliMemoryDump+0x144>)
 8002542:	f7ff fe2f 	bl	80021a4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4830      	ldr	r0, [pc, #192]	; (8002610 <cliMemoryDump+0x148>)
 800254e:	f7ff fe29 	bl	80021a4 <cliPrintf>

    if ((idx%4) == 3)
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	425a      	negs	r2, r3
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	bf58      	it	pl
 8002560:	4253      	negpl	r3, r2
 8002562:	2b03      	cmp	r3, #3
 8002564:	d138      	bne.n	80025d8 <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 8002566:	482b      	ldr	r0, [pc, #172]	; (8002614 <cliMemoryDump+0x14c>)
 8002568:	f7ff fe1c 	bl	80021a4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	e02c      	b.n	80025cc <cliMemoryDump+0x104>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002576:	60bb      	str	r3, [r7, #8]
        for (i=0;i<4;i++)
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e01d      	b.n	80025ba <cliMemoryDump+0xf2>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800257e:	f107 0208 	add.w	r2, r7, #8
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b1f      	cmp	r3, #31
 800258a:	d910      	bls.n	80025ae <cliMemoryDump+0xe6>
 800258c:	f107 0208 	add.w	r2, r7, #8
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b7e      	cmp	r3, #126	; 0x7e
 8002598:	d809      	bhi.n	80025ae <cliMemoryDump+0xe6>
          {
            cliPrintf("%c", asc[i]);
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	481c      	ldr	r0, [pc, #112]	; (8002618 <cliMemoryDump+0x150>)
 80025a8:	f7ff fdfc 	bl	80021a4 <cliPrintf>
 80025ac:	e002      	b.n	80025b4 <cliMemoryDump+0xec>
          }
          else
          {
            cliPrintf(".");
 80025ae:	481b      	ldr	r0, [pc, #108]	; (800261c <cliMemoryDump+0x154>)
 80025b0:	f7ff fdf8 	bl	80021a4 <cliPrintf>
        for (i=0;i<4;i++)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	ddde      	ble.n	800257e <cliMemoryDump+0xb6>
          }
        }
        ascptr+=1;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	3304      	adds	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	3301      	adds	r3, #1
 80025ca:	623b      	str	r3, [r7, #32]
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	ddcf      	ble.n	8002572 <cliMemoryDump+0xaa>
      }
      cliPrintf("|\n   ");
 80025d2:	4813      	ldr	r0, [pc, #76]	; (8002620 <cliMemoryDump+0x158>)
 80025d4:	f7ff fde6 	bl	80021a4 <cliPrintf>
    }
    addr++;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	3304      	adds	r3, #4
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	3301      	adds	r3, #1
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dba2      	blt.n	8002532 <cliMemoryDump+0x6a>
  }

  cliPrintf("  time MD : %d ms\n", millis() - pre_time);
 80025ec:	f7fe fd57 	bl	800109e <millis>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	480a      	ldr	r0, [pc, #40]	; (8002624 <cliMemoryDump+0x15c>)
 80025fa:	f7ff fdd3 	bl	80021a4 <cliPrintf>
}
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0800f61c 	.word	0x0800f61c
 8002608:	0800f630 	.word	0x0800f630
 800260c:	0800f638 	.word	0x0800f638
 8002610:	0800f644 	.word	0x0800f644
 8002614:	0800f64c 	.word	0x0800f64c
 8002618:	0800f650 	.word	0x0800f650
 800261c:	0800f654 	.word	0x0800f654
 8002620:	0800f658 	.word	0x0800f658
 8002624:	0800f660 	.word	0x0800f660

08002628 <flashInit>:
#ifdef _USE_HW_CLI
  static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

	#ifdef _USE_HW_CLI
  	cliAdd("flash", cliFlash);
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <flashInit+0x14>)
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <flashInit+0x18>)
 8002630:	f7ff fec8 	bl	80023c4 <cliAdd>
	#endif

  return true;
 8002634:	2301      	movs	r3, #1
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800280d 	.word	0x0800280d
 8002640:	0800f67c 	.word	0x0800f67c

08002644 <flashErase>:


bool flashErase(uint32_t addr, uint32_t length)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  int16_t  ces = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	847b      	strh	r3, [r7, #34]	; 0x22


  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e018      	b.n	800269a <flashErase+0x56>
  {
    if (flashInSector(i, addr, length) == true) // 총 섹터크기만큼 루프 수행
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	b29b      	uxth	r3, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f873 	bl	800275c <flashInSector>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <flashErase+0x50>
    {
      if (start_sector_num < 0) //flashInSector() 조건 만족시 1번만 진입. 시작 섹터 주소 저장 //
 800267c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	da04      	bge.n	800268e <flashErase+0x4a>
      {
        start_sector_num = i +FLASH_SECTOR_OFFSET ;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	b29b      	uxth	r3, r3
 8002688:	3304      	adds	r3, #4
 800268a:	b29b      	uxth	r3, r3
 800268c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        //cliPrintf("sector NUM %d : \n", start_sector_num);
      }
      sector_count++; // flashInSector() 조건 만족시 매번 ++1 수행. 결국 지워야할 섹터 갯수 정보임  //
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	3301      	adds	r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3301      	adds	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	2b03      	cmp	r3, #3
 800269e:	dde3      	ble.n	8002668 <flashErase+0x24>
    }
  }

  ces = sector_count;
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	847b      	strh	r3, [r7, #34]	; 0x22

  if (sector_count > 0)
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <flashErase+0xa8>
  {
    HAL_FLASH_Unlock();
 80026aa:	f004 fce3 	bl	8007074 <HAL_FLASH_Unlock>

    init.TypeErase   	= FLASH_TYPEERASE_SECTORS;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
    init.Banks       	= FLASH_BANK_1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	613b      	str	r3, [r7, #16]
    init.Sector		 		= start_sector_num;//start_sector_num ;		  // 기존은 주소였는데 Sector로 변경
 80026b6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80026ba:	617b      	str	r3, [r7, #20]
    init.NbSectors    = sector_count;
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	61bb      	str	r3, [r7, #24]
    init.VoltageRange	= FLASH_VOLTAGE_RANGE_3;  // 전원 범위 선택
 80026c0:	2302      	movs	r3, #2
 80026c2:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fe42 	bl	8007358 <HAL_FLASHEx_Erase>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if (status == HAL_OK)
 80026da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <flashErase+0xa4>
    {
      ret = true;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80026e8:	f004 fce6 	bl	80070b8 <HAL_FLASH_Lock>
  }

  return ret;
 80026ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3730      	adds	r7, #48	; 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <flashWrite>:


bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
   bool ret = true;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]

   HAL_StatusTypeDef status;

   HAL_FLASH_Unlock();
 8002708:	f004 fcb4 	bl	8007074 <HAL_FLASH_Unlock>

   for(int i = 0 ; i < length ; i++ )
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	e019      	b.n	8002746 <flashWrite+0x4e>
   {
     uint32_t  data;
     data  = p_data[i + 0] << 0 ;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	4413      	add	r3, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr+i, (uint64_t) data);
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	18d1      	adds	r1, r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	461a      	mov	r2, r3
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	2000      	movs	r0, #0
 800272c:	f004 fc4e 	bl	8006fcc <HAL_FLASH_Program>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

      if(status != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <flashWrite+0x48>
      {
        ret = false;
 800273a:	2300      	movs	r3, #0
 800273c:	77fb      	strb	r3, [r7, #31]
        break;
 800273e:	e006      	b.n	800274e <flashWrite+0x56>
   for(int i = 0 ; i < length ; i++ )
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	3301      	adds	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d8e1      	bhi.n	8002712 <flashWrite+0x1a>

      }
   }

   HAL_FLASH_Lock();
 800274e:	f004 fcb3 	bl	80070b8 <HAL_FLASH_Lock>

   return ret;
 8002752:	7ffb      	ldrb	r3, [r7, #31]

}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num ,uint32_t addr, uint32_t length)
{
 800275c:	b480      	push	{r7}
 800275e:	b08b      	sub	sp, #44	; 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr; // load addr // save at flashinit //
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <flashInSector+0xac>)
 8002774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002778:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <flashInSector+0xac>)
 800277e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	4920      	ldr	r1, [pc, #128]	; (8002808 <flashInSector+0xac>)
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4413      	add	r3, r2
 800278e:	3b01      	subs	r3, #1
 8002790:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;              // 지우고자 하는 시작주소
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1; // 지우고자 하는 메모리 크기
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	3b01      	subs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d306      	bcc.n	80027b6 <flashInSector+0x5a>
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d802      	bhi.n	80027b6 <flashInSector+0x5a>
  {
    ret = true;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //cliPrintf("sector_start 01x%d : \n", ret);

  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d306      	bcc.n	80027cc <flashInSector+0x70>
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d802      	bhi.n	80027cc <flashInSector+0x70>
  {
    ret = true;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //cliPrintf("sector_start 02x%d : \n", ret);
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d306      	bcc.n	80027e2 <flashInSector+0x86>
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d802      	bhi.n	80027e2 <flashInSector+0x86>
  {
    ret = true;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //cliPrintf("sector_start 03x%d : \n", ret);
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d306      	bcc.n	80027f8 <flashInSector+0x9c>
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d802      	bhi.n	80027f8 <flashInSector+0x9c>
  {
    ret = true;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //cliPrintf("sector_start 04x%d : \n", ret);
  }


  return ret;
 80027f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	372c      	adds	r7, #44	; 0x2c
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000014 	.word	0x20000014

0800280c <cliFlash>:

#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

	bool ret = false;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if(args->argc == 1 && args->isStr(0, "info") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d120      	bne.n	8002864 <cliFlash+0x58>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	497f      	ldr	r1, [pc, #508]	; (8002a24 <cliFlash+0x218>)
 8002828:	2000      	movs	r0, #0
 800282a:	4798      	blx	r3
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d018      	beq.n	8002864 <cliFlash+0x58>
		{
				for( int i = 0 ; i < FLASH_SECTOR_MAX ; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	e00f      	b.n	8002858 <cliFlash+0x4c>
				{
					cliPrintf("0x%X : %d KB\n", flash_tbl[i].addr ,flash_tbl[i].length);
 8002838:	4a7b      	ldr	r2, [pc, #492]	; (8002a28 <cliFlash+0x21c>)
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002840:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <cliFlash+0x21c>)
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	4877      	ldr	r0, [pc, #476]	; (8002a2c <cliFlash+0x220>)
 800284e:	f7ff fca9 	bl	80021a4 <cliPrintf>
				for( int i = 0 ; i < FLASH_SECTOR_MAX ; i++)
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	3301      	adds	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2b03      	cmp	r3, #3
 800285c:	ddec      	ble.n	8002838 <cliFlash+0x2c>
				}

				ret = true;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

    if(args->argc == 3 && args->isStr(0, "read") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d141      	bne.n	80028f0 <cliFlash+0xe4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	496f      	ldr	r1, [pc, #444]	; (8002a30 <cliFlash+0x224>)
 8002872:	2000      	movs	r0, #0
 8002874:	4798      	blx	r3
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d039      	beq.n	80028f0 <cliFlash+0xe4>
		{

				uint32_t addr;
				uint32_t length;

				addr   = (uint32_t)args->getData(1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2001      	movs	r0, #1
 8002882:	4798      	blx	r3
 8002884:	4603      	mov	r3, r0
 8002886:	623b      	str	r3, [r7, #32]
				length = (uint32_t)args->getData(2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2002      	movs	r0, #2
 800288e:	4798      	blx	r3
 8002890:	4603      	mov	r3, r0
 8002892:	61fb      	str	r3, [r7, #28]

				if ((addr >= 0x08080001) || (addr < 0x08000000))
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	4a67      	ldr	r2, [pc, #412]	; (8002a34 <cliFlash+0x228>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d803      	bhi.n	80028a4 <cliFlash+0x98>
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a2:	d206      	bcs.n	80028b2 <cliFlash+0xa6>
				{

					cliPrintf("<< flash addr ERR >> \n");
 80028a4:	4864      	ldr	r0, [pc, #400]	; (8002a38 <cliFlash+0x22c>)
 80028a6:	f7ff fc7d 	bl	80021a4 <cliPrintf>
					ret = false;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80028b0:	e01e      	b.n	80028f0 <cliFlash+0xe4>

				}
				else
				{

					 for (int i =0; i < length ; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e00d      	b.n	80028d4 <cliFlash+0xc8>
					 {
						 cliPrintf("0x%X : 0x%X \n", addr+i ,  *((uint8_t *)addr+i));
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	18d1      	adds	r1, r2, r3
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	4413      	add	r3, r2
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	485c      	ldr	r0, [pc, #368]	; (8002a3c <cliFlash+0x230>)
 80028ca:	f7ff fc6b 	bl	80021a4 <cliPrintf>
					 for (int i =0; i < length ; i++)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8ed      	bhi.n	80028b8 <cliFlash+0xac>
					 }

					 ret = true;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					 if( ret == true)
 80028e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <cliFlash+0xe4>
					 {
						 cliPrintf("flash read OK\n");
 80028ea:	4855      	ldr	r0, [pc, #340]	; (8002a40 <cliFlash+0x234>)
 80028ec:	f7ff fc5a 	bl	80021a4 <cliPrintf>
					 }
				}
		}

    if(args->argc == 3 && args->isStr(0, "erase") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d130      	bne.n	800295a <cliFlash+0x14e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4951      	ldr	r1, [pc, #324]	; (8002a44 <cliFlash+0x238>)
 80028fe:	2000      	movs	r0, #0
 8002900:	4798      	blx	r3
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d028      	beq.n	800295a <cliFlash+0x14e>
		{
					uint32_t addr;
					uint32_t length;

					addr   = (uint32_t) args->getData(1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2001      	movs	r0, #1
 800290e:	4798      	blx	r3
 8002910:	4603      	mov	r3, r0
 8002912:	61bb      	str	r3, [r7, #24]
					length = (uint32_t) args->getData(2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2002      	movs	r0, #2
 800291a:	4798      	blx	r3
 800291c:	4603      	mov	r3, r0
 800291e:	617b      	str	r3, [r7, #20]

					if ((addr >= 0x08080001) || (addr < 0x08000000))
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4a44      	ldr	r2, [pc, #272]	; (8002a34 <cliFlash+0x228>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d803      	bhi.n	8002930 <cliFlash+0x124>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292e:	d206      	bcs.n	800293e <cliFlash+0x132>
					{

						cliPrintf("<< flash addr ERR >> \n");
 8002930:	4841      	ldr	r0, [pc, #260]	; (8002a38 <cliFlash+0x22c>)
 8002932:	f7ff fc37 	bl	80021a4 <cliPrintf>
						ret = false;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800293c:	e00d      	b.n	800295a <cliFlash+0x14e>

					}
					else
					{
							 ret = flashErase(addr, length);
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	69b8      	ldr	r0, [r7, #24]
 8002942:	f7ff fe7f 	bl	8002644 <flashErase>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

							if( ret == true)
 800294c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <cliFlash+0x14e>
							{
								cliPrintf("flash erase OK\n");
 8002954:	483c      	ldr	r0, [pc, #240]	; (8002a48 <cliFlash+0x23c>)
 8002956:	f7ff fc25 	bl	80021a4 <cliPrintf>
							}
					}

		}

    if((args->argc == 4 && args->isStr(0, "write") && args->getData(3) <= 4) == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d110      	bne.n	8002984 <cliFlash+0x178>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4939      	ldr	r1, [pc, #228]	; (8002a4c <cliFlash+0x240>)
 8002968:	2000      	movs	r0, #0
 800296a:	4798      	blx	r3
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <cliFlash+0x178>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2003      	movs	r0, #3
 8002978:	4798      	blx	r3
 800297a:	4603      	mov	r3, r0
 800297c:	2b04      	cmp	r3, #4
 800297e:	dc01      	bgt.n	8002984 <cliFlash+0x178>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <cliFlash+0x17a>
 8002984:	2300      	movs	r3, #0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d134      	bne.n	80029f4 <cliFlash+0x1e8>
        uint32_t addr;
        uint32_t data;
        uint32_t length;  //4바이트면 32비트 데이터 오버됨//


        addr    = (uint32_t) args->getData(1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2001      	movs	r0, #1
 8002990:	4798      	blx	r3
 8002992:	4603      	mov	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
        data    = (uint32_t) args->getData(2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2002      	movs	r0, #2
 800299c:	4798      	blx	r3
 800299e:	4603      	mov	r3, r0
 80029a0:	60bb      	str	r3, [r7, #8]
        length  = (uint32_t) args->getData(3);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2003      	movs	r0, #3
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]


        if ((addr >= 0x08080001) || (addr < 0x08000000))
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <cliFlash+0x228>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d803      	bhi.n	80029be <cliFlash+0x1b2>
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029bc:	d206      	bcs.n	80029cc <cliFlash+0x1c0>
        {
             cliPrintf("<< flash addr ERR >> \n");
 80029be:	481e      	ldr	r0, [pc, #120]	; (8002a38 <cliFlash+0x22c>)
 80029c0:	f7ff fbf0 	bl	80021a4 <cliPrintf>
             ret = false;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80029ca:	e013      	b.n	80029f4 <cliFlash+0x1e8>
        }
        else
        {
            if( flashWrite(addr, (uint8_t *)&data, length) == true )
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4619      	mov	r1, r3
 80029d4:	6938      	ldr	r0, [r7, #16]
 80029d6:	f7ff fe8f 	bl	80026f8 <flashWrite>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <cliFlash+0x1e2>
            {
              cliPrintf("flash write OK\n");
 80029e0:	481b      	ldr	r0, [pc, #108]	; (8002a50 <cliFlash+0x244>)
 80029e2:	f7ff fbdf 	bl	80021a4 <cliPrintf>
              ret = true;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80029ec:	e002      	b.n	80029f4 <cliFlash+0x1e8>
            }
            else
            {
              cliPrintf("flash write fail\n");
 80029ee:	4819      	ldr	r0, [pc, #100]	; (8002a54 <cliFlash+0x248>)
 80029f0:	f7ff fbd8 	bl	80021a4 <cliPrintf>
            }
        }

    }

		if(ret != true)
 80029f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <cliFlash+0x20e>
		{
			cliPrintf("flash info\n");
 8002a02:	4815      	ldr	r0, [pc, #84]	; (8002a58 <cliFlash+0x24c>)
 8002a04:	f7ff fbce 	bl	80021a4 <cliPrintf>
			cliPrintf("flash read  addr length\n");
 8002a08:	4814      	ldr	r0, [pc, #80]	; (8002a5c <cliFlash+0x250>)
 8002a0a:	f7ff fbcb 	bl	80021a4 <cliPrintf>
			cliPrintf("flash erase addr length\n");
 8002a0e:	4814      	ldr	r0, [pc, #80]	; (8002a60 <cliFlash+0x254>)
 8002a10:	f7ff fbc8 	bl	80021a4 <cliPrintf>
			cliPrintf("flash write addr data length<=4\n");
 8002a14:	4813      	ldr	r0, [pc, #76]	; (8002a64 <cliFlash+0x258>)
 8002a16:	f7ff fbc5 	bl	80021a4 <cliPrintf>

		}

}
 8002a1a:	bf00      	nop
 8002a1c:	3730      	adds	r7, #48	; 0x30
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	0800f684 	.word	0x0800f684
 8002a28:	20000014 	.word	0x20000014
 8002a2c:	0800f68c 	.word	0x0800f68c
 8002a30:	0800f69c 	.word	0x0800f69c
 8002a34:	08080000 	.word	0x08080000
 8002a38:	0800f6a4 	.word	0x0800f6a4
 8002a3c:	0800f6bc 	.word	0x0800f6bc
 8002a40:	0800f6cc 	.word	0x0800f6cc
 8002a44:	0800f6dc 	.word	0x0800f6dc
 8002a48:	0800f6e4 	.word	0x0800f6e4
 8002a4c:	0800f6f4 	.word	0x0800f6f4
 8002a50:	0800f6fc 	.word	0x0800f6fc
 8002a54:	0800f70c 	.word	0x0800f70c
 8002a58:	0800f720 	.word	0x0800f720
 8002a5c:	0800f72c 	.word	0x0800f72c
 8002a60:	0800f748 	.word	0x0800f748
 8002a64:	0800f764 	.word	0x0800f764

08002a68 <gpioInit>:
		//{GPIOC , GPIO_PIN_9, _DEF_OUTPUT ,GPIO_PIN_SET, GPIO_PIN_RESET, _DEF_HIGH }   // Wiz5500 CH0 CS

};

bool gpioInit(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
	bool ret = true;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	72fb      	strb	r3, [r7, #11]

	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <gpioInit+0x84>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <gpioInit+0x84>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <gpioInit+0x84>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]

	for (int i = 0 ; i < GPIO_MAX_CH ; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e01e      	b.n	8002ad2 <gpioInit+0x6a>
	{
		gpioPinMode (i , gpio_tbl[i].mode);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	4915      	ldr	r1, [pc, #84]	; (8002af0 <gpioInit+0x88>)
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f000 f826 	bl	8002afc <gpioPinMode>
		gpioPinWrite(i , gpio_tbl[i].init_value);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	b2d8      	uxtb	r0, r3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <gpioInit+0x88>)
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	330b      	adds	r3, #11
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f000 f87a 	bl	8002bc0 <gpioPinWrite>
	for (int i = 0 ; i < GPIO_MAX_CH ; i++)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	dddd      	ble.n	8002a94 <gpioInit+0x2c>
	}

	#ifdef _USE_HW_CLI

		cliAdd("gpio",cliGpio);
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <gpioInit+0x8c>)
 8002ada:	4807      	ldr	r0, [pc, #28]	; (8002af8 <gpioInit+0x90>)
 8002adc:	f7ff fc72 	bl	80023c4 <cliAdd>

	#endif

	return ret;
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	20000034 	.word	0x20000034
 8002af4:	08002cd5 	.word	0x08002cd5
 8002af8:	0800f788 	.word	0x0800f788

08002afc <gpioPinMode>:

bool gpioPinMode (uint8_t ch, uint8_t mode)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	460a      	mov	r2, r1
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]

	  switch(mode)
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d82c      	bhi.n	8002b80 <gpioPinMode+0x84>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <gpioPinMode+0x30>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b45 	.word	0x08002b45
 8002b30:	08002b4f 	.word	0x08002b4f
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b63 	.word	0x08002b63
 8002b3c:	08002b6d 	.word	0x08002b6d
 8002b40:	08002b77 	.word	0x08002b77
	  {
	  	  case _DEF_INPUT :
	  		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b4c:	e018      	b.n	8002b80 <gpioPinMode+0x84>

	  	  case _DEF_INPUT_PULLUP :
	  		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b56:	e013      	b.n	8002b80 <gpioPinMode+0x84>

	  	  case _DEF_INPUT_PULLDOWN :
	  		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b60:	e00e      	b.n	8002b80 <gpioPinMode+0x84>

	  	  case _DEF_OUTPUT :
	  		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b6a:	e009      	b.n	8002b80 <gpioPinMode+0x84>

	  	  case _DEF_OUTPUT_PULLUP :
	  		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b74:	e004      	b.n	8002b80 <gpioPinMode+0x84>

	  	  case _DEF_OUTPUT_PULLDOWN :
	  		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b76:	2301      	movs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
	  	  break;
 8002b7e:	bf00      	nop

	  }

	  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	490e      	ldr	r1, [pc, #56]	; (8002bbc <gpioPinMode+0xc0>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	4909      	ldr	r1, [pc, #36]	; (8002bbc <gpioPinMode+0xc0>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f107 0208 	add.w	r2, r7, #8
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fcf6 	bl	800759c <HAL_GPIO_Init>


	return ret;
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000034 	.word	0x20000034

08002bc0 <gpioPinWrite>:

void gpioPinWrite (uint8_t ch, bool value)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71bb      	strb	r3, [r7, #6]
	if( ch > GPIO_MAX_CH)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d840      	bhi.n	8002c58 <gpioPinWrite+0x98>
	{
		return ;
	}

	if(value == true)
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01e      	beq.n	8002c1a <gpioPinWrite+0x5a>
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin,  gpio_tbl[ch].on_state);
 8002bdc:	79fa      	ldrb	r2, [r7, #7]
 8002bde:	4920      	ldr	r1, [pc, #128]	; (8002c60 <gpioPinWrite+0xa0>)
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	491c      	ldr	r1, [pc, #112]	; (8002c60 <gpioPinWrite+0xa0>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b299      	uxth	r1, r3
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	4c17      	ldr	r4, [pc, #92]	; (8002c60 <gpioPinWrite+0xa0>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4423      	add	r3, r4
 8002c0e:	3309      	adds	r3, #9
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f004 ff42 	bl	8007a9c <HAL_GPIO_WritePin>
 8002c18:	e01f      	b.n	8002c5a <gpioPinWrite+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin,  gpio_tbl[ch].off_state);
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	4910      	ldr	r1, [pc, #64]	; (8002c60 <gpioPinWrite+0xa0>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <gpioPinWrite+0xa0>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b299      	uxth	r1, r3
 8002c3e:	79fa      	ldrb	r2, [r7, #7]
 8002c40:	4c07      	ldr	r4, [pc, #28]	; (8002c60 <gpioPinWrite+0xa0>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4423      	add	r3, r4
 8002c4c:	330a      	adds	r3, #10
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f004 ff23 	bl	8007a9c <HAL_GPIO_WritePin>
 8002c56:	e000      	b.n	8002c5a <gpioPinWrite+0x9a>
		return ;
 8002c58:	bf00      	nop
	}
}
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	20000034 	.word	0x20000034

08002c64 <gpioPinRead>:

bool gpioPinRead (uint8_t ch)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
	if( ch > GPIO_MAX_CH)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d901      	bls.n	8002c7c <gpioPinRead+0x18>
	{
		return false ;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e024      	b.n	8002cc6 <gpioPinRead+0x62>
	}

	if ( HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002c7c:	79fa      	ldrb	r2, [r7, #7]
 8002c7e:	4914      	ldr	r1, [pc, #80]	; (8002cd0 <gpioPinRead+0x6c>)
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	79fa      	ldrb	r2, [r7, #7]
 8002c8e:	4910      	ldr	r1, [pc, #64]	; (8002cd0 <gpioPinRead+0x6c>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f004 fee3 	bl	8007a6c <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <gpioPinRead+0x6c>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3309      	adds	r3, #9
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d101      	bne.n	8002cc4 <gpioPinRead+0x60>
	{
		ret = true;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000034 	.word	0x20000034

08002cd4 <cliGpio>:
#ifdef _USE_HW_CLI



static void cliGpio(cli_args_t *args)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  bool ret = false;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 1 && args->isStr(0, "show") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d128      	bne.n	8002d3a <cliGpio+0x66>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4955      	ldr	r1, [pc, #340]	; (8002e44 <cliGpio+0x170>)
 8002cee:	2000      	movs	r0, #0
 8002cf0:	4798      	blx	r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <cliGpio+0x66>
  {

    while(cliKeepLoop()) // 다음 통신 오기전까지 일시적으로만 도는 루프//
 8002cf8:	e018      	b.n	8002d2c <cliGpio+0x58>
    {
    	for(int i =0 ; i < GPIO_MAX_CH ; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e00c      	b.n	8002d1a <cliGpio+0x46>
    	{
    		cliPrintf("%d", gpioPinRead(i));
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ffad 	bl	8002c64 <gpioPinRead>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	484e      	ldr	r0, [pc, #312]	; (8002e48 <cliGpio+0x174>)
 8002d10:	f7ff fa48 	bl	80021a4 <cliPrintf>
    	for(int i =0 ; i < GPIO_MAX_CH ; i++)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3301      	adds	r3, #1
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	ddef      	ble.n	8002d00 <cliGpio+0x2c>
    	}
    	cliPrintf("\n");
 8002d20:	484a      	ldr	r0, [pc, #296]	; (8002e4c <cliGpio+0x178>)
 8002d22:	f7ff fa3f 	bl	80021a4 <cliPrintf>
    	delay(100);
 8002d26:	2064      	movs	r0, #100	; 0x64
 8002d28:	f7fe f9ae 	bl	8001088 <delay>
    while(cliKeepLoop()) // 다음 통신 오기전까지 일시적으로만 도는 루프//
 8002d2c:	f7ff fb34 	bl	8002398 <cliKeepLoop>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e1      	bne.n	8002cfa <cliGpio+0x26>
    }

    ret = true;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]

  }

  if(args->argc == 2 && args->isStr(0, "read") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d123      	bne.n	8002d8a <cliGpio+0xb6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4942      	ldr	r1, [pc, #264]	; (8002e50 <cliGpio+0x17c>)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	4798      	blx	r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01b      	beq.n	8002d8a <cliGpio+0xb6>
  {
	  uint8_t ch;

	  ch = (uint8_t) args->getData(1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2001      	movs	r0, #1
 8002d58:	4798      	blx	r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	72fb      	strb	r3, [r7, #11]

    while(cliKeepLoop()) // 다음 통신 오기전까지 일시적으로만 도는 루프//
 8002d5e:	e00d      	b.n	8002d7c <cliGpio+0xa8>
    {
    	cliPrintf("gpio read %d : %d \n", ch, gpioPinRead(ch));
 8002d60:	7afc      	ldrb	r4, [r7, #11]
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff7d 	bl	8002c64 <gpioPinRead>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4621      	mov	r1, r4
 8002d70:	4838      	ldr	r0, [pc, #224]	; (8002e54 <cliGpio+0x180>)
 8002d72:	f7ff fa17 	bl	80021a4 <cliPrintf>
    	delay(100);
 8002d76:	2064      	movs	r0, #100	; 0x64
 8002d78:	f7fe f986 	bl	8001088 <delay>
    while(cliKeepLoop()) // 다음 통신 오기전까지 일시적으로만 도는 루프//
 8002d7c:	f7ff fb0c 	bl	8002398 <cliKeepLoop>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ec      	bne.n	8002d60 <cliGpio+0x8c>
    }

    ret = true;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]

  }

  if(args->argc == 3 && args->isStr(0, "write") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d126      	bne.n	8002de0 <cliGpio+0x10c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4930      	ldr	r1, [pc, #192]	; (8002e58 <cliGpio+0x184>)
 8002d98:	2000      	movs	r0, #0
 8002d9a:	4798      	blx	r3
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01e      	beq.n	8002de0 <cliGpio+0x10c>
  {

	  uint8_t ch , value;

	  ch 	= (uint8_t) args->getData(1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2001      	movs	r0, #1
 8002da8:	4798      	blx	r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	72bb      	strb	r3, [r7, #10]
	  value = (uint8_t) args->getData(2);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2002      	movs	r0, #2
 8002db4:	4798      	blx	r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	727b      	strb	r3, [r7, #9]
	  gpioPinWrite(ch, value);
 8002dba:	7a7b      	ldrb	r3, [r7, #9]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	7abb      	ldrb	r3, [r7, #10]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fef8 	bl	8002bc0 <gpioPinWrite>
	  cliPrintf("gpio write %d : %d \n", ch, value );
 8002dd0:	7abb      	ldrb	r3, [r7, #10]
 8002dd2:	7a7a      	ldrb	r2, [r7, #9]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4821      	ldr	r0, [pc, #132]	; (8002e5c <cliGpio+0x188>)
 8002dd8:	f7ff f9e4 	bl	80021a4 <cliPrintf>

    ret = true;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]

  }

  if(ret != true )
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	f083 0301 	eor.w	r3, r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d027      	beq.n	8002e3c <cliGpio+0x168>
  {
	for (int i = 0 ; i < GPIO_MAX_CH ; i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e016      	b.n	8002e20 <cliGpio+0x14c>
	{
		if(gpio_tbl[i].mode >= 3)
 8002df2:	491b      	ldr	r1, [pc, #108]	; (8002e60 <cliGpio+0x18c>)
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3308      	adds	r3, #8
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d904      	bls.n	8002e12 <cliGpio+0x13e>
		{
			 cliPrintf("== gpio %d Write Mode == \n", i);// for check Mode//
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	4816      	ldr	r0, [pc, #88]	; (8002e64 <cliGpio+0x190>)
 8002e0c:	f7ff f9ca 	bl	80021a4 <cliPrintf>
 8002e10:	e003      	b.n	8002e1a <cliGpio+0x146>
		}
		else
		{
			cliPrintf("== gpio %d Read Mode == \n", i);
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4814      	ldr	r0, [pc, #80]	; (8002e68 <cliGpio+0x194>)
 8002e16:	f7ff f9c5 	bl	80021a4 <cliPrintf>
	for (int i = 0 ; i < GPIO_MAX_CH ; i++)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	dde5      	ble.n	8002df2 <cliGpio+0x11e>
		}
	}

    cliPrintf("gpio show\n");
 8002e26:	4811      	ldr	r0, [pc, #68]	; (8002e6c <cliGpio+0x198>)
 8002e28:	f7ff f9bc 	bl	80021a4 <cliPrintf>
    cliPrintf("gpio read ch [0~%d]\n", GPIO_MAX_CH -1);
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	4810      	ldr	r0, [pc, #64]	; (8002e70 <cliGpio+0x19c>)
 8002e30:	f7ff f9b8 	bl	80021a4 <cliPrintf>
    cliPrintf("gpio write ch [0~%d] 0:1 \n", GPIO_MAX_CH -1);
 8002e34:	2103      	movs	r1, #3
 8002e36:	480f      	ldr	r0, [pc, #60]	; (8002e74 <cliGpio+0x1a0>)
 8002e38:	f7ff f9b4 	bl	80021a4 <cliPrintf>
  }



}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}
 8002e44:	0800f790 	.word	0x0800f790
 8002e48:	0800f798 	.word	0x0800f798
 8002e4c:	0800f79c 	.word	0x0800f79c
 8002e50:	0800f7a0 	.word	0x0800f7a0
 8002e54:	0800f7a8 	.word	0x0800f7a8
 8002e58:	0800f7bc 	.word	0x0800f7bc
 8002e5c:	0800f7c4 	.word	0x0800f7c4
 8002e60:	20000034 	.word	0x20000034
 8002e64:	0800f7dc 	.word	0x0800f7dc
 8002e68:	0800f7f8 	.word	0x0800f7f8
 8002e6c:	0800f814 	.word	0x0800f814
 8002e70:	0800f820 	.word	0x0800f820
 8002e74:	0800f838 	.word	0x0800f838

08002e78 <ledInit>:

#include"led.h"


bool ledInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0

  bool ret = true;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	77fb      	strb	r3, [r7, #31]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <ledInit+0x6c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <ledInit+0x6c>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <ledInit+0x6c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <ledInit+0x70>)
 8002eb6:	f004 fdf1 	bl	8007a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <ledInit+0x70>)
 8002ed4:	f004 fb62 	bl	800759c <HAL_GPIO_Init>

  return ret;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020800 	.word	0x40020800

08002eec <logInit>:




bool logInit(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0

  log_buf_boot.line_index     = 0;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <logInit+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <logInit+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <logInit+0x58>)
 8002efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f02:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <logInit+0x58>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <logInit+0x58>)
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <logInit+0x5c>)
 8002f0e:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <logInit+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <logInit+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <logInit+0x60>)
 8002f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f22:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <logInit+0x60>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <logInit+0x60>)
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <logInit+0x64>)
 8002f2e:	609a      	str	r2, [r3, #8]


  is_init = true;
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <logInit+0x68>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <logInit+0x6c>)
 8002f38:	4808      	ldr	r0, [pc, #32]	; (8002f5c <logInit+0x70>)
 8002f3a:	f7ff fa43 	bl	80023c4 <cliAdd>
#endif

  return true;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	2000198c 	.word	0x2000198c
 8002f48:	200003e4 	.word	0x200003e4
 8002f4c:	20001998 	.word	0x20001998
 8002f50:	200007e4 	.word	0x200007e4
 8002f54:	20000fe4 	.word	0x20000fe4
 8002f58:	080030c9 	.word	0x080030c9
 8002f5c:	0800f854 	.word	0x0800f854

08002f60 <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <logBoot+0x28>)
 8002f78:	701a      	strb	r2, [r3, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000064 	.word	0x20000064

08002f8c <logBufPrintf>:
  is_open  = true;
  return uartOpen(ch, baud);
}

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 6;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	88db      	ldrh	r3, [r3, #6]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3306      	adds	r3, #6
 8002fa4:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	889b      	ldrh	r3, [r3, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d902      	bls.n	8002fb8 <logBufPrintf+0x2c>
  {
    p_log->buf_index = 0;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	80da      	strh	r2, [r3, #6]
  }

  p_buf = &p_log->buf[p_log->buf_index];// set pointer add //
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	88d2      	ldrh	r2, [r2, #6]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

  // +6 mean  %04x = 0001,0002 4Byte , /t(tap) 1Byte , /n 1Byte Total 6Byte add //
  buf_len = snprintf((char *)p_buf, length + 6, "%04X\t%s", p_log->line_index, p_data);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1d99      	adds	r1, r3, #6
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <logBufPrintf+0x9c>)
 8002fd6:	69b8      	ldr	r0, [r7, #24]
 8002fd8:	f009 f9aa 	bl	800c330 <sniprintf>
 8002fdc:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	88da      	ldrh	r2, [r3, #6]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	885b      	ldrh	r3, [r3, #2]
 8002ffe:	461a      	mov	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4413      	add	r3, r2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	8892      	ldrh	r2, [r2, #4]
 8003008:	4293      	cmp	r3, r2
 800300a:	dc07      	bgt.n	800301c <logBufPrintf+0x90>
  {
    p_log->buf_length += buf_len;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	885a      	ldrh	r2, [r3, #2]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4413      	add	r3, r2
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	805a      	strh	r2, [r3, #2]
  }

  return true;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	0800f858 	.word	0x0800f858

0800302c <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800302c:	b40f      	push	{r0, r1, r2, r3}
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
  va_list args;
  int len;

  if (is_init != true) return;
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <logPrintf+0x7c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12a      	bne.n	8003098 <logPrintf+0x6c>


  va_start(args, fmt);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003050:	4816      	ldr	r0, [pc, #88]	; (80030ac <logPrintf+0x80>)
 8003052:	f00a f907 	bl	800d264 <vsniprintf>
 8003056:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <logPrintf+0x84>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <logPrintf+0x4a>
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <logPrintf+0x88>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len); // 나중에 다른 통신 채널로 확인하고자 할때//
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <logPrintf+0x8c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	490f      	ldr	r1, [pc, #60]	; (80030ac <logPrintf+0x80>)
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fbfd 	bl	8003870 <uartWrite>
  }

  if (is_boot_log)
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <logPrintf+0x90>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len); // for Write to logBuf(&node)// USE Only before Main()
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	461a      	mov	r2, r3
 8003082:	490a      	ldr	r1, [pc, #40]	; (80030ac <logPrintf+0x80>)
 8003084:	480e      	ldr	r0, [pc, #56]	; (80030c0 <logPrintf+0x94>)
 8003086:	f7ff ff81 	bl	8002f8c <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len); 	 // for Write to logBuf(&node)// any time use //
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	461a      	mov	r2, r3
 800308e:	4907      	ldr	r1, [pc, #28]	; (80030ac <logPrintf+0x80>)
 8003090:	480c      	ldr	r0, [pc, #48]	; (80030c4 <logPrintf+0x98>)
 8003092:	f7ff ff7b 	bl	8002f8c <logBufPrintf>
 8003096:	e000      	b.n	800309a <logPrintf+0x6e>
  if (is_init != true) return;
 8003098:	bf00      	nop

  va_end(args);

}
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030a2:	b004      	add	sp, #16
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000fe4 	.word	0x20000fe4
 80030ac:	20000fe8 	.word	0x20000fe8
 80030b0:	20000fe5 	.word	0x20000fe5
 80030b4:	20000065 	.word	0x20000065
 80030b8:	20000fe6 	.word	0x20000fe6
 80030bc:	20000064 	.word	0x20000064
 80030c0:	2000198c 	.word	0x2000198c
 80030c4:	20001998 	.word	0x20001998

080030c8 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d124      	bne.n	8003126 <cliCmd+0x5e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	494c      	ldr	r1, [pc, #304]	; (8003214 <cliCmd+0x14c>)
 80030e2:	2000      	movs	r0, #0
 80030e4:	4798      	blx	r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01c      	beq.n	8003126 <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <cliCmd+0x150>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	484a      	ldr	r0, [pc, #296]	; (800321c <cliCmd+0x154>)
 80030f4:	f7ff f856 	bl	80021a4 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <cliCmd+0x150>)
 80030fa:	885b      	ldrh	r3, [r3, #2]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4848      	ldr	r0, [pc, #288]	; (8003220 <cliCmd+0x158>)
 8003100:	f7ff f850 	bl	80021a4 <cliPrintf>
    cliPrintf("\n");
 8003104:	4847      	ldr	r0, [pc, #284]	; (8003224 <cliCmd+0x15c>)
 8003106:	f7ff f84d 	bl	80021a4 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <cliCmd+0x160>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4846      	ldr	r0, [pc, #280]	; (800322c <cliCmd+0x164>)
 8003112:	f7ff f847 	bl	80021a4 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <cliCmd+0x160>)
 8003118:	885b      	ldrh	r3, [r3, #2]
 800311a:	4619      	mov	r1, r3
 800311c:	4844      	ldr	r0, [pc, #272]	; (8003230 <cliCmd+0x168>)
 800311e:	f7ff f841 	bl	80021a4 <cliPrintf>

    ret = true;
 8003122:	2301      	movs	r3, #1
 8003124:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d12d      	bne.n	800318a <cliCmd+0xc2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4940      	ldr	r1, [pc, #256]	; (8003234 <cliCmd+0x16c>)
 8003134:	2000      	movs	r0, #0
 8003136:	4798      	blx	r3
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d025      	beq.n	800318a <cliCmd+0xc2>
  {
    uint32_t index = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 8003142:	e019      	b.n	8003178 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <cliCmd+0x150>)
 8003146:	885b      	ldrh	r3, [r3, #2]
 8003148:	461a      	mov	r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d901      	bls.n	8003160 <cliCmd+0x98>
      {
        buf_len = 64;
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	617b      	str	r3, [r7, #20]
      }

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <cliCmd+0x150>)
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	6979      	ldr	r1, [r7, #20]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc16 	bl	800199c <cliWrite>
      index += buf_len;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4413      	add	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 8003178:	f7ff f90e 	bl	8002398 <cliKeepLoop>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e0      	bne.n	8003144 <cliCmd+0x7c>
 8003182:	e000      	b.n	8003186 <cliCmd+0xbe>
        break;
 8003184:	bf00      	nop

    }
    ret = true;
 8003186:	2301      	movs	r3, #1
 8003188:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d12d      	bne.n	80031ee <cliCmd+0x126>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4928      	ldr	r1, [pc, #160]	; (8003238 <cliCmd+0x170>)
 8003198:	2000      	movs	r0, #0
 800319a:	4798      	blx	r3
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d025      	beq.n	80031ee <cliCmd+0x126>
  {
    uint32_t index = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 80031a6:	e019      	b.n	80031dc <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <cliCmd+0x160>)
 80031aa:	885b      	ldrh	r3, [r3, #2]
 80031ac:	461a      	mov	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d901      	bls.n	80031c4 <cliCmd+0xfc>
      {
        buf_len = 64;
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	60fb      	str	r3, [r7, #12]
      }

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <cliCmd+0x160>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fbe4 	bl	800199c <cliWrite>
      index += buf_len;
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 80031dc:	f7ff f8dc 	bl	8002398 <cliKeepLoop>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e0      	bne.n	80031a8 <cliCmd+0xe0>
 80031e6:	e000      	b.n	80031ea <cliCmd+0x122>
        break;
 80031e8:	bf00      	nop

    }
    ret = true;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 80031ee:	7ffb      	ldrb	r3, [r7, #31]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 80031fa:	4810      	ldr	r0, [pc, #64]	; (800323c <cliCmd+0x174>)
 80031fc:	f7fe ffd2 	bl	80021a4 <cliPrintf>
    cliPrintf("log boot\n");
 8003200:	480f      	ldr	r0, [pc, #60]	; (8003240 <cliCmd+0x178>)
 8003202:	f7fe ffcf 	bl	80021a4 <cliPrintf>
    cliPrintf("log list\n");
 8003206:	480f      	ldr	r0, [pc, #60]	; (8003244 <cliCmd+0x17c>)
 8003208:	f7fe ffcc 	bl	80021a4 <cliPrintf>
  }
}
 800320c:	bf00      	nop
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	0800f860 	.word	0x0800f860
 8003218:	2000198c 	.word	0x2000198c
 800321c:	0800f868 	.word	0x0800f868
 8003220:	0800f87c 	.word	0x0800f87c
 8003224:	0800f890 	.word	0x0800f890
 8003228:	20001998 	.word	0x20001998
 800322c:	0800f894 	.word	0x0800f894
 8003230:	0800f8a8 	.word	0x0800f8a8
 8003234:	0800f8bc 	.word	0x0800f8bc
 8003238:	0800f8c4 	.word	0x0800f8c4
 800323c:	0800f8cc 	.word	0x0800f8cc
 8003240:	0800f8d8 	.word	0x0800f8d8
 8003244:	0800f8e4 	.word	0x0800f8e4

08003248 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  bool  ret = true;
 800324e:	2301      	movs	r3, #1
 8003250:	71fb      	strb	r3, [r7, #7]

 //Reset 핀이 눌리면//
 if(RCC->CSR & (1<<26))
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <resetInit+0x50>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <resetInit+0x3c>
 {
   rtcbackupRegWrite(1, rtcbackupRegRead(1) + 1); // 1- 10번 주소에 Write 가능 //
 800325e:	2001      	movs	r0, #1
 8003260:	f000 f866 	bl	8003330 <rtcbackupRegRead>
 8003264:	4603      	mov	r3, r0
 8003266:	3301      	adds	r3, #1
 8003268:	4619      	mov	r1, r3
 800326a:	2001      	movs	r0, #1
 800326c:	f000 f850 	bl	8003310 <rtcbackupRegWrite>
   delay(500);
 8003270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003274:	f7fd ff08 	bl	8001088 <delay>
   reset_count = rtcbackupRegRead(1);
 8003278:	2001      	movs	r0, #1
 800327a:	f000 f859 	bl	8003330 <rtcbackupRegRead>
 800327e:	4603      	mov	r3, r0
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <resetInit+0x54>)
 8003282:	6013      	str	r3, [r2, #0]

 }

 rtcbackupRegWrite(1, 0);
 8003284:	2100      	movs	r1, #0
 8003286:	2001      	movs	r0, #1
 8003288:	f000 f842 	bl	8003310 <rtcbackupRegWrite>

 return ret;
 800328c:	79fb      	ldrb	r3, [r7, #7]

}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	200010e8 	.word	0x200010e8

080032a0 <resetGetCount>:

uint32_t resetGetCount(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return reset_count;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <resetGetCount+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	200010e8 	.word	0x200010e8

080032b8 <rtcInit>:
#include "rtc.h"

RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  bool ret = true;
 80032be:	2301      	movs	r3, #1
 80032c0:	71fb      	strb	r3, [r7, #7]

  hrtc.Instance					 		= RTC;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <rtcInit+0x50>)
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <rtcInit+0x54>)
 80032c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat 	 		= RTC_HOURFORMAT_24;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <rtcInit+0x50>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv 		= 127;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <rtcInit+0x50>)
 80032d0:	227f      	movs	r2, #127	; 0x7f
 80032d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv  		= 255;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <rtcInit+0x50>)
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut 			 		= RTC_OUTPUT_DISABLE;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <rtcInit+0x50>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <rtcInit+0x50>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType 			= RTC_OUTPUT_TYPE_OPENDRAIN;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <rtcInit+0x50>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032ec:	4806      	ldr	r0, [pc, #24]	; (8003308 <rtcInit+0x50>)
 80032ee:	f006 fabd 	bl	800986c <HAL_RTC_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <rtcInit+0x44>
  {
    Error_Handler();
 80032f8:	f7fd ff5a 	bl	80011b0 <Error_Handler>
  }

  return ret;
 80032fc:	79fb      	ldrb	r3, [r7, #7]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200019a4 	.word	0x200019a4
 800330c:	40002800 	.word	0x40002800

08003310 <rtcbackupRegWrite>:

void rtcbackupRegWrite(uint32_t index , uint32_t data)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <rtcbackupRegWrite+0x1c>)
 8003320:	f006 fb89 	bl	8009a36 <HAL_RTCEx_BKUPWrite>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200019a4 	.word	0x200019a4

08003330 <rtcbackupRegRead>:

uint32_t rtcbackupRegRead(uint32_t index)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4804      	ldr	r0, [pc, #16]	; (800334c <rtcbackupRegRead+0x1c>)
 800333c:	f006 fb95 	bl	8009a6a <HAL_RTCEx_BKUPRead>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200019a4 	.word	0x200019a4

08003350 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_RTC_MspInit+0x24>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d102      	bne.n	8003368 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RTC_MspInit+0x28>)
 8003364:	2201      	movs	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40002800 	.word	0x40002800
 8003378:	42470e3c 	.word	0x42470e3c

0800337c <uartInit>:
#endif



bool uartInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  for (int i =0; i < UART_MAX_CH; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	e036      	b.n	80033f6 <uartInit+0x7a>
  {
		uart_tbl[i].is_open 	  = false;
 8003388:	4921      	ldr	r1, [pc, #132]	; (8003410 <uartInit+0x94>)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
		uart_tbl[i].baud 			  = 57600;
 800339a:	491d      	ldr	r1, [pc, #116]	; (8003410 <uartInit+0x94>)
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	3304      	adds	r3, #4
 80033aa:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80033ae:	601a      	str	r2, [r3, #0]
		uart_tbl[i].is_tx_done 	= true;
 80033b0:	4917      	ldr	r1, [pc, #92]	; (8003410 <uartInit+0x94>)
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	3301      	adds	r3, #1
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
		uart_tbl[i].is_tx_error = false;
 80033c4:	4912      	ldr	r1, [pc, #72]	; (8003410 <uartInit+0x94>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3302      	adds	r3, #2
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
		uart_tbl[i].ch				  = i;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <uartInit+0x94>)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	3303      	adds	r3, #3
 80033ec:	4602      	mov	r2, r0
 80033ee:	701a      	strb	r2, [r3, #0]
  for (int i =0; i < UART_MAX_CH; i++)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3301      	adds	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	ddc5      	ble.n	8003388 <uartInit+0xc>
  }


	#ifdef _USE_HW_CLI

		cliAdd("uart",cliUart);
 80033fc:	4905      	ldr	r1, [pc, #20]	; (8003414 <uartInit+0x98>)
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <uartInit+0x9c>)
 8003400:	f7fe ffe0 	bl	80023c4 <cliAdd>

	#endif

  return true;
 8003404:	2301      	movs	r3, #1
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20001b2c 	.word	0x20001b2c
 8003414:	08003d9d 	.word	0x08003d9d
 8003418:	0800f8f0 	.word	0x0800f8f0

0800341c <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	71fb      	strb	r3, [r7, #7]

  bool ret = false;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]
  switch(ch)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b02      	cmp	r3, #2
 8003430:	f000 8097 	beq.w	8003562 <uartOpen+0x146>
 8003434:	2b02      	cmp	r3, #2
 8003436:	f300 819e 	bgt.w	8003776 <uartOpen+0x35a>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <uartOpen+0x28>
 800343e:	2b01      	cmp	r3, #1
 8003440:	d019      	beq.n	8003476 <uartOpen+0x5a>
 8003442:	e198      	b.n	8003776 <uartOpen+0x35a>
  {
    case _DEF_UART1:
			 uart_tbl[ch].is_open = true;
 8003444:	79fa      	ldrb	r2, [r7, #7]
 8003446:	4990      	ldr	r1, [pc, #576]	; (8003688 <uartOpen+0x26c>)
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
			 uart_tbl[ch].baud    = baud;
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	498b      	ldr	r1, [pc, #556]	; (8003688 <uartOpen+0x26c>)
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	3304      	adds	r3, #4
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	601a      	str	r2, [r3, #0]
			ret = true;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]

			logPrintf("uartOpen     \t\t: DEF_UART1\r\n");
 800346e:	4887      	ldr	r0, [pc, #540]	; (800368c <uartOpen+0x270>)
 8003470:	f7ff fddc 	bl	800302c <logPrintf>

	  break;
 8003474:	e17f      	b.n	8003776 <uartOpen+0x35a>

    case _DEF_UART2: // RTU //

    	uart_tbl[ch].p_huart 		 = &huart1;
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	4983      	ldr	r1, [pc, #524]	; (8003688 <uartOpen+0x26c>)
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	331c      	adds	r3, #28
 8003486:	4a82      	ldr	r2, [pc, #520]	; (8003690 <uartOpen+0x274>)
 8003488:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].is_open 		 = true;
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	497e      	ldr	r1, [pc, #504]	; (8003688 <uartOpen+0x26c>)
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]

			huart1.Instance 				 = USART1;
 800349c:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <uartOpen+0x274>)
 800349e:	4a7d      	ldr	r2, [pc, #500]	; (8003694 <uartOpen+0x278>)
 80034a0:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate	 	 = baud;
 80034a2:	4a7b      	ldr	r2, [pc, #492]	; (8003690 <uartOpen+0x274>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength 	 = UART_WORDLENGTH_8B;
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <uartOpen+0x274>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits 		 = UART_STOPBITS_1;
 80034ae:	4b78      	ldr	r3, [pc, #480]	; (8003690 <uartOpen+0x274>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity 			 = UART_PARITY_NONE;
 80034b4:	4b76      	ldr	r3, [pc, #472]	; (8003690 <uartOpen+0x274>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode 				 = UART_MODE_TX_RX;
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <uartOpen+0x274>)
 80034bc:	220c      	movs	r2, #12
 80034be:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE;
 80034c0:	4b73      	ldr	r3, [pc, #460]	; (8003690 <uartOpen+0x274>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <uartOpen+0x274>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]

  		_485_RX_ENB;
 80034cc:	2200      	movs	r2, #0
 80034ce:	2102      	movs	r1, #2
 80034d0:	4871      	ldr	r0, [pc, #452]	; (8003698 <uartOpen+0x27c>)
 80034d2:	f004 fae3 	bl	8007a9c <HAL_GPIO_WritePin>

  		__HAL_RCC_DMA2_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	4b70      	ldr	r3, [pc, #448]	; (800369c <uartOpen+0x280>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a6f      	ldr	r2, [pc, #444]	; (800369c <uartOpen+0x280>)
 80034e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <uartOpen+0x280>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]

      if (HAL_UART_Init(uart_tbl[ch].p_huart) != HAL_OK)
 80034f2:	79fa      	ldrb	r2, [r7, #7]
 80034f4:	4964      	ldr	r1, [pc, #400]	; (8003688 <uartOpen+0x26c>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	331c      	adds	r3, #28
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f006 fac8 	bl	8009a9a <HAL_UART_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <uartOpen+0xfa>
			{
      	ret = false;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
				 ret = true;

				 logPrintf("uartOpen     \t\t: DEF_UART2\r\n");

			}
		break;
 8003514:	e12f      	b.n	8003776 <uartOpen+0x35a>
				 __HAL_UART_ENABLE_IT(uart_tbl[ch].p_huart, UART_IT_RXNE); //UART RX INT Enable//
 8003516:	79fa      	ldrb	r2, [r7, #7]
 8003518:	495b      	ldr	r1, [pc, #364]	; (8003688 <uartOpen+0x26c>)
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	331c      	adds	r3, #28
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	4856      	ldr	r0, [pc, #344]	; (8003688 <uartOpen+0x26c>)
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4403      	add	r3, r0
 800353a:	331c      	adds	r3, #28
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f041 0220 	orr.w	r2, r1, #32
 8003544:	60da      	str	r2, [r3, #12]
			    HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2104      	movs	r1, #4
 800354a:	2046      	movs	r0, #70	; 0x46
 800354c:	f003 f909 	bl	8006762 <HAL_NVIC_SetPriority>
			    HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003550:	2046      	movs	r0, #70	; 0x46
 8003552:	f003 f922 	bl	800679a <HAL_NVIC_EnableIRQ>
				 ret = true;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
				 logPrintf("uartOpen     \t\t: DEF_UART2\r\n");
 800355a:	4851      	ldr	r0, [pc, #324]	; (80036a0 <uartOpen+0x284>)
 800355c:	f7ff fd66 	bl	800302c <logPrintf>
		break;
 8003560:	e109      	b.n	8003776 <uartOpen+0x35a>

    case _DEF_UART3:

    	ret = false;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

    	uart_tbl[ch].p_huart 			= &huart2;
 8003566:	79fa      	ldrb	r2, [r7, #7]
 8003568:	4947      	ldr	r1, [pc, #284]	; (8003688 <uartOpen+0x26c>)
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	440b      	add	r3, r1
 8003574:	331c      	adds	r3, #28
 8003576:	4a4b      	ldr	r2, [pc, #300]	; (80036a4 <uartOpen+0x288>)
 8003578:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_hdma_rx		= &hdma_usart2_rx;
 800357a:	79fa      	ldrb	r2, [r7, #7]
 800357c:	4942      	ldr	r1, [pc, #264]	; (8003688 <uartOpen+0x26c>)
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	3320      	adds	r3, #32
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <uartOpen+0x28c>)
 800358c:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_hdma_tx		= &hdma_usart2_tx;
 800358e:	79fa      	ldrb	r2, [r7, #7]
 8003590:	493d      	ldr	r1, [pc, #244]	; (8003688 <uartOpen+0x26c>)
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3324      	adds	r3, #36	; 0x24
 800359e:	4a43      	ldr	r2, [pc, #268]	; (80036ac <uartOpen+0x290>)
 80035a0:	601a      	str	r2, [r3, #0]

    	uart_tbl[ch].is_open 		 = true;
 80035a2:	79fa      	ldrb	r2, [r7, #7]
 80035a4:	4938      	ldr	r1, [pc, #224]	; (8003688 <uartOpen+0x26c>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]

      huart2.Instance					 = USART2;
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <uartOpen+0x288>)
 80035b6:	4a3e      	ldr	r2, [pc, #248]	; (80036b0 <uartOpen+0x294>)
 80035b8:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate 		 = baud;
 80035ba:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <uartOpen+0x288>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength 	 = UART_WORDLENGTH_8B;
 80035c0:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <uartOpen+0x288>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits 		 = UART_STOPBITS_1;
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <uartOpen+0x288>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity 			 = UART_PARITY_NONE;
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <uartOpen+0x288>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode 				 = UART_MODE_TX_RX;
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <uartOpen+0x288>)
 80035d4:	220c      	movs	r2, #12
 80035d6:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE;
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <uartOpen+0x288>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <uartOpen+0x288>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart2);
 80035e4:	482f      	ldr	r0, [pc, #188]	; (80036a4 <uartOpen+0x288>)
 80035e6:	f006 faa5 	bl	8009b34 <HAL_UART_DeInit>

      qbufferCreate(&uart_tbl[ch].qbuffer, &rx_buf[ch][0], UART_MAX_BUF_SIZE);
 80035ea:	79fa      	ldrb	r2, [r7, #7]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3308      	adds	r3, #8
 80035f6:	4a24      	ldr	r2, [pc, #144]	; (8003688 <uartOpen+0x26c>)
 80035f8:	1898      	adds	r0, r3, r2
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <uartOpen+0x298>)
 8003600:	4413      	add	r3, r2
 8003602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003606:	4619      	mov	r1, r3
 8003608:	f7fd ff6d 	bl	80014e6 <qbufferCreate>

			__485_CLI_RX_ENB;
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003612:	4829      	ldr	r0, [pc, #164]	; (80036b8 <uartOpen+0x29c>)
 8003614:	f004 fa42 	bl	8007a9c <HAL_GPIO_WritePin>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <uartOpen+0x280>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <uartOpen+0x280>)
 8003622:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003626:	6313      	str	r3, [r2, #48]	; 0x30
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <uartOpen+0x280>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]

      __HAL_UART_ENABLE_IT(uart_tbl[ch].p_huart, UART_IT_RXNE); //UART RX INT Enable//
 8003634:	79fa      	ldrb	r2, [r7, #7]
 8003636:	4914      	ldr	r1, [pc, #80]	; (8003688 <uartOpen+0x26c>)
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	331c      	adds	r3, #28
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	480e      	ldr	r0, [pc, #56]	; (8003688 <uartOpen+0x26c>)
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4403      	add	r3, r0
 8003658:	331c      	adds	r3, #28
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f041 0220 	orr.w	r2, r1, #32
 8003662:	60da      	str	r2, [r3, #12]

      if (HAL_UART_Init(uart_tbl[ch].p_huart) != HAL_OK)
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	4908      	ldr	r1, [pc, #32]	; (8003688 <uartOpen+0x26c>)
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	331c      	adds	r3, #28
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f006 fa0f 	bl	8009a9a <HAL_UART_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01c      	beq.n	80036bc <uartOpen+0x2a0>
			{
      	ret = false;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
				 ret = true;

				 logPrintf("uartOpen     \t\t: DEF_UART3\r\n");

			}
	  break;
 8003686:	e075      	b.n	8003774 <uartOpen+0x358>
 8003688:	20001b2c 	.word	0x20001b2c
 800368c:	0800f8f8 	.word	0x0800f8f8
 8003690:	20001ae8 	.word	0x20001ae8
 8003694:	40011000 	.word	0x40011000
 8003698:	40020000 	.word	0x40020000
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800f918 	.word	0x0800f918
 80036a4:	20001508 	.word	0x20001508
 80036a8:	200019c4 	.word	0x200019c4
 80036ac:	20001a88 	.word	0x20001a88
 80036b0:	40004400 	.word	0x40004400
 80036b4:	200010ec 	.word	0x200010ec
 80036b8:	40020400 	.word	0x40020400
				 if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&rx_buf[ch][0], UART_MAX_BUF_SIZE) != HAL_OK) // start IT
 80036bc:	79fa      	ldrb	r2, [r7, #7]
 80036be:	4930      	ldr	r1, [pc, #192]	; (8003780 <uartOpen+0x364>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	331c      	adds	r3, #28
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <uartOpen+0x368>)
 80036d4:	4413      	add	r3, r2
 80036d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036da:	4619      	mov	r1, r3
 80036dc:	f006 fac2 	bl	8009c64 <HAL_UART_Receive_DMA>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <uartOpen+0x2ce>
					 ret = false;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
	       uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - uart_tbl[ch].p_hdma_rx->Instance->NDTR;
 80036ea:	79fa      	ldrb	r2, [r7, #7]
 80036ec:	4924      	ldr	r1, [pc, #144]	; (8003780 <uartOpen+0x364>)
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	3310      	adds	r3, #16
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	79fa      	ldrb	r2, [r7, #7]
 80036fe:	4820      	ldr	r0, [pc, #128]	; (8003780 <uartOpen+0x364>)
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4403      	add	r3, r0
 800370a:	3320      	adds	r3, #32
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	79fa      	ldrb	r2, [r7, #7]
 8003714:	1ac9      	subs	r1, r1, r3
 8003716:	481a      	ldr	r0, [pc, #104]	; (8003780 <uartOpen+0x364>)
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4403      	add	r3, r0
 8003722:	3308      	adds	r3, #8
 8003724:	6019      	str	r1, [r3, #0]
	       uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8003726:	79f9      	ldrb	r1, [r7, #7]
 8003728:	79fa      	ldrb	r2, [r7, #7]
 800372a:	4815      	ldr	r0, [pc, #84]	; (8003780 <uartOpen+0x364>)
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4403      	add	r3, r0
 8003736:	3308      	adds	r3, #8
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	4811      	ldr	r0, [pc, #68]	; (8003780 <uartOpen+0x364>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4403      	add	r3, r0
 8003746:	330c      	adds	r3, #12
 8003748:	6019      	str	r1, [r3, #0]
	       HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2106      	movs	r1, #6
 800374e:	2010      	movs	r0, #16
 8003750:	f003 f807 	bl	8006762 <HAL_NVIC_SetPriority>
	       HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003754:	2010      	movs	r0, #16
 8003756:	f003 f820 	bl	800679a <HAL_NVIC_EnableIRQ>
	       HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800375a:	2200      	movs	r2, #0
 800375c:	2101      	movs	r1, #1
 800375e:	2011      	movs	r0, #17
 8003760:	f002 ffff 	bl	8006762 <HAL_NVIC_SetPriority>
	       HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003764:	2011      	movs	r0, #17
 8003766:	f003 f818 	bl	800679a <HAL_NVIC_EnableIRQ>
				 ret = true;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
				 logPrintf("uartOpen     \t\t: DEF_UART3\r\n");
 800376e:	4806      	ldr	r0, [pc, #24]	; (8003788 <uartOpen+0x36c>)
 8003770:	f7ff fc5c 	bl	800302c <logPrintf>
	  break;
 8003774:	bf00      	nop
  }

  return ret;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20001b2c 	.word	0x20001b2c
 8003784:	200010ec 	.word	0x200010ec
 8003788:	0800f938 	.word	0x0800f938

0800378c <uartAvailable>:


uint32_t uartAvailable(uint8_t ch)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d009      	beq.n	80037b4 <uartAvailable+0x28>
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	dc32      	bgt.n	800380a <uartAvailable+0x7e>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <uartAvailable+0x20>
 80037a8:	2b01      	cmp	r3, #1
    	ret = cdcAvailable();
    break;

    case _DEF_UART2:

		break;
 80037aa:	e02e      	b.n	800380a <uartAvailable+0x7e>
    	ret = cdcAvailable();
 80037ac:	f002 f800 	bl	80057b0 <cdcAvailable>
 80037b0:	60f8      	str	r0, [r7, #12]
    break;
 80037b2:	e02a      	b.n	800380a <uartAvailable+0x7e>

    case _DEF_UART3:
    	// update in count //
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - uart_tbl[ch].p_hdma_rx->Instance->NDTR);
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	4917      	ldr	r1, [pc, #92]	; (8003814 <uartAvailable+0x88>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	440b      	add	r3, r1
 80037c2:	3310      	adds	r3, #16
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	79fa      	ldrb	r2, [r7, #7]
 80037c8:	4812      	ldr	r0, [pc, #72]	; (8003814 <uartAvailable+0x88>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4403      	add	r3, r0
 80037d4:	3320      	adds	r3, #32
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	79fa      	ldrb	r2, [r7, #7]
 80037de:	1ac9      	subs	r1, r1, r3
 80037e0:	480c      	ldr	r0, [pc, #48]	; (8003814 <uartAvailable+0x88>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4403      	add	r3, r0
 80037ec:	3308      	adds	r3, #8
 80037ee:	6019      	str	r1, [r3, #0]
    	ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 80037f0:	79fa      	ldrb	r2, [r7, #7]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	3308      	adds	r3, #8
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <uartAvailable+0x88>)
 80037fe:	4413      	add	r3, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fecb 	bl	800159c <qbufferAvailable>
 8003806:	60f8      	str	r0, [r7, #12]
	  break;
 8003808:	bf00      	nop
  }

  return ret;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20001b2c 	.word	0x20001b2c

08003818 <uartRead>:


uint8_t  uartRead(uint8_t ch)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]

   switch(ch)
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d00a      	beq.n	8003842 <uartRead+0x2a>
 800382c:	2b02      	cmp	r3, #2
 800382e:	dc17      	bgt.n	8003860 <uartRead+0x48>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <uartRead+0x20>
 8003834:	2b01      	cmp	r3, #1
     break;

     case _DEF_UART2:
//    	 data.bRx2Buff[BufIndexGet()] = (huart1.Instance->DR & 0x00FF);
//    	 ret = true;
     break;
 8003836:	e013      	b.n	8003860 <uartRead+0x48>
       ret = cdcRead();
 8003838:	f001 ffd8 	bl	80057ec <cdcRead>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]
     break;
 8003840:	e00e      	b.n	8003860 <uartRead+0x48>

     case _DEF_UART3:
    	 qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8003842:	79fa      	ldrb	r2, [r7, #7]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	3308      	adds	r3, #8
 800384e:	4a07      	ldr	r2, [pc, #28]	; (800386c <uartRead+0x54>)
 8003850:	4413      	add	r3, r2
 8003852:	f107 010f 	add.w	r1, r7, #15
 8003856:	2201      	movs	r2, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd fe62 	bl	8001522 <qbufferRead>
 	   break;
 800385e:	bf00      	nop

   }

   return ret;
 8003860:	7bfb      	ldrb	r3, [r7, #15]

}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20001b2c 	.word	0x20001b2c

08003870 <uartWrite>:


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint32_t pre_time;

  switch(ch)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d00b      	beq.n	80038a0 <uartWrite+0x30>
 8003888:	2b02      	cmp	r3, #2
 800388a:	dc5c      	bgt.n	8003946 <uartWrite+0xd6>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <uartWrite+0x24>
 8003890:	2b01      	cmp	r3, #1
//
//			if(status == HAL_OK)
//			{
//				ret = true;
//			}
		break;
 8003892:	e058      	b.n	8003946 <uartWrite+0xd6>
    	ret = cdcWrite(p_data, length);
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68b8      	ldr	r0, [r7, #8]
 8003898:	f001 fffe 	bl	8005898 <cdcWrite>
 800389c:	61f8      	str	r0, [r7, #28]
    break;
 800389e:	e052      	b.n	8003946 <uartWrite+0xd6>
	break;
#endif

	#if 1 // case 4  //  wait Tx, DMA, make buffer

  pre_time = millis();
 80038a0:	f7fd fbfd 	bl	800109e <millis>
 80038a4:	6178      	str	r0, [r7, #20]

  while(millis()- pre_time < 100)
 80038a6:	e044      	b.n	8003932 <uartWrite+0xc2>
  {
	  //if (uart_tbl[ch].p_huart->gState == HAL_UART_STATE_READY)  // huart2 상태변수 이용
	  if( uart_tbl[ch].is_tx_done == true)   // Txcplt 콜백에 변수선언  및 이용
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	4929      	ldr	r1, [pc, #164]	; (8003950 <uartWrite+0xe0>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3301      	adds	r3, #1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d039      	beq.n	8003932 <uartWrite+0xc2>
	  {
		  uart_tbl[ch].is_tx_done  = false;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	4923      	ldr	r1, [pc, #140]	; (8003950 <uartWrite+0xe0>)
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	440b      	add	r3, r1
 80038cc:	3301      	adds	r3, #1
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]

		  for(int i = 0; i < length ; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e00b      	b.n	80038f0 <uartWrite+0x80>
		  {
		  	tx_buf[0][i] = p_data[i];
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	7819      	ldrb	r1, [r3, #0]
 80038e0:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <uartWrite+0xe4>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	460a      	mov	r2, r1
 80038e8:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < length ; i++)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8ef      	bhi.n	80038d8 <uartWrite+0x68>
		  }
		  __485_CLI_TX_ENB;
 80038f8:	2201      	movs	r2, #1
 80038fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fe:	4816      	ldr	r0, [pc, #88]	; (8003958 <uartWrite+0xe8>)
 8003900:	f004 f8cc 	bl	8007a9c <HAL_GPIO_WritePin>
		  status = HAL_UART_Transmit_DMA(uart_tbl[ch].p_huart, &tx_buf[0][0], length);
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	4912      	ldr	r1, [pc, #72]	; (8003950 <uartWrite+0xe0>)
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	331c      	adds	r3, #28
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	b292      	uxth	r2, r2
 800391a:	490e      	ldr	r1, [pc, #56]	; (8003954 <uartWrite+0xe4>)
 800391c:	4618      	mov	r0, r3
 800391e:	f006 f935 	bl	8009b8c <HAL_UART_Transmit_DMA>
 8003922:	4603      	mov	r3, r0
 8003924:	74fb      	strb	r3, [r7, #19]

		  if (status == HAL_OK)
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <uartWrite+0xd2>
		  {
			  ret = length;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	61fb      	str	r3, [r7, #28]
		  }
		  break;
 8003930:	e007      	b.n	8003942 <uartWrite+0xd2>
  while(millis()- pre_time < 100)
 8003932:	f7fd fbb4 	bl	800109e <millis>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b63      	cmp	r3, #99	; 0x63
 800393e:	d9b3      	bls.n	80038a8 <uartWrite+0x38>
	  }

  }
	#endif

	  break;
 8003940:	e000      	b.n	8003944 <uartWrite+0xd4>
		  break;
 8003942:	bf00      	nop
	  break;
 8003944:	bf00      	nop
  }

  return ret;
 8003946:	69fb      	ldr	r3, [r7, #28]

}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20001b2c 	.word	0x20001b2c
 8003954:	200012ec 	.word	0x200012ec
 8003958:	40020400 	.word	0x40020400

0800395c <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...)  // #include <stdarg.h> 추가해야 가능 //
{
 800395c:	b40e      	push	{r1, r2, r3}
 800395e:	b580      	push	{r7, lr}
 8003960:	b0c7      	sub	sp, #284	; 0x11c
 8003962:	af00      	add	r7, sp, #0
 8003964:	4602      	mov	r2, r0
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	701a      	strb	r2, [r3, #0]
	char buf[256];
  va_list args;  						// memory address , args 이름으로 포인트 설정 // 포인터 변수 생성
  int len;
  uint32_t ret;

  va_start(args, fmt); 					// 가변인자중 첫번째 인자의 주소를 가르킴 // 즉 시작 주소 지정 //
 800396a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args); // 가변인자 문자 출력  //(fmt에 만들어진 내용이 담길 버퍼, 최대크키 , 포멧, 가변인자 시작주소) // 리턴값은 길이 //
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	f107 0010 	add.w	r0, r7, #16
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003986:	f009 fc6d 	bl	800d264 <vsniprintf>
 800398a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  ret = uartWrite(ch, (uint8_t *)buf, len);
 800398e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003992:	f107 0110 	add.w	r1, r7, #16
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff68 	bl	8003870 <uartWrite>
 80039a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args); 						//args 목록 초기화

  return ret;
 80039a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110

}
 80039a8:	4618      	mov	r0, r3
 80039aa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039b4:	b003      	add	sp, #12
 80039b6:	4770      	bx	lr

080039b8 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d009      	beq.n	80039e0 <uartGetBaud+0x28>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	dc0b      	bgt.n	80039e8 <uartGetBaud+0x30>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <uartGetBaud+0x20>
 80039d4:	2b01      	cmp	r3, #1
      ret = cdcGetBaud();
    break;

    case _DEF_UART2:
//    	ret = huart1.Init.BaudRate;
		break;
 80039d6:	e007      	b.n	80039e8 <uartGetBaud+0x30>
      ret = cdcGetBaud();
 80039d8:	f001 ff86 	bl	80058e8 <cdcGetBaud>
 80039dc:	60f8      	str	r0, [r7, #12]
    break;
 80039de:	e003      	b.n	80039e8 <uartGetBaud+0x30>

    case _DEF_UART3:
    	ret = huart2.Init.BaudRate;
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <uartGetBaud+0x3c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
		break;
 80039e6:	bf00      	nop
  }

  return ret;
 80039e8:	68fb      	ldr	r3, [r7, #12]


}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20001508 	.word	0x20001508

080039f8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }

}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_RxCpltCallback>:

uint8_t Rx_INT_Cnt, Tx_INT_Cnt;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    qbufferWrite(&uart_tbl[_DEF_UART3].qbuffer, &rx_data[_DEF_UART3], 1);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data[_DEF_UART3], 1) ;
  }
  */

}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
//
//		 _485_RX_ENB;
//
//	 }

   if(huart->Instance == USART2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_UART_TxCpltCallback+0x48>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d117      	bne.n	8003a62 <HAL_UART_TxCpltCallback+0x42>
  {
	   __HAL_UART_CLEAR_FLAG(&huart2,UART_FLAG_RXNE);
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_UART_TxCpltCallback+0x4c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0220 	mvn.w	r2, #32
 8003a3a:	601a      	str	r2, [r3, #0]
		 __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_UART_TxCpltCallback+0x4c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_UART_TxCpltCallback+0x4c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0220 	orr.w	r2, r2, #32
 8003a4a:	60da      	str	r2, [r3, #12]

 	 //is_tx_done[_DEF_UART2] = true; // 수신 준비 됬다고 알려주는 신호
  	 uart_tbl[_DEF_UART3].is_tx_done  = true;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_UART_TxCpltCallback+0x50>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  	 __485_CLI_RX_ENB;
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a5a:	4806      	ldr	r0, [pc, #24]	; (8003a74 <HAL_UART_TxCpltCallback+0x54>)
 8003a5c:	f004 f81e 	bl	8007a9c <HAL_GPIO_WritePin>
  	 return;
 8003a60:	bf00      	nop
 }


}
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40004400 	.word	0x40004400
 8003a6c:	20001508 	.word	0x20001508
 8003a70:	20001b2c 	.word	0x20001b2c
 8003a74:	40020400 	.word	0x40020400

08003a78 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 031c 	add.w	r3, r7, #28
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a90      	ldr	r2, [pc, #576]	; (8003cd8 <HAL_UART_MspInit+0x260>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f040 8082 	bne.w	8003ba0 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	4a8d      	ldr	r2, [pc, #564]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003aa6:	f043 0310 	orr.w	r3, r3, #16
 8003aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8003aac:	4b8b      	ldr	r3, [pc, #556]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	4b87      	ldr	r3, [pc, #540]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a86      	ldr	r2, [pc, #536]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	4b80      	ldr	r3, [pc, #512]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae4:	4b7d      	ldr	r3, [pc, #500]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b02:	2307      	movs	r3, #7
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4874      	ldr	r0, [pc, #464]	; (8003ce0 <HAL_UART_MspInit+0x268>)
 8003b0e:	f003 fd45 	bl	800759c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b12:	2308      	movs	r3, #8
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b22:	2307      	movs	r3, #7
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	486d      	ldr	r0, [pc, #436]	; (8003ce4 <HAL_UART_MspInit+0x26c>)
 8003b2e:	f003 fd35 	bl	800759c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b34:	4a6d      	ldr	r2, [pc, #436]	; (8003cec <HAL_UART_MspInit+0x274>)
 8003b36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003b38:	4b6b      	ldr	r3, [pc, #428]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b40:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b46:	4b68      	ldr	r3, [pc, #416]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b4c:	4b66      	ldr	r3, [pc, #408]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b52:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b54:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b5a:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b66:	4b60      	ldr	r3, [pc, #384]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b72:	485d      	ldr	r0, [pc, #372]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b74:	f002 fe3a 	bl	80067ec <HAL_DMA_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8003b7e:	f7fd fb17 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
 8003b88:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <HAL_UART_MspInit+0x270>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2102      	movs	r1, #2
 8003b92:	2025      	movs	r0, #37	; 0x25
 8003b94:	f002 fde5 	bl	8006762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b98:	2025      	movs	r0, #37	; 0x25
 8003b9a:	f002 fdfe 	bl	800679a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b9e:	e096      	b.n	8003cce <HAL_UART_MspInit+0x256>
  else if(uartHandle->Instance==USART2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_UART_MspInit+0x278>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f040 8091 	bne.w	8003cce <HAL_UART_MspInit+0x256>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a49      	ldr	r2, [pc, #292]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbc:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	4a42      	ldr	r2, [pc, #264]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd8:	4b40      	ldr	r3, [pc, #256]	; (8003cdc <HAL_UART_MspInit+0x264>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003be4:	230c      	movs	r3, #12
 8003be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bf4:	2307      	movs	r3, #7
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf8:	f107 031c 	add.w	r3, r7, #28
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4838      	ldr	r0, [pc, #224]	; (8003ce0 <HAL_UART_MspInit+0x268>)
 8003c00:	f003 fccc 	bl	800759c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c04:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c06:	4a3c      	ldr	r2, [pc, #240]	; (8003cf8 <HAL_UART_MspInit+0x280>)
 8003c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c26:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c38:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c46:	482b      	ldr	r0, [pc, #172]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c48:	f002 fdd0 	bl	80067ec <HAL_DMA_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8003c52:	f7fd faad 	bl	80011b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c5c:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_UART_MspInit+0x27c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_UART_MspInit+0x288>)
 8003c66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ca2:	4816      	ldr	r0, [pc, #88]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003ca4:	f002 fda2 	bl	80067ec <HAL_DMA_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8003cae:	f7fd fa7f 	bl	80011b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb8:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_UART_MspInit+0x284>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2105      	movs	r1, #5
 8003cc2:	2026      	movs	r0, #38	; 0x26
 8003cc4:	f002 fd4d 	bl	8006762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cc8:	2026      	movs	r0, #38	; 0x26
 8003cca:	f002 fd66 	bl	800679a <HAL_NVIC_EnableIRQ>
}
 8003cce:	bf00      	nop
 8003cd0:	3730      	adds	r7, #48	; 0x30
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	20001a28 	.word	0x20001a28
 8003cec:	400264b8 	.word	0x400264b8
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	200019c4 	.word	0x200019c4
 8003cf8:	40026088 	.word	0x40026088
 8003cfc:	20001a88 	.word	0x20001a88
 8003d00:	400260a0 	.word	0x400260a0

08003d04 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_UART_MspDeInit+0x84>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d117      	bne.n	8003d46 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003d16:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_UART_MspDeInit+0x88>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_UART_MspDeInit+0x88>)
 8003d1c:	f023 0310 	bic.w	r3, r3, #16
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8003d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d26:	481a      	ldr	r0, [pc, #104]	; (8003d90 <HAL_UART_MspDeInit+0x8c>)
 8003d28:	f003 fdbc 	bl	80078a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8003d2c:	2108      	movs	r1, #8
 8003d2e:	4819      	ldr	r0, [pc, #100]	; (8003d94 <HAL_UART_MspDeInit+0x90>)
 8003d30:	f003 fdb8 	bl	80078a4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fe05 	bl	8006948 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003d3e:	2025      	movs	r0, #37	; 0x25
 8003d40:	f002 fd39 	bl	80067b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003d44:	e01b      	b.n	8003d7e <HAL_UART_MspDeInit+0x7a>
  else if(uartHandle->Instance==USART2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_UART_MspDeInit+0x94>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d116      	bne.n	8003d7e <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_UART_MspDeInit+0x88>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_UART_MspDeInit+0x88>)
 8003d56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003d5c:	210c      	movs	r1, #12
 8003d5e:	480c      	ldr	r0, [pc, #48]	; (8003d90 <HAL_UART_MspDeInit+0x8c>)
 8003d60:	f003 fda0 	bl	80078a4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fded 	bl	8006948 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 fde8 	bl	8006948 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003d78:	2026      	movs	r0, #38	; 0x26
 8003d7a:	f002 fd1c 	bl	80067b6 <HAL_NVIC_DisableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40004400 	.word	0x40004400

08003d9c <cliUart>:

static void cliUart(cli_args_t *args)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  bool ret = false;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t baudrate = 0 ;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]

  if(args->argc == 1 && args->isStr(0, "info") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d112      	bne.n	8003dda <cliUart+0x3e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4927      	ldr	r1, [pc, #156]	; (8003e58 <cliUart+0xbc>)
 8003dba:	2000      	movs	r0, #0
 8003dbc:	4798      	blx	r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <cliUart+0x3e>
  {

  	uartPrintf(_DEF_UART3, "Uart(485) BaudRate : %d\n", uartGetBaud(_DEF_UART3));
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	f7ff fdf7 	bl	80039b8 <uartGetBaud>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4923      	ldr	r1, [pc, #140]	; (8003e5c <cliUart+0xc0>)
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f7ff fdc3 	bl	800395c <uartPrintf>
  	//uartPrintf(_DEF_UART1, "ID    : DEC: %d, HEX: %x\n", STATION_ID_HMI, STATION_ID_HMI);

  	ret = true;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
  }

  if(args->argc == 2 && args->isStr(0, "set") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d113      	bne.n	8003e0a <cliUart+0x6e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	491e      	ldr	r1, [pc, #120]	; (8003e60 <cliUart+0xc4>)
 8003de8:	2000      	movs	r0, #0
 8003dea:	4798      	blx	r3
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <cliUart+0x6e>
  {

  	baudrate  = (uint32_t) args->getData(1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2001      	movs	r0, #1
 8003df8:	4798      	blx	r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	60bb      	str	r3, [r7, #8]

  	uartOpen(_DEF_UART3, baudrate);
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	2002      	movs	r0, #2
 8003e02:	f7ff fb0b 	bl	800341c <uartOpen>

  	ret = true;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
  }

  if(args->argc == 1 && args->isStr(0, "reset") == true) //여기서 설정한 toggle 과 동일 문자가 입력하면 아래 Loop가 실행됨//
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d112      	bne.n	8003e38 <cliUart+0x9c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4913      	ldr	r1, [pc, #76]	; (8003e64 <cliUart+0xc8>)
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <cliUart+0x9c>
  {

    HAL_UART_Init(uart_tbl[2].p_huart);
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <cliUart+0xcc>)
 8003e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 fe37 	bl	8009a9a <HAL_UART_Init>
  	uartPrintf(_DEF_UART3, "Uart(485) reset OK\n");
 8003e2c:	490f      	ldr	r1, [pc, #60]	; (8003e6c <cliUart+0xd0>)
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f7ff fd94 	bl	800395c <uartPrintf>

  	ret = true;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
  }



  if(ret != true )
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	f083 0301 	eor.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <cliUart+0xb4>
  {

    cliPrintf("uart info\n");
 8003e44:	480a      	ldr	r0, [pc, #40]	; (8003e70 <cliUart+0xd4>)
 8003e46:	f7fe f9ad 	bl	80021a4 <cliPrintf>
    cliPrintf("uart set baud\n");
 8003e4a:	480a      	ldr	r0, [pc, #40]	; (8003e74 <cliUart+0xd8>)
 8003e4c:	f7fe f9aa 	bl	80021a4 <cliPrintf>
  }

}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	0800f958 	.word	0x0800f958
 8003e5c:	0800f960 	.word	0x0800f960
 8003e60:	0800f97c 	.word	0x0800f97c
 8003e64:	0800f980 	.word	0x0800f980
 8003e68:	20001b2c 	.word	0x20001b2c
 8003e6c:	0800f988 	.word	0x0800f988
 8003e70:	0800f99c 	.word	0x0800f99c
 8003e74:	0800f9a8 	.word	0x0800f9a8

08003e78 <usbInit>:

#include "usb.h"
#include "usb_device.h"

bool usbInit(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
  bool ret = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	77fb      	strb	r3, [r7, #31]

  __HAL_RCC_GPIOA_CLK_ENABLE();// A 클럭은 USB_CDC 이기 떄문에 여기서 활성화 안하면 아래 초기화 수행 안됨 //
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <usbInit+0x98>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <usbInit+0x98>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <usbInit+0x98>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9e:	f107 0308 	add.w	r3, r7, #8
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8003eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;  //OUTPUT
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4813      	ldr	r0, [pc, #76]	; (8003f14 <usbInit+0x9c>)
 8003ec8:	f003 fb68 	bl	800759c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //SET LOW
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ed2:	4810      	ldr	r0, [pc, #64]	; (8003f14 <usbInit+0x9c>)
 8003ed4:	f003 fde2 	bl	8007a9c <HAL_GPIO_WritePin>
  delay(100);
 8003ed8:	2064      	movs	r0, #100	; 0x64
 8003eda:	f7fd f8d5 	bl	8001088 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);//SET HIGH
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ee4:	480b      	ldr	r0, [pc, #44]	; (8003f14 <usbInit+0x9c>)
 8003ee6:	f003 fdd9 	bl	8007a9c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;//INPUT
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4807      	ldr	r0, [pc, #28]	; (8003f14 <usbInit+0x9c>)
 8003ef6:	f003 fb51 	bl	800759c <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8003efa:	f001 f923 	bl	8005144 <MX_USB_DEVICE_Init>

  logPrintf("usbInit     \t\t: CDC_MODE\r\n");
 8003efe:	4806      	ldr	r0, [pc, #24]	; (8003f18 <usbInit+0xa0>)
 8003f00:	f7ff f894 	bl	800302c <logPrintf>

  return ret;
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	0800f9b8 	.word	0x0800f9b8

08003f1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e025      	b.n	8003f80 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	79fa      	ldrb	r2, [r7, #7]
 8003f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f002 f877 	bl	8006068 <USBD_LL_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e010      	b.n	8003fc2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	f107 020e 	add.w	r2, r7, #14
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4798      	blx	r3
 8003fb8:	4602      	mov	r2, r0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f002 f894 	bl	8006100 <USBD_LL_Start>
 8003fd8:	4603      	mov	r3, r0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004004:	2303      	movs	r3, #3
 8004006:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	4603      	mov	r3, r0
 8004024:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
  }

  return USBD_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ff3b 	bl	8004eee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2b02      	cmp	r3, #2
 800409a:	d01a      	beq.n	80040d2 <USBD_LL_SetupStage+0x72>
 800409c:	2b02      	cmp	r3, #2
 800409e:	d822      	bhi.n	80040e6 <USBD_LL_SetupStage+0x86>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <USBD_LL_SetupStage+0x4a>
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00a      	beq.n	80040be <USBD_LL_SetupStage+0x5e>
 80040a8:	e01d      	b.n	80040e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa18 	bl	80044e8 <USBD_StdDevReq>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
      break;
 80040bc:	e020      	b.n	8004100 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa7c 	bl	80045c4 <USBD_StdItfReq>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e016      	b.n	8004100 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 faba 	bl	8004654 <USBD_StdEPReq>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e00c      	b.n	8004100 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80040ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f002 f863 	bl	80061c0 <USBD_LL_StallEP>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
      break;
 80040fe:	bf00      	nop
  }

  return ret;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	460b      	mov	r3, r1
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004118:	7afb      	ldrb	r3, [r7, #11]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d137      	bne.n	800418e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004124:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800412c:	2b03      	cmp	r3, #3
 800412e:	d14a      	bne.n	80041c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d913      	bls.n	8004164 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4293      	cmp	r3, r2
 8004154:	bf28      	it	cs
 8004156:	4613      	movcs	r3, r2
 8004158:	461a      	mov	r2, r3
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 ffba 	bl	80050d6 <USBD_CtlContinueRx>
 8004162:	e030      	b.n	80041c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004176:	2b03      	cmp	r3, #3
 8004178:	d105      	bne.n	8004186 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 ffb6 	bl	80050f8 <USBD_CtlSendStatus>
 800418c:	e01b      	b.n	80041c6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d013      	beq.n	80041c2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d10e      	bne.n	80041c2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	7afa      	ldrb	r2, [r7, #11]
 80041ae:	4611      	mov	r1, r2
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	4798      	blx	r3
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	e002      	b.n	80041c8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e000      	b.n	80041c8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	460b      	mov	r3, r1
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d16a      	bne.n	80042ba <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3314      	adds	r3, #20
 80041e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d155      	bne.n	80042a0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d914      	bls.n	800422a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	1ad2      	subs	r2, r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	461a      	mov	r2, r3
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 ff2f 	bl	800507a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800421c:	2300      	movs	r3, #0
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f002 f876 	bl	8006314 <USBD_LL_PrepareReceive>
 8004228:	e03a      	b.n	80042a0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	d11c      	bne.n	8004270 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800423e:	429a      	cmp	r2, r3
 8004240:	d316      	bcc.n	8004270 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800424c:	429a      	cmp	r2, r3
 800424e:	d20f      	bcs.n	8004270 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 ff10 	bl	800507a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004262:	2300      	movs	r3, #0
 8004264:	2200      	movs	r2, #0
 8004266:	2100      	movs	r1, #0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f002 f853 	bl	8006314 <USBD_LL_PrepareReceive>
 800426e:	e017      	b.n	80042a0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004282:	2b03      	cmp	r3, #3
 8004284:	d105      	bne.n	8004292 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 ff93 	bl	80061c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 ff3f 	bl	800511e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d123      	bne.n	80042f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe99 	bl	8003fe2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80042b8:	e01b      	b.n	80042f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10e      	bne.n	80042ee <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	7afa      	ldrb	r2, [r7, #11]
 80042da:	4611      	mov	r1, r2
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	4798      	blx	r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	e002      	b.n	80042f4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e000      	b.n	80042f4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	4611      	mov	r1, r2
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f001 fef5 	bl	8006136 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800435c:	2340      	movs	r3, #64	; 0x40
 800435e:	2200      	movs	r2, #0
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fee7 	bl	8006136 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d105      	bne.n	80043e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004402:	2b03      	cmp	r3, #3
 8004404:	d10b      	bne.n	800441e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6852      	ldr	r2, [r2, #4]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	4611      	mov	r1, r2
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
  }

  return USBD_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b087      	sub	sp, #28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80044c8:	8a3b      	ldrh	r3, [r7, #16]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80044d8:	89fb      	ldrh	r3, [r7, #14]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d005      	beq.n	800450e <USBD_StdDevReq+0x26>
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d853      	bhi.n	80045ae <USBD_StdDevReq+0xc6>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <USBD_StdDevReq+0x3a>
 800450a:	2b20      	cmp	r3, #32
 800450c:	d14f      	bne.n	80045ae <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]
    break;
 8004520:	e04a      	b.n	80045b8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b09      	cmp	r3, #9
 8004528:	d83b      	bhi.n	80045a2 <USBD_StdDevReq+0xba>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <USBD_StdDevReq+0x48>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004585 	.word	0x08004585
 8004534:	08004599 	.word	0x08004599
 8004538:	080045a3 	.word	0x080045a3
 800453c:	0800458f 	.word	0x0800458f
 8004540:	080045a3 	.word	0x080045a3
 8004544:	08004563 	.word	0x08004563
 8004548:	08004559 	.word	0x08004559
 800454c:	080045a3 	.word	0x080045a3
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800456d 	.word	0x0800456d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9d8 	bl	8004910 <USBD_GetDescriptor>
      break;
 8004560:	e024      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fb3d 	bl	8004be4 <USBD_SetAddress>
      break;
 800456a:	e01f      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fb7c 	bl	8004c6c <USBD_SetConfig>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e018      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fc19 	bl	8004db4 <USBD_GetConfig>
      break;
 8004582:	e013      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fc49 	bl	8004e1e <USBD_GetStatus>
      break;
 800458c:	e00e      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800458e:	6839      	ldr	r1, [r7, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fc77 	bl	8004e84 <USBD_SetFeature>
      break;
 8004596:	e009      	b.n	80045ac <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fc86 	bl	8004eac <USBD_ClrFeature>
      break;
 80045a0:	e004      	b.n	80045ac <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80045a2:	6839      	ldr	r1, [r7, #0]
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fcdc 	bl	8004f62 <USBD_CtlError>
      break;
 80045aa:	bf00      	nop
    }
    break;
 80045ac:	e004      	b.n	80045b8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fcd6 	bl	8004f62 <USBD_CtlError>
    break;
 80045b6:	bf00      	nop
  }

  return ret;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop

080045c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d005      	beq.n	80045ea <USBD_StdItfReq+0x26>
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d82e      	bhi.n	8004640 <USBD_StdItfReq+0x7c>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <USBD_StdItfReq+0x26>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d12a      	bne.n	8004640 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045f0:	3b01      	subs	r3, #1
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d81d      	bhi.n	8004632 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	889b      	ldrh	r3, [r3, #4]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d813      	bhi.n	8004628 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	88db      	ldrh	r3, [r3, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d110      	bne.n	800463c <USBD_StdItfReq+0x78>
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fd69 	bl	80050f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004626:	e009      	b.n	800463c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fc99 	bl	8004f62 <USBD_CtlError>
      break;
 8004630:	e004      	b.n	800463c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fc94 	bl	8004f62 <USBD_CtlError>
      break;
 800463a:	e000      	b.n	800463e <USBD_StdItfReq+0x7a>
      break;
 800463c:	bf00      	nop
    }
    break;
 800463e:	e004      	b.n	800464a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fc8d 	bl	8004f62 <USBD_CtlError>
    break;
 8004648:	bf00      	nop
  }

  return ret;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	889b      	ldrh	r3, [r3, #4]
 8004666:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d007      	beq.n	8004684 <USBD_StdEPReq+0x30>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	f200 8140 	bhi.w	80048fa <USBD_StdEPReq+0x2a6>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <USBD_StdEPReq+0x44>
 800467e:	2b20      	cmp	r3, #32
 8004680:	f040 813b 	bne.w	80048fa <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
 8004692:	4603      	mov	r3, r0
 8004694:	73fb      	strb	r3, [r7, #15]
    break;
 8004696:	e135      	b.n	8004904 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d007      	beq.n	80046b0 <USBD_StdEPReq+0x5c>
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	f300 8124 	bgt.w	80048ee <USBD_StdEPReq+0x29a>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d07b      	beq.n	80047a2 <USBD_StdEPReq+0x14e>
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d03b      	beq.n	8004726 <USBD_StdEPReq+0xd2>
 80046ae:	e11e      	b.n	80048ee <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d002      	beq.n	80046c0 <USBD_StdEPReq+0x6c>
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d016      	beq.n	80046ec <USBD_StdEPReq+0x98>
 80046be:	e02c      	b.n	800471a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <USBD_StdEPReq+0x8e>
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	2b80      	cmp	r3, #128	; 0x80
 80046ca:	d00a      	beq.n	80046e2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80046cc:	7bbb      	ldrb	r3, [r7, #14]
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fd75 	bl	80061c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 fd71 	bl	80061c0 <USBD_LL_StallEP>
 80046de:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80046e0:	e020      	b.n	8004724 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fc3c 	bl	8004f62 <USBD_CtlError>
        break;
 80046ea:	e01b      	b.n	8004724 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	885b      	ldrh	r3, [r3, #2]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10e      	bne.n	8004712 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <USBD_StdEPReq+0xbe>
 80046fa:	7bbb      	ldrb	r3, [r7, #14]
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d008      	beq.n	8004712 <USBD_StdEPReq+0xbe>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	88db      	ldrh	r3, [r3, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004708:	7bbb      	ldrb	r3, [r7, #14]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 fd57 	bl	80061c0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fcf0 	bl	80050f8 <USBD_CtlSendStatus>

        break;
 8004718:	e004      	b.n	8004724 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fc20 	bl	8004f62 <USBD_CtlError>
        break;
 8004722:	bf00      	nop
      }
      break;
 8004724:	e0e8      	b.n	80048f8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800472c:	2b02      	cmp	r3, #2
 800472e:	d002      	beq.n	8004736 <USBD_StdEPReq+0xe2>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d016      	beq.n	8004762 <USBD_StdEPReq+0x10e>
 8004734:	e02e      	b.n	8004794 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00d      	beq.n	8004758 <USBD_StdEPReq+0x104>
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d00a      	beq.n	8004758 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004742:	7bbb      	ldrb	r3, [r7, #14]
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fd3a 	bl	80061c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 fd36 	bl	80061c0 <USBD_LL_StallEP>
 8004754:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004756:	e023      	b.n	80047a0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fc01 	bl	8004f62 <USBD_CtlError>
        break;
 8004760:	e01e      	b.n	80047a0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	885b      	ldrh	r3, [r3, #2]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800476a:	7bbb      	ldrb	r3, [r7, #14]
 800476c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004774:	7bbb      	ldrb	r3, [r7, #14]
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f001 fd40 	bl	80061fe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fcba 	bl	80050f8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	6839      	ldr	r1, [r7, #0]
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
        }
        break;
 8004792:	e004      	b.n	800479e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fbe3 	bl	8004f62 <USBD_CtlError>
        break;
 800479c:	e000      	b.n	80047a0 <USBD_StdEPReq+0x14c>
        break;
 800479e:	bf00      	nop
      }
      break;
 80047a0:	e0aa      	b.n	80048f8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d002      	beq.n	80047b2 <USBD_StdEPReq+0x15e>
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d032      	beq.n	8004816 <USBD_StdEPReq+0x1c2>
 80047b0:	e097      	b.n	80048e2 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <USBD_StdEPReq+0x174>
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d004      	beq.n	80047c8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fbce 	bl	8004f62 <USBD_CtlError>
          break;
 80047c6:	e091      	b.n	80048ec <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80047c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da0b      	bge.n	80047e8 <USBD_StdEPReq+0x194>
 80047d0:	7bbb      	ldrb	r3, [r7, #14]
 80047d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	3310      	adds	r3, #16
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	e00b      	b.n	8004800 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	3304      	adds	r3, #4
 8004800:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2202      	movs	r2, #2
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fc18 	bl	8005044 <USBD_CtlSendData>
        break;
 8004814:	e06a      	b.n	80048ec <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da11      	bge.n	8004842 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3324      	adds	r3, #36	; 0x24
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d117      	bne.n	8004868 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fb91 	bl	8004f62 <USBD_CtlError>
            break;
 8004840:	e054      	b.n	80048ec <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb7e 	bl	8004f62 <USBD_CtlError>
            break;
 8004866:	e041      	b.n	80048ec <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da0b      	bge.n	8004888 <USBD_StdEPReq+0x234>
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3310      	adds	r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	e00b      	b.n	80048a0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004888:	7bbb      	ldrb	r3, [r7, #14]
 800488a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	3304      	adds	r3, #4
 80048a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <USBD_StdEPReq+0x25a>
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d103      	bne.n	80048b6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e00e      	b.n	80048d4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 fcbe 	bl	800623c <USBD_LL_IsStallEP>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e002      	b.n	80048d4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2202      	movs	r2, #2
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fbb2 	bl	8005044 <USBD_CtlSendData>
          break;
 80048e0:	e004      	b.n	80048ec <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb3c 	bl	8004f62 <USBD_CtlError>
        break;
 80048ea:	bf00      	nop
      }
      break;
 80048ec:	e004      	b.n	80048f8 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb36 	bl	8004f62 <USBD_CtlError>
      break;
 80048f6:	bf00      	nop
    }
    break;
 80048f8:	e004      	b.n	8004904 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb30 	bl	8004f62 <USBD_CtlError>
    break;
 8004902:	bf00      	nop
  }

  return ret;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	885b      	ldrh	r3, [r3, #2]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	2b06      	cmp	r3, #6
 8004932:	f200 8128 	bhi.w	8004b86 <USBD_GetDescriptor+0x276>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <USBD_GetDescriptor+0x2c>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004959 	.word	0x08004959
 8004940:	08004971 	.word	0x08004971
 8004944:	080049b1 	.word	0x080049b1
 8004948:	08004b87 	.word	0x08004b87
 800494c:	08004b87 	.word	0x08004b87
 8004950:	08004b27 	.word	0x08004b27
 8004954:	08004b53 	.word	0x08004b53
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	7c12      	ldrb	r2, [r2, #16]
 8004964:	f107 0108 	add.w	r1, r7, #8
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
 800496c:	60f8      	str	r0, [r7, #12]
    break;
 800496e:	e112      	b.n	8004b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7c1b      	ldrb	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10d      	bne.n	8004994 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f107 0208 	add.w	r2, r7, #8
 8004984:	4610      	mov	r0, r2
 8004986:	4798      	blx	r3
 8004988:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004992:	e100      	b.n	8004b96 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f107 0208 	add.w	r2, r7, #8
 80049a0:	4610      	mov	r0, r2
 80049a2:	4798      	blx	r3
 80049a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	2202      	movs	r2, #2
 80049ac:	701a      	strb	r2, [r3, #0]
    break;
 80049ae:	e0f2      	b.n	8004b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	885b      	ldrh	r3, [r3, #2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	f200 80ac 	bhi.w	8004b14 <USBD_GetDescriptor+0x204>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <USBD_GetDescriptor+0xb4>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049dd 	.word	0x080049dd
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a45 	.word	0x08004a45
 80049d0:	08004a79 	.word	0x08004a79
 80049d4:	08004aad 	.word	0x08004aad
 80049d8:	08004ae1 	.word	0x08004ae1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	7c12      	ldrb	r2, [r2, #16]
 80049f4:	f107 0108 	add.w	r1, r7, #8
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
 80049fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80049fe:	e091      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 faad 	bl	8004f62 <USBD_CtlError>
        err++;
 8004a08:	7afb      	ldrb	r3, [r7, #11]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	72fb      	strb	r3, [r7, #11]
      break;
 8004a0e:	e089      	b.n	8004b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	7c12      	ldrb	r2, [r2, #16]
 8004a28:	f107 0108 	add.w	r1, r7, #8
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4798      	blx	r3
 8004a30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a32:	e077      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa93 	bl	8004f62 <USBD_CtlError>
        err++;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	72fb      	strb	r3, [r7, #11]
      break;
 8004a42:	e06f      	b.n	8004b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	7c12      	ldrb	r2, [r2, #16]
 8004a5c:	f107 0108 	add.w	r1, r7, #8
 8004a60:	4610      	mov	r0, r2
 8004a62:	4798      	blx	r3
 8004a64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a66:	e05d      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa79 	bl	8004f62 <USBD_CtlError>
        err++;
 8004a70:	7afb      	ldrb	r3, [r7, #11]
 8004a72:	3301      	adds	r3, #1
 8004a74:	72fb      	strb	r3, [r7, #11]
      break;
 8004a76:	e055      	b.n	8004b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	7c12      	ldrb	r2, [r2, #16]
 8004a90:	f107 0108 	add.w	r1, r7, #8
 8004a94:	4610      	mov	r0, r2
 8004a96:	4798      	blx	r3
 8004a98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a9a:	e043      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa5f 	bl	8004f62 <USBD_CtlError>
        err++;
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	72fb      	strb	r3, [r7, #11]
      break;
 8004aaa:	e03b      	b.n	8004b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	7c12      	ldrb	r2, [r2, #16]
 8004ac4:	f107 0108 	add.w	r1, r7, #8
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ace:	e029      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa45 	bl	8004f62 <USBD_CtlError>
        err++;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	3301      	adds	r3, #1
 8004adc:	72fb      	strb	r3, [r7, #11]
      break;
 8004ade:	e021      	b.n	8004b24 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	7c12      	ldrb	r2, [r2, #16]
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004b02:	e00f      	b.n	8004b24 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa2b 	bl	8004f62 <USBD_CtlError>
        err++;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	72fb      	strb	r3, [r7, #11]
      break;
 8004b12:	e007      	b.n	8004b24 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa23 	bl	8004f62 <USBD_CtlError>
      err++;
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8004b22:	bf00      	nop
    }
    break;
 8004b24:	e037      	b.n	8004b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7c1b      	ldrb	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	f107 0208 	add.w	r2, r7, #8
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4798      	blx	r3
 8004b3e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004b40:	e029      	b.n	8004b96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa0c 	bl	8004f62 <USBD_CtlError>
      err++;
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	72fb      	strb	r3, [r7, #11]
    break;
 8004b50:	e021      	b.n	8004b96 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7c1b      	ldrb	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f107 0208 	add.w	r2, r7, #8
 8004b66:	4610      	mov	r0, r2
 8004b68:	4798      	blx	r3
 8004b6a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	2207      	movs	r2, #7
 8004b72:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004b74:	e00f      	b.n	8004b96 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9f2 	bl	8004f62 <USBD_CtlError>
      err++;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	3301      	adds	r3, #1
 8004b82:	72fb      	strb	r3, [r7, #11]
    break;
 8004b84:	e007      	b.n	8004b96 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9ea 	bl	8004f62 <USBD_CtlError>
    err++;
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	3301      	adds	r3, #1
 8004b92:	72fb      	strb	r3, [r7, #11]
    break;
 8004b94:	bf00      	nop
  }

  if (err != 0U)
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11e      	bne.n	8004bda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	88db      	ldrh	r3, [r3, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d016      	beq.n	8004bd2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00e      	beq.n	8004bc8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	88da      	ldrh	r2, [r3, #6]
 8004bae:	893b      	ldrh	r3, [r7, #8]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bf28      	it	cs
 8004bb4:	4613      	movcs	r3, r2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8004bba:	893b      	ldrh	r3, [r7, #8]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa3f 	bl	8005044 <USBD_CtlSendData>
 8004bc6:	e009      	b.n	8004bdc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9c9 	bl	8004f62 <USBD_CtlError>
 8004bd0:	e004      	b.n	8004bdc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa90 	bl	80050f8 <USBD_CtlSendStatus>
 8004bd8:	e000      	b.n	8004bdc <USBD_GetDescriptor+0x2cc>
    return;
 8004bda:	bf00      	nop
    }
  }
}
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	889b      	ldrh	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d130      	bne.n	8004c58 <USBD_SetAddress+0x74>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	88db      	ldrh	r3, [r3, #6]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d12c      	bne.n	8004c58 <USBD_SetAddress+0x74>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	885b      	ldrh	r3, [r3, #2]
 8004c02:	2b7f      	cmp	r3, #127	; 0x7f
 8004c04:	d828      	bhi.n	8004c58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	885b      	ldrh	r3, [r3, #2]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d104      	bne.n	8004c26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f99f 	bl	8004f62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c24:	e01d      	b.n	8004c62 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fb2e 	bl	8006294 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa5d 	bl	80050f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c4c:	e009      	b.n	8004c62 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c56:	e004      	b.n	8004c62 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f981 	bl	8004f62 <USBD_CtlError>
  }
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	885b      	ldrh	r3, [r3, #2]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <USBD_SetConfig+0x144>)
 8004c82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <USBD_SetConfig+0x144>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d905      	bls.n	8004c98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f967 	bl	8004f62 <USBD_CtlError>
    return USBD_FAIL;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e087      	b.n	8004da8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d002      	beq.n	8004ca8 <USBD_SetConfig+0x3c>
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d025      	beq.n	8004cf2 <USBD_SetConfig+0x86>
 8004ca6:	e071      	b.n	8004d8c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <USBD_SetConfig+0x144>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01c      	beq.n	8004cea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <USBD_SetConfig+0x144>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <USBD_SetConfig+0x144>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff f999 	bl	8003ff8 <USBD_SetClassConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f945 	bl	8004f62 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8004cd8:	e065      	b.n	8004da6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa0c 	bl	80050f8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8004ce8:	e05d      	b.n	8004da6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa04 	bl	80050f8 <USBD_CtlSendStatus>
    break;
 8004cf0:	e059      	b.n	8004da6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <USBD_SetConfig+0x144>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d112      	bne.n	8004d20 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8004d02:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff f98c 	bl	8004030 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f9ed 	bl	80050f8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8004d1e:	e042      	b.n	8004da6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8004d20:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d02a      	beq.n	8004d84 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff f97a 	bl	8004030 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff f953 	bl	8003ff8 <USBD_SetClassConfig>
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8ff 	bl	8004f62 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff f95f 	bl	8004030 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8004d7a:	e014      	b.n	8004da6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f9bb 	bl	80050f8 <USBD_CtlSendStatus>
    break;
 8004d82:	e010      	b.n	8004da6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9b7 	bl	80050f8 <USBD_CtlSendStatus>
    break;
 8004d8a:	e00c      	b.n	8004da6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8e7 	bl	8004f62 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <USBD_SetConfig+0x144>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff f948 	bl	8004030 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8004da0:	2303      	movs	r3, #3
 8004da2:	73fb      	strb	r3, [r7, #15]
    break;
 8004da4:	bf00      	nop
  }

  return ret;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200014ec 	.word	0x200014ec

08004db4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	88db      	ldrh	r3, [r3, #6]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d004      	beq.n	8004dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8ca 	bl	8004f62 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8004dce:	e022      	b.n	8004e16 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	dc02      	bgt.n	8004de0 <USBD_GetConfig+0x2c>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dc03      	bgt.n	8004de6 <USBD_GetConfig+0x32>
 8004dde:	e015      	b.n	8004e0c <USBD_GetConfig+0x58>
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d00b      	beq.n	8004dfc <USBD_GetConfig+0x48>
 8004de4:	e012      	b.n	8004e0c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3308      	adds	r3, #8
 8004df0:	2201      	movs	r2, #1
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f925 	bl	8005044 <USBD_CtlSendData>
      break;
 8004dfa:	e00c      	b.n	8004e16 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	2201      	movs	r2, #1
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f91d 	bl	8005044 <USBD_CtlSendData>
      break;
 8004e0a:	e004      	b.n	8004e16 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8a7 	bl	8004f62 <USBD_CtlError>
      break;
 8004e14:	bf00      	nop
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d81e      	bhi.n	8004e72 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	88db      	ldrh	r3, [r3, #6]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d004      	beq.n	8004e46 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f88f 	bl	8004f62 <USBD_CtlError>
      break;
 8004e44:	e01a      	b.n	8004e7c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	330c      	adds	r3, #12
 8004e66:	2202      	movs	r2, #2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8ea 	bl	8005044 <USBD_CtlSendData>
    break;
 8004e70:	e004      	b.n	8004e7c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f874 	bl	8004f62 <USBD_CtlError>
    break;
 8004e7a:	bf00      	nop
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	885b      	ldrh	r3, [r3, #2]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f92a 	bl	80050f8 <USBD_CtlSendStatus>
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d80b      	bhi.n	8004eda <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	885b      	ldrh	r3, [r3, #2]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10c      	bne.n	8004ee4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f910 	bl	80050f8 <USBD_CtlSendStatus>
      }
      break;
 8004ed8:	e004      	b.n	8004ee4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f840 	bl	8004f62 <USBD_CtlError>
      break;
 8004ee2:	e000      	b.n	8004ee6 <USBD_ClrFeature+0x3a>
      break;
 8004ee4:	bf00      	nop
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fac6 	bl	80044aa <SWAPBYTE>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fab9 	bl	80044aa <SWAPBYTE>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff faac 	bl	80044aa <SWAPBYTE>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461a      	mov	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	80da      	strh	r2, [r3, #6]
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 f926 	bl	80061c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004f74:	2100      	movs	r1, #0
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 f922 	bl	80061c0 <USBD_LL_StallEP>
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d036      	beq.n	8005008 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004f9e:	6938      	ldr	r0, [r7, #16]
 8004fa0:	f000 f836 	bl	8005010 <USBD_GetLen>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	2203      	movs	r2, #3
 8004fcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8004fd4:	e013      	b.n	8004ffe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	4413      	add	r3, r2
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
    idx++;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	3301      	adds	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
    idx++;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e7      	bne.n	8004fd6 <USBD_GetString+0x52>
 8005006:	e000      	b.n	800500a <USBD_GetString+0x86>
    return;
 8005008:	bf00      	nop
  }
}
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005020:	e005      	b.n	800502e <USBD_GetLen+0x1e>
  {
    len++;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	3301      	adds	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3301      	adds	r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f5      	bne.n	8005022 <USBD_GetLen+0x12>
  }

  return len;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	2100      	movs	r1, #0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f001 f931 	bl	80062d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	2100      	movs	r1, #0
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 f920 	bl	80062d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2203      	movs	r2, #3
 80050ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	2100      	movs	r1, #0
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f001 f924 	bl	8006314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	2100      	movs	r1, #0
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f001 f913 	bl	8006314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2204      	movs	r2, #4
 8005104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005108:	2300      	movs	r3, #0
 800510a:	2200      	movs	r2, #0
 800510c:	2100      	movs	r1, #0
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 f8df 	bl	80062d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2205      	movs	r2, #5
 800512a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800512e:	2300      	movs	r3, #0
 8005130:	2200      	movs	r2, #0
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 f8ed 	bl	8006314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005148:	2200      	movs	r2, #0
 800514a:	4912      	ldr	r1, [pc, #72]	; (8005194 <MX_USB_DEVICE_Init+0x50>)
 800514c:	4812      	ldr	r0, [pc, #72]	; (8005198 <MX_USB_DEVICE_Init+0x54>)
 800514e:	f7fe fee5 	bl	8003f1c <USBD_Init>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005158:	f7fc f82a 	bl	80011b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800515c:	490f      	ldr	r1, [pc, #60]	; (800519c <MX_USB_DEVICE_Init+0x58>)
 800515e:	480e      	ldr	r0, [pc, #56]	; (8005198 <MX_USB_DEVICE_Init+0x54>)
 8005160:	f7fe ff12 	bl	8003f88 <USBD_RegisterClass>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800516a:	f7fc f821 	bl	80011b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800516e:	490c      	ldr	r1, [pc, #48]	; (80051a0 <MX_USB_DEVICE_Init+0x5c>)
 8005170:	4809      	ldr	r0, [pc, #36]	; (8005198 <MX_USB_DEVICE_Init+0x54>)
 8005172:	f000 fa81 	bl	8005678 <USBD_CDC_RegisterInterface>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800517c:	f7fc f818 	bl	80011b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005180:	4805      	ldr	r0, [pc, #20]	; (8005198 <MX_USB_DEVICE_Init+0x54>)
 8005182:	f7fe ff22 	bl	8003fca <USBD_Start>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800518c:	f7fc f810 	bl	80011b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005190:	bf00      	nop
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000198 	.word	0x20000198
 8005198:	20001ba4 	.word	0x20001ba4
 800519c:	20000074 	.word	0x20000074
 80051a0:	20000184 	.word	0x20000184

080051a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80051b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80051b4:	f006 ffdc 	bl	800c170 <malloc>
 80051b8:	4603      	mov	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80051ca:	2302      	movs	r3, #2
 80051cc:	e066      	b.n	800529c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7c1b      	ldrb	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d119      	bne.n	8005212 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e2:	2202      	movs	r2, #2
 80051e4:	2181      	movs	r1, #129	; 0x81
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 ffa5 	bl	8006136 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f6:	2202      	movs	r2, #2
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 ff9b 	bl	8006136 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2210      	movs	r2, #16
 800520c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005210:	e016      	b.n	8005240 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	2202      	movs	r2, #2
 8005216:	2181      	movs	r1, #129	; 0x81
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 ff8c 	bl	8006136 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	2202      	movs	r2, #2
 8005228:	2101      	movs	r1, #1
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 ff83 	bl	8006136 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2210      	movs	r2, #16
 800523c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005240:	2308      	movs	r3, #8
 8005242:	2203      	movs	r2, #3
 8005244:	2182      	movs	r1, #130	; 0x82
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 ff75 	bl	8006136 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7c1b      	ldrb	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800527c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005280:	2101      	movs	r1, #1
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 f846 	bl	8006314 <USBD_LL_PrepareReceive>
 8005288:	e007      	b.n	800529a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	2101      	movs	r1, #1
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f83d 	bl	8006314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052b4:	2181      	movs	r1, #129	; 0x81
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 ff63 	bl	8006182 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052c2:	2101      	movs	r1, #1
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 ff5c 	bl	8006182 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052d2:	2182      	movs	r1, #130	; 0x82
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ff54 	bl	8006182 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005304:	4618      	mov	r0, r3
 8005306:	f006 ff3b 	bl	800c180 <free>
    pdev->pClassData = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800532c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005342:	2b00      	cmp	r3, #0
 8005344:	d03a      	beq.n	80053bc <USBD_CDC_Setup+0xa0>
 8005346:	2b20      	cmp	r3, #32
 8005348:	f040 8097 	bne.w	800547a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	88db      	ldrh	r3, [r3, #6]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d029      	beq.n	80053a8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b25b      	sxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	da11      	bge.n	8005382 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800536a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	88d2      	ldrh	r2, [r2, #6]
 8005370:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005372:	6939      	ldr	r1, [r7, #16]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	88db      	ldrh	r3, [r3, #6]
 8005378:	461a      	mov	r2, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fe62 	bl	8005044 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005380:	e082      	b.n	8005488 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	785a      	ldrb	r2, [r3, #1]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	88db      	ldrh	r3, [r3, #6]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005398:	6939      	ldr	r1, [r7, #16]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	461a      	mov	r2, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fe7b 	bl	800509c <USBD_CtlPrepareRx>
    break;
 80053a6:	e06f      	b.n	8005488 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	7850      	ldrb	r0, [r2, #1]
 80053b4:	2200      	movs	r2, #0
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	4798      	blx	r3
    break;
 80053ba:	e065      	b.n	8005488 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b0b      	cmp	r3, #11
 80053c2:	d84f      	bhi.n	8005464 <USBD_CDC_Setup+0x148>
 80053c4:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <USBD_CDC_Setup+0xb0>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	08005473 	.word	0x08005473
 80053d4:	08005465 	.word	0x08005465
 80053d8:	08005465 	.word	0x08005465
 80053dc:	08005465 	.word	0x08005465
 80053e0:	08005465 	.word	0x08005465
 80053e4:	08005465 	.word	0x08005465
 80053e8:	08005465 	.word	0x08005465
 80053ec:	08005465 	.word	0x08005465
 80053f0:	08005465 	.word	0x08005465
 80053f4:	08005425 	.word	0x08005425
 80053f8:	0800544d 	.word	0x0800544d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005402:	2b03      	cmp	r3, #3
 8005404:	d107      	bne.n	8005416 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005406:	f107 030c 	add.w	r3, r7, #12
 800540a:	2202      	movs	r2, #2
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fe18 	bl	8005044 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005414:	e030      	b.n	8005478 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fda2 	bl	8004f62 <USBD_CtlError>
        ret = USBD_FAIL;
 800541e:	2303      	movs	r3, #3
 8005420:	75fb      	strb	r3, [r7, #23]
      break;
 8005422:	e029      	b.n	8005478 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542a:	2b03      	cmp	r3, #3
 800542c:	d107      	bne.n	800543e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800542e:	f107 030f 	add.w	r3, r7, #15
 8005432:	2201      	movs	r2, #1
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fe04 	bl	8005044 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800543c:	e01c      	b.n	8005478 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fd8e 	bl	8004f62 <USBD_CtlError>
        ret = USBD_FAIL;
 8005446:	2303      	movs	r3, #3
 8005448:	75fb      	strb	r3, [r7, #23]
      break;
 800544a:	e015      	b.n	8005478 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005452:	2b03      	cmp	r3, #3
 8005454:	d00f      	beq.n	8005476 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fd82 	bl	8004f62 <USBD_CtlError>
        ret = USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005462:	e008      	b.n	8005476 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fd7b 	bl	8004f62 <USBD_CtlError>
      ret = USBD_FAIL;
 800546c:	2303      	movs	r3, #3
 800546e:	75fb      	strb	r3, [r7, #23]
      break;
 8005470:	e002      	b.n	8005478 <USBD_CDC_Setup+0x15c>
      break;
 8005472:	bf00      	nop
 8005474:	e008      	b.n	8005488 <USBD_CDC_Setup+0x16c>
      break;
 8005476:	bf00      	nop
    }
    break;
 8005478:	e006      	b.n	8005488 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fd70 	bl	8004f62 <USBD_CtlError>
    ret = USBD_FAIL;
 8005482:	2303      	movs	r3, #3
 8005484:	75fb      	strb	r3, [r7, #23]
    break;
 8005486:	bf00      	nop
  }

  return (uint8_t)ret;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80054a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e049      	b.n	800554a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	3318      	adds	r3, #24
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d029      	beq.n	8005528 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3318      	adds	r3, #24
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	78f9      	ldrb	r1, [r7, #3]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	460b      	mov	r3, r1
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	1a5b      	subs	r3, r3, r1
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	3344      	adds	r3, #68	; 0x44
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80054fc:	fb03 f301 	mul.w	r3, r3, r1
 8005500:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005502:	2b00      	cmp	r3, #0
 8005504:	d110      	bne.n	8005528 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3318      	adds	r3, #24
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800551a:	78f9      	ldrb	r1, [r7, #3]
 800551c:	2300      	movs	r3, #0
 800551e:	2200      	movs	r2, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fed6 	bl	80062d2 <USBD_LL_Transmit>
 8005526:	e00f      	b.n	8005548 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005564:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005570:	2303      	movs	r3, #3
 8005572:	e015      	b.n	80055a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 feec 	bl	8006356 <USBD_LL_GetRxDataSize>
 800557e:	4602      	mov	r2, r0
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800559a:	4611      	mov	r1, r2
 800559c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <USBD_CDC_EP0_RxReady+0x46>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055c8:	2bff      	cmp	r3, #255	; 0xff
 80055ca:	d010      	beq.n	80055ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80055da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055e2:	b292      	uxth	r2, r2
 80055e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	22ff      	movs	r2, #255	; 0xff
 80055ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2243      	movs	r2, #67	; 0x43
 8005604:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005606:	4b03      	ldr	r3, [pc, #12]	; (8005614 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	200000f0 	.word	0x200000f0

08005618 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2243      	movs	r2, #67	; 0x43
 8005624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005626:	4b03      	ldr	r3, [pc, #12]	; (8005634 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	200000ac 	.word	0x200000ac

08005638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2243      	movs	r2, #67	; 0x43
 8005644:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005646:	4b03      	ldr	r3, [pc, #12]	; (8005654 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000134 	.word	0x20000134

08005658 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	220a      	movs	r2, #10
 8005664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000068 	.word	0x20000068

08005678 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005688:	2303      	movs	r3, #3
 800568a:	e004      	b.n	8005696 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800570a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800571a:	2303      	movs	r3, #3
 800571c:	e01a      	b.n	8005754 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005724:	2b00      	cmp	r3, #0
 8005726:	d114      	bne.n	8005752 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2201      	movs	r2, #1
 800572c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005746:	2181      	movs	r1, #129	; 0x81
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fdc2 	bl	80062d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005776:	2303      	movs	r3, #3
 8005778:	e016      	b.n	80057a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7c1b      	ldrb	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fdc0 	bl	8006314 <USBD_LL_PrepareReceive>
 8005794:	e007      	b.n	80057a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	2101      	movs	r1, #1
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fdb7 	bl	8006314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <cdcAvailable>:
bool rx_full = false;



uint32_t cdcAvailable(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <cdcAvailable+0x30>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <cdcAvailable+0x34>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <cdcAvailable+0x38>)
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c8:	fb02 f201 	mul.w	r2, r2, r1
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	607b      	str	r3, [r7, #4]

  return ret;
 80057d0:	687b      	ldr	r3, [r7, #4]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	200014f0 	.word	0x200014f0
 80057e4:	200014f4 	.word	0x200014f4
 80057e8:	20000180 	.word	0x20000180

080057ec <cdcRead>:

uint8_t cdcRead(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <cdcRead+0x44>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <cdcRead+0x48>)
 80057f8:	5cd3      	ldrb	r3, [r2, r3]
 80057fa:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <cdcRead+0x44>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <cdcRead+0x4c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d00b      	beq.n	8005820 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <cdcRead+0x44>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <cdcRead+0x50>)
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	fbb3 f1f2 	udiv	r1, r3, r2
 8005816:	fb02 f201 	mul.w	r2, r2, r1
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	4a04      	ldr	r2, [pc, #16]	; (8005830 <cdcRead+0x44>)
 800581e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005820:	79fb      	ldrb	r3, [r7, #7]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	200014f4 	.word	0x200014f4
 8005834:	20002674 	.word	0x20002674
 8005838:	200014f0 	.word	0x200014f0
 800583c:	20000180 	.word	0x20000180

08005840 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <cdcDataIn+0x48>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	490f      	ldr	r1, [pc, #60]	; (800588c <cdcDataIn+0x4c>)
 8005850:	79fa      	ldrb	r2, [r7, #7]
 8005852:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len; // limit 512
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <cdcDataIn+0x48>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <cdcDataIn+0x50>)
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005862:	fb02 f201 	mul.w	r2, r2, r1
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <cdcDataIn+0x54>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	429a      	cmp	r2, r3
 8005872:	d002      	beq.n	800587a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in; // update index
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <cdcDataIn+0x48>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6013      	str	r3, [r2, #0]
  }
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	200014f0 	.word	0x200014f0
 800588c:	20002674 	.word	0x20002674
 8005890:	20000180 	.word	0x20000180
 8005894:	200014f4 	.word	0x200014f4

08005898 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 80058a2:	f7fb fbfc 	bl	800109e <millis>
 80058a6:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f956 	bl	8005b60 <CDC_Transmit_FS>
 80058b4:	4603      	mov	r3, r0
 80058b6:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 80058b8:	7afb      	ldrb	r3, [r7, #11]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <cdcWrite+0x2a>
    {
      return length;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	e00e      	b.n	80058e0 <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d101      	bne.n	80058cc <cdcWrite+0x34>
    {
      return 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e009      	b.n	80058e0 <cdcWrite+0x48>
    }

    if (millis()-pre_time >= 100)
 80058cc:	f7fb fbe7 	bl	800109e <millis>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b63      	cmp	r3, #99	; 0x63
 80058d8:	d800      	bhi.n	80058dc <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 80058da:	e7e5      	b.n	80058a8 <cdcWrite+0x10>
    {
      break;
 80058dc:	bf00      	nop
    }
  }

  return 0;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <cdcGetBaud+0x14>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000178 	.word	0x20000178

08005900 <USBD_CDC_SOF>:

uint32_t sof_cnt = 0;

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

 // sof_cnt++;

  if(rx_full == true)
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <USBD_CDC_SOF+0x3c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;
    	// check receive buff size //
      buf_len = (rx_len - cdcAvailable()) - 1;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <USBD_CDC_SOF+0x40>)
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	f7ff ff4c 	bl	80057b0 <cdcAvailable>
 8005918:	4603      	mov	r3, r0
 800591a:	1ae3      	subs	r3, r4, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
      if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b3f      	cmp	r3, #63	; 0x3f
 8005924:	d905      	bls.n	8005932 <USBD_CDC_SOF+0x32>
      {
      	// request next data //
        USBD_CDC_ReceivePacket(pdev);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff18 	bl	800575c <USBD_CDC_ReceivePacket>
        rx_full = false;
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <USBD_CDC_SOF+0x3c>)
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
      }
  }


  return 0;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}
 800593c:	200014f8 	.word	0x200014f8
 8005940:	20000180 	.word	0x20000180

08005944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005948:	2200      	movs	r2, #0
 800594a:	4905      	ldr	r1, [pc, #20]	; (8005960 <CDC_Init_FS+0x1c>)
 800594c:	4805      	ldr	r0, [pc, #20]	; (8005964 <CDC_Init_FS+0x20>)
 800594e:	f7ff fea8 	bl	80056a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005952:	4905      	ldr	r1, [pc, #20]	; (8005968 <CDC_Init_FS+0x24>)
 8005954:	4803      	ldr	r0, [pc, #12]	; (8005964 <CDC_Init_FS+0x20>)
 8005956:	f7ff febd 	bl	80056d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800595a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20002274 	.word	0x20002274
 8005964:	20001ba4 	.word	0x20001ba4
 8005968:	20001e74 	.word	0x20001e74

0800596c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005970:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	6039      	str	r1, [r7, #0]
 8005986:	71fb      	strb	r3, [r7, #7]
 8005988:	4613      	mov	r3, r2
 800598a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	2b23      	cmp	r3, #35	; 0x23
 8005990:	f200 80a3 	bhi.w	8005ada <CDC_Control_FS+0x15e>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <CDC_Control_FS+0x20>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	08005adb 	.word	0x08005adb
 80059a0:	08005adb 	.word	0x08005adb
 80059a4:	08005adb 	.word	0x08005adb
 80059a8:	08005adb 	.word	0x08005adb
 80059ac:	08005adb 	.word	0x08005adb
 80059b0:	08005adb 	.word	0x08005adb
 80059b4:	08005adb 	.word	0x08005adb
 80059b8:	08005adb 	.word	0x08005adb
 80059bc:	08005adb 	.word	0x08005adb
 80059c0:	08005adb 	.word	0x08005adb
 80059c4:	08005adb 	.word	0x08005adb
 80059c8:	08005adb 	.word	0x08005adb
 80059cc:	08005adb 	.word	0x08005adb
 80059d0:	08005adb 	.word	0x08005adb
 80059d4:	08005adb 	.word	0x08005adb
 80059d8:	08005adb 	.word	0x08005adb
 80059dc:	08005adb 	.word	0x08005adb
 80059e0:	08005adb 	.word	0x08005adb
 80059e4:	08005adb 	.word	0x08005adb
 80059e8:	08005adb 	.word	0x08005adb
 80059ec:	08005adb 	.word	0x08005adb
 80059f0:	08005adb 	.word	0x08005adb
 80059f4:	08005adb 	.word	0x08005adb
 80059f8:	08005adb 	.word	0x08005adb
 80059fc:	08005adb 	.word	0x08005adb
 8005a00:	08005adb 	.word	0x08005adb
 8005a04:	08005adb 	.word	0x08005adb
 8005a08:	08005adb 	.word	0x08005adb
 8005a0c:	08005adb 	.word	0x08005adb
 8005a10:	08005adb 	.word	0x08005adb
 8005a14:	08005adb 	.word	0x08005adb
 8005a18:	08005adb 	.word	0x08005adb
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005a87 	.word	0x08005a87
 8005a24:	08005adb 	.word	0x08005adb
 8005a28:	08005adb 	.word	0x08005adb
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <CDC_Control_FS+0x170>)
 8005a34:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 8005a36:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <CDC_Control_FS+0x170>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	0212      	lsls	r2, r2, #8
 8005a42:	4313      	orrs	r3, r2
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <CDC_Control_FS+0x170>)
 8005a46:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 8005a48:	4b28      	ldr	r3, [pc, #160]	; (8005aec <CDC_Control_FS+0x170>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	3202      	adds	r2, #2
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	0412      	lsls	r2, r2, #16
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a25      	ldr	r2, [pc, #148]	; (8005aec <CDC_Control_FS+0x170>)
 8005a58:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <CDC_Control_FS+0x170>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	3203      	adds	r2, #3
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	0612      	lsls	r2, r2, #24
 8005a66:	4313      	orrs	r3, r2
 8005a68:	4a20      	ldr	r2, [pc, #128]	; (8005aec <CDC_Control_FS+0x170>)
 8005a6a:	6013      	str	r3, [r2, #0]
      LineCoding.format     =  pbuf[4];
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	791a      	ldrb	r2, [r3, #4]
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <CDC_Control_FS+0x170>)
 8005a72:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype =  pbuf[5];
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	795a      	ldrb	r2, [r3, #5]
 8005a78:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <CDC_Control_FS+0x170>)
 8005a7a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   =  pbuf[6];
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	799a      	ldrb	r2, [r3, #6]
 8005a80:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <CDC_Control_FS+0x170>)
 8005a82:	719a      	strb	r2, [r3, #6]
    break;
 8005a84:	e02a      	b.n	8005adc <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005a86:	4b19      	ldr	r3, [pc, #100]	; (8005aec <CDC_Control_FS+0x170>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
			pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8005a90:	4b16      	ldr	r3, [pc, #88]	; (8005aec <CDC_Control_FS+0x170>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	0a1a      	lsrs	r2, r3, #8
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
			pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <CDC_Control_FS+0x170>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	0c1a      	lsrs	r2, r3, #16
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	3302      	adds	r3, #2
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
			pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <CDC_Control_FS+0x170>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0e1a      	lsrs	r2, r3, #24
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	3303      	adds	r3, #3
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
			pbuf[4] = LineCoding.format;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4a0b      	ldr	r2, [pc, #44]	; (8005aec <CDC_Control_FS+0x170>)
 8005ac0:	7912      	ldrb	r2, [r2, #4]
 8005ac2:	701a      	strb	r2, [r3, #0]
			pbuf[5] = LineCoding.paritytype;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	3305      	adds	r3, #5
 8005ac8:	4a08      	ldr	r2, [pc, #32]	; (8005aec <CDC_Control_FS+0x170>)
 8005aca:	7952      	ldrb	r2, [r2, #5]
 8005acc:	701a      	strb	r2, [r3, #0]
			pbuf[6] = LineCoding.datatype;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3306      	adds	r3, #6
 8005ad2:	4a06      	ldr	r2, [pc, #24]	; (8005aec <CDC_Control_FS+0x170>)
 8005ad4:	7992      	ldrb	r2, [r2, #6]
 8005ad6:	701a      	strb	r2, [r3, #0]

    break;
 8005ad8:	e000      	b.n	8005adc <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ada:	bf00      	nop
  }

  return (USBD_OK);
 8005adc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000178 	.word	0x20000178

08005af0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for (int i=0; i<*Len; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e009      	b.n	8005b14 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fe99 	bl	8005840 <cdcDataIn>
  for (int i=0; i<*Len; i++)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d8f0      	bhi.n	8005b00 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;
  // check receive buff size //
  buf_len = (rx_len - cdcAvailable()) - 1;
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <CDC_Receive_FS+0x64>)
 8005b20:	681c      	ldr	r4, [r3, #0]
 8005b22:	f7ff fe45 	bl	80057b0 <cdcAvailable>
 8005b26:	4603      	mov	r3, r0
 8005b28:	1ae3      	subs	r3, r4, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	60bb      	str	r3, [r7, #8]
  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b3f      	cmp	r3, #63	; 0x3f
 8005b32:	d907      	bls.n	8005b44 <CDC_Receive_FS+0x54>
  {
    // request next data //
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4808      	ldr	r0, [pc, #32]	; (8005b58 <CDC_Receive_FS+0x68>)
 8005b38:	f7ff fdcc 	bl	80056d4 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005b3c:	4806      	ldr	r0, [pc, #24]	; (8005b58 <CDC_Receive_FS+0x68>)
 8005b3e:	f7ff fe0d 	bl	800575c <USBD_CDC_ReceivePacket>
 8005b42:	e002      	b.n	8005b4a <CDC_Receive_FS+0x5a>
  }
  else
  {
    // full buf. wait time //
    rx_full = true;
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <CDC_Receive_FS+0x6c>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 8005b4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}
 8005b54:	20000180 	.word	0x20000180
 8005b58:	20001ba4 	.word	0x20001ba4
 8005b5c:	200014f8 	.word	0x200014f8

08005b60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <CDC_Transmit_FS+0x48>)
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e00b      	b.n	8005b9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b86:	887b      	ldrh	r3, [r7, #2]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4806      	ldr	r0, [pc, #24]	; (8005ba8 <CDC_Transmit_FS+0x48>)
 8005b8e:	f7ff fd88 	bl	80056a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b92:	4805      	ldr	r0, [pc, #20]	; (8005ba8 <CDC_Transmit_FS+0x48>)
 8005b94:	f7ff fdb2 	bl	80056fc <USBD_CDC_TransmitPacket>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20001ba4 	.word	0x20001ba4

08005bac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2212      	movs	r2, #18
 8005be0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	200001b4 	.word	0x200001b4

08005bf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2204      	movs	r2, #4
 8005c04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	200001c8 	.word	0x200001c8

08005c18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	6039      	str	r1, [r7, #0]
 8005c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8005c2e:	4808      	ldr	r0, [pc, #32]	; (8005c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c30:	f7ff f9a8 	bl	8004f84 <USBD_GetString>
 8005c34:	e004      	b.n	8005c40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	4904      	ldr	r1, [pc, #16]	; (8005c4c <USBD_FS_ProductStrDescriptor+0x34>)
 8005c3a:	4805      	ldr	r0, [pc, #20]	; (8005c50 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c3c:	f7ff f9a2 	bl	8004f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200026f4 	.word	0x200026f4
 8005c50:	0800f9d4 	.word	0x0800f9d4

08005c54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	6039      	str	r1, [r7, #0]
 8005c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	4904      	ldr	r1, [pc, #16]	; (8005c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c64:	4804      	ldr	r0, [pc, #16]	; (8005c78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c66:	f7ff f98d 	bl	8004f84 <USBD_GetString>
  return USBD_StrDesc;
 8005c6a:	4b02      	ldr	r3, [pc, #8]	; (8005c74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200026f4 	.word	0x200026f4
 8005c78:	0800f9ec 	.word	0x0800f9ec

08005c7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	221a      	movs	r2, #26
 8005c8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c8e:	f000 f843 	bl	8005d18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c92:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	200001cc 	.word	0x200001cc

08005ca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4907      	ldr	r1, [pc, #28]	; (8005cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005cb6:	4808      	ldr	r0, [pc, #32]	; (8005cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cb8:	f7ff f964 	bl	8004f84 <USBD_GetString>
 8005cbc:	e004      	b.n	8005cc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4904      	ldr	r1, [pc, #16]	; (8005cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cc4:	f7ff f95e 	bl	8004f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200026f4 	.word	0x200026f4
 8005cd8:	0800fa00 	.word	0x0800fa00

08005cdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d105      	bne.n	8005cfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4907      	ldr	r1, [pc, #28]	; (8005d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cf2:	4808      	ldr	r0, [pc, #32]	; (8005d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cf4:	f7ff f946 	bl	8004f84 <USBD_GetString>
 8005cf8:	e004      	b.n	8005d04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	4904      	ldr	r1, [pc, #16]	; (8005d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cfe:	4805      	ldr	r0, [pc, #20]	; (8005d14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d00:	f7ff f940 	bl	8004f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200026f4 	.word	0x200026f4
 8005d14:	0800fa0c 	.word	0x0800fa0c

08005d18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <Get_SerialNum+0x44>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <Get_SerialNum+0x48>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <Get_SerialNum+0x4c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d3e:	2208      	movs	r2, #8
 8005d40:	4909      	ldr	r1, [pc, #36]	; (8005d68 <Get_SerialNum+0x50>)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f814 	bl	8005d70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d48:	2204      	movs	r2, #4
 8005d4a:	4908      	ldr	r1, [pc, #32]	; (8005d6c <Get_SerialNum+0x54>)
 8005d4c:	68b8      	ldr	r0, [r7, #8]
 8005d4e:	f000 f80f 	bl	8005d70 <IntToUnicode>
  }
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	1fff7a10 	.word	0x1fff7a10
 8005d60:	1fff7a14 	.word	0x1fff7a14
 8005d64:	1fff7a18 	.word	0x1fff7a18
 8005d68:	200001ce 	.word	0x200001ce
 8005d6c:	200001de 	.word	0x200001de

08005d70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e027      	b.n	8005dd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0f1b      	lsrs	r3, r3, #28
 8005d8c:	2b09      	cmp	r3, #9
 8005d8e:	d80b      	bhi.n	8005da8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	0f1b      	lsrs	r3, r3, #28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	440b      	add	r3, r1
 8005da0:	3230      	adds	r2, #48	; 0x30
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e00a      	b.n	8005dbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0f1b      	lsrs	r3, r3, #28
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4619      	mov	r1, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	440b      	add	r3, r1
 8005db8:	3237      	adds	r2, #55	; 0x37
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	3301      	adds	r3, #1
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
 8005dd8:	7dfa      	ldrb	r2, [r7, #23]
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3d3      	bcc.n	8005d88 <IntToUnicode+0x18>
  }
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e10:	d13a      	bne.n	8005e88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	6313      	str	r3, [r2, #48]	; 0x30
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	2302      	movs	r3, #2
 8005e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e40:	230a      	movs	r3, #10
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4812      	ldr	r0, [pc, #72]	; (8005e94 <HAL_PCD_MspInit+0xa4>)
 8005e4c:	f001 fba6 	bl	800759c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	6353      	str	r3, [r2, #52]	; 0x34
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <HAL_PCD_MspInit+0xa0>)
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2106      	movs	r1, #6
 8005e7c:	2043      	movs	r0, #67	; 0x43
 8005e7e:	f000 fc70 	bl	8006762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e82:	2043      	movs	r0, #67	; 0x43
 8005e84:	f000 fc89 	bl	800679a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40020000 	.word	0x40020000

08005e98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7fe f8d6 	bl	8004060 <USBD_LL_SetupStage>
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f7fe f910 	bl	800410a <USBD_LL_DataOutStage>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3348      	adds	r3, #72	; 0x48
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f7fe f959 	bl	80041d0 <USBD_LL_DataInStage>
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fa5d 	bl	80043f4 <USBD_LL_SOF>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d001      	beq.n	8005f5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005f56:	f7fb f92b 	bl	80011b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fa0a 	bl	800437e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe f9c3 	bl	80042fc <USBD_LL_Reset>
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fa05 	bl	800439e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <HAL_PCD_SuspendCallback+0x48>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	4a03      	ldr	r2, [pc, #12]	; (8005fc8 <HAL_PCD_SuspendCallback+0x48>)
 8005fba:	f043 0306 	orr.w	r3, r3, #6
 8005fbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	e000ed00 	.word	0xe000ed00

08005fcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe f9f4 	bl	80043c8 <USBD_LL_Resume>
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fa1f 	bl	8004442 <USBD_LL_IsoOUTIncomplete>
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fa00 	bl	8004428 <USBD_LL_IsoINIncomplete>
}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fa0c 	bl	800445c <USBD_LL_DevConnected>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fa09 	bl	8004472 <USBD_LL_DevDisconnected>
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d13c      	bne.n	80060f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006078:	4a20      	ldr	r2, [pc, #128]	; (80060fc <USBD_LL_Init+0x94>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <USBD_LL_Init+0x94>)
 8006084:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <USBD_LL_Init+0x94>)
 800608a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800608e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <USBD_LL_Init+0x94>)
 8006092:	2204      	movs	r2, #4
 8006094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <USBD_LL_Init+0x94>)
 8006098:	2202      	movs	r2, #2
 800609a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <USBD_LL_Init+0x94>)
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <USBD_LL_Init+0x94>)
 80060a4:	2202      	movs	r2, #2
 80060a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <USBD_LL_Init+0x94>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <USBD_LL_Init+0x94>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <USBD_LL_Init+0x94>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <USBD_LL_Init+0x94>)
 80060bc:	2200      	movs	r2, #0
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <USBD_LL_Init+0x94>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060c6:	480d      	ldr	r0, [pc, #52]	; (80060fc <USBD_LL_Init+0x94>)
 80060c8:	f001 fd1c 	bl	8007b04 <HAL_PCD_Init>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80060d2:	f7fb f86d 	bl	80011b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	4808      	ldr	r0, [pc, #32]	; (80060fc <USBD_LL_Init+0x94>)
 80060da:	f002 fe7a 	bl	8008dd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	2100      	movs	r1, #0
 80060e2:	4806      	ldr	r0, [pc, #24]	; (80060fc <USBD_LL_Init+0x94>)
 80060e4:	f002 fe2e 	bl	8008d44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	2101      	movs	r1, #1
 80060ec:	4803      	ldr	r0, [pc, #12]	; (80060fc <USBD_LL_Init+0x94>)
 80060ee:	f002 fe29 	bl	8008d44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200028f4 	.word	0x200028f4

08006100 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fe11 	bl	8007d3e <HAL_PCD_Start>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f92a 	bl	800637c <USBD_Get_USB_Status>
 8006128:	4603      	mov	r3, r0
 800612a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800612c:	7bbb      	ldrb	r3, [r7, #14]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	461a      	mov	r2, r3
 8006144:	4603      	mov	r3, r0
 8006146:	70fb      	strb	r3, [r7, #3]
 8006148:	460b      	mov	r3, r1
 800614a:	70bb      	strb	r3, [r7, #2]
 800614c:	4613      	mov	r3, r2
 800614e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800615e:	78bb      	ldrb	r3, [r7, #2]
 8006160:	883a      	ldrh	r2, [r7, #0]
 8006162:	78f9      	ldrb	r1, [r7, #3]
 8006164:	f002 f9f5 	bl	8008552 <HAL_PCD_EP_Open>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f904 	bl	800637c <USBD_Get_USB_Status>
 8006174:	4603      	mov	r3, r0
 8006176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006178:	7bbb      	ldrb	r3, [r7, #14]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 fa3e 	bl	8008622 <HAL_PCD_EP_Close>
 80061a6:	4603      	mov	r3, r0
 80061a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f8e5 	bl	800637c <USBD_Get_USB_Status>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f002 fb16 	bl	8008810 <HAL_PCD_EP_SetStall>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f8c6 	bl	800637c <USBD_Get_USB_Status>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f002 fb5b 	bl	80088d8 <HAL_PCD_EP_ClrStall>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 f8a7 	bl	800637c <USBD_Get_USB_Status>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006232:	7bbb      	ldrb	r3, [r7, #14]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800624e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	da0b      	bge.n	8006270 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	333e      	adds	r3, #62	; 0x3e
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	e00b      	b.n	8006288 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	4613      	mov	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006286:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062ae:	78fa      	ldrb	r2, [r7, #3]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f002 f928 	bl	8008508 <HAL_PCD_SetAddress>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f85c 	bl	800637c <USBD_Get_USB_Status>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	460b      	mov	r3, r1
 80062e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062f0:	7af9      	ldrb	r1, [r7, #11]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	f002 fa41 	bl	800877c <HAL_PCD_EP_Transmit>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f83b 	bl	800637c <USBD_Get_USB_Status>
 8006306:	4603      	mov	r3, r0
 8006308:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800630a:	7dbb      	ldrb	r3, [r7, #22]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	460b      	mov	r3, r1
 8006322:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006332:	7af9      	ldrb	r1, [r7, #11]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	f002 f9bd 	bl	80086b6 <HAL_PCD_EP_Receive>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f81a 	bl	800637c <USBD_Get_USB_Status>
 8006348:	4603      	mov	r3, r0
 800634a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800634c:	7dbb      	ldrb	r3, [r7, #22]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f002 f9ed 	bl	800874c <HAL_PCD_EP_GetRxCount>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d817      	bhi.n	80063c0 <USBD_Get_USB_Status+0x44>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <USBD_Get_USB_Status+0x1c>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063af 	.word	0x080063af
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063bb 	.word	0x080063bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
    break;
 80063ac:	e00b      	b.n	80063c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063ae:	2303      	movs	r3, #3
 80063b0:	73fb      	strb	r3, [r7, #15]
    break;
 80063b2:	e008      	b.n	80063c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
    break;
 80063b8:	e005      	b.n	80063c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063ba:	2303      	movs	r3, #3
 80063bc:	73fb      	strb	r3, [r7, #15]
    break;
 80063be:	e002      	b.n	80063c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063c0:	2303      	movs	r3, #3
 80063c2:	73fb      	strb	r3, [r7, #15]
    break;
 80063c4:	bf00      	nop
  }
  return usb_status;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0

	bspInit();
 80063d8:	f7fa fe2c 	bl	8001034 <bspInit>

	rtcInit();
 80063dc:	f7fc ff6c 	bl	80032b8 <rtcInit>
	resetInit();
 80063e0:	f7fc ff32 	bl	8003248 <resetInit>

	cliInit();
 80063e4:	f7fb f9b4 	bl	8001750 <cliInit>
	ledInit();
 80063e8:	f7fc fd46 	bl	8002e78 <ledInit>
  logInit();
 80063ec:	f7fc fd7e 	bl	8002eec <logInit>

  logPrintf("[ Firmware Begin... ]\r\n");
 80063f0:	480c      	ldr	r0, [pc, #48]	; (8006424 <hwInit+0x50>)
 80063f2:	f7fc fe1b 	bl	800302c <logPrintf>
  logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 80063f6:	490c      	ldr	r1, [pc, #48]	; (8006428 <hwInit+0x54>)
 80063f8:	480c      	ldr	r0, [pc, #48]	; (800642c <hwInit+0x58>)
 80063fa:	f7fc fe17 	bl	800302c <logPrintf>
  logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 80063fe:	490c      	ldr	r1, [pc, #48]	; (8006430 <hwInit+0x5c>)
 8006400:	480c      	ldr	r0, [pc, #48]	; (8006434 <hwInit+0x60>)
 8006402:	f7fc fe13 	bl	800302c <logPrintf>

	usbInit();
 8006406:	f7fd fd37 	bl	8003e78 <usbInit>

	flashInit();
 800640a:	f7fc f90d 	bl	8002628 <flashInit>

	uartInit();
 800640e:	f7fc ffb5 	bl	800337c <uartInit>

	buttonInit();
 8006412:	f7fb f8db 	bl	80015cc <buttonInit>

	gpioInit();
 8006416:	f7fc fb27 	bl	8002a68 <gpioInit>


	logBoot(false); // END Boot log //
 800641a:	2000      	movs	r0, #0
 800641c:	f7fc fda0 	bl	8002f60 <logBoot>

}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	0800fa1c 	.word	0x0800fa1c
 8006428:	0800fa34 	.word	0x0800fa34
 800642c:	0800fa40 	.word	0x0800fa40
 8006430:	0800fa58 	.word	0x0800fa58
 8006434:	0800fa64 	.word	0x0800fa64

08006438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800643c:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <HAL_Init+0x40>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0d      	ldr	r2, [pc, #52]	; (8006478 <HAL_Init+0x40>)
 8006442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_Init+0x40>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <HAL_Init+0x40>)
 800644e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <HAL_Init+0x40>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a07      	ldr	r2, [pc, #28]	; (8006478 <HAL_Init+0x40>)
 800645a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006460:	2003      	movs	r0, #3
 8006462:	f000 f973 	bl	800674c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006466:	2000      	movs	r0, #0
 8006468:	f000 f808 	bl	800647c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800646c:	f7fa fea8 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40023c00 	.word	0x40023c00

0800647c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <HAL_InitTick+0x54>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_InitTick+0x58>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006492:	fbb3 f3f1 	udiv	r3, r3, r1
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f999 	bl	80067d2 <HAL_SYSTICK_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00e      	b.n	80064c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d80a      	bhi.n	80064c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064b0:	2200      	movs	r2, #0
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	f000 f953 	bl	8006762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064bc:	4a06      	ldr	r2, [pc, #24]	; (80064d8 <HAL_InitTick+0x5c>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000000 	.word	0x20000000
 80064d4:	200001ec 	.word	0x200001ec
 80064d8:	200001e8 	.word	0x200001e8

080064dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_IncTick+0x20>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_IncTick+0x24>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4413      	add	r3, r2
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <HAL_IncTick+0x24>)
 80064ee:	6013      	str	r3, [r2, #0]
}
 80064f0:	bf00      	nop
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	200001ec 	.word	0x200001ec
 8006500:	20002cfc 	.word	0x20002cfc

08006504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return uwTick;
 8006508:	4b03      	ldr	r3, [pc, #12]	; (8006518 <HAL_GetTick+0x14>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	20002cfc 	.word	0x20002cfc

0800651c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006524:	f7ff ffee 	bl	8006504 <HAL_GetTick>
 8006528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d005      	beq.n	8006542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006536:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <HAL_Delay+0x44>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006542:	bf00      	nop
 8006544:	f7ff ffde 	bl	8006504 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	429a      	cmp	r2, r3
 8006552:	d8f7      	bhi.n	8006544 <HAL_Delay+0x28>
  {
  }
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	200001ec 	.word	0x200001ec

08006564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006580:	4013      	ands	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800658c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	60d3      	str	r3, [r2, #12]
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	e000ed00 	.word	0xe000ed00

080065ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <__NVIC_GetPriorityGrouping+0x18>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	f003 0307 	and.w	r3, r3, #7
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	e000ed00 	.word	0xe000ed00

080065c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	db0b      	blt.n	80065f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	f003 021f 	and.w	r2, r3, #31
 80065e0:	4907      	ldr	r1, [pc, #28]	; (8006600 <__NVIC_EnableIRQ+0x38>)
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	2001      	movs	r0, #1
 80065ea:	fa00 f202 	lsl.w	r2, r0, r2
 80065ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	e000e100 	.word	0xe000e100

08006604 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	db12      	blt.n	800663c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	f003 021f 	and.w	r2, r3, #31
 800661c:	490a      	ldr	r1, [pc, #40]	; (8006648 <__NVIC_DisableIRQ+0x44>)
 800661e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2001      	movs	r0, #1
 8006626:	fa00 f202 	lsl.w	r2, r0, r2
 800662a:	3320      	adds	r3, #32
 800662c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006630:	f3bf 8f4f 	dsb	sy
}
 8006634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006636:	f3bf 8f6f 	isb	sy
}
 800663a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	e000e100 	.word	0xe000e100

0800664c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665c:	2b00      	cmp	r3, #0
 800665e:	db0a      	blt.n	8006676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	490c      	ldr	r1, [pc, #48]	; (8006698 <__NVIC_SetPriority+0x4c>)
 8006666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666a:	0112      	lsls	r2, r2, #4
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	440b      	add	r3, r1
 8006670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006674:	e00a      	b.n	800668c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4908      	ldr	r1, [pc, #32]	; (800669c <__NVIC_SetPriority+0x50>)
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	3b04      	subs	r3, #4
 8006684:	0112      	lsls	r2, r2, #4
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	440b      	add	r3, r1
 800668a:	761a      	strb	r2, [r3, #24]
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	e000e100 	.word	0xe000e100
 800669c:	e000ed00 	.word	0xe000ed00

080066a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b089      	sub	sp, #36	; 0x24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f1c3 0307 	rsb	r3, r3, #7
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	bf28      	it	cs
 80066be:	2304      	movcs	r3, #4
 80066c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	3304      	adds	r3, #4
 80066c6:	2b06      	cmp	r3, #6
 80066c8:	d902      	bls.n	80066d0 <NVIC_EncodePriority+0x30>
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3b03      	subs	r3, #3
 80066ce:	e000      	b.n	80066d2 <NVIC_EncodePriority+0x32>
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	43da      	mvns	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	401a      	ands	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066e8:	f04f 31ff 	mov.w	r1, #4294967295
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	fa01 f303 	lsl.w	r3, r1, r3
 80066f2:	43d9      	mvns	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f8:	4313      	orrs	r3, r2
         );
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3724      	adds	r7, #36	; 0x24
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006718:	d301      	bcc.n	800671e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800671a:	2301      	movs	r3, #1
 800671c:	e00f      	b.n	800673e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800671e:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <SysTick_Config+0x40>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3b01      	subs	r3, #1
 8006724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006726:	210f      	movs	r1, #15
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	f7ff ff8e 	bl	800664c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <SysTick_Config+0x40>)
 8006732:	2200      	movs	r2, #0
 8006734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <SysTick_Config+0x40>)
 8006738:	2207      	movs	r2, #7
 800673a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	e000e010 	.word	0xe000e010

0800674c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ff05 	bl	8006564 <__NVIC_SetPriorityGrouping>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af00      	add	r7, sp, #0
 8006768:	4603      	mov	r3, r0
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006774:	f7ff ff1a 	bl	80065ac <__NVIC_GetPriorityGrouping>
 8006778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	6978      	ldr	r0, [r7, #20]
 8006780:	f7ff ff8e 	bl	80066a0 <NVIC_EncodePriority>
 8006784:	4602      	mov	r2, r0
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678a:	4611      	mov	r1, r2
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff ff5d 	bl	800664c <__NVIC_SetPriority>
}
 8006792:	bf00      	nop
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	4603      	mov	r3, r0
 80067a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ff0d 	bl	80065c8 <__NVIC_EnableIRQ>
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	4603      	mov	r3, r0
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff ff1d 	bl	8006604 <__NVIC_DisableIRQ>
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ff94 	bl	8006708 <SysTick_Config>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067f8:	f7ff fe84 	bl	8006504 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e099      	b.n	800693c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006828:	e00f      	b.n	800684a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800682a:	f7ff fe6b 	bl	8006504 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b05      	cmp	r3, #5
 8006836:	d908      	bls.n	800684a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2203      	movs	r2, #3
 8006842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e078      	b.n	800693c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e8      	bne.n	800682a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4b38      	ldr	r3, [pc, #224]	; (8006944 <HAL_DMA_Init+0x158>)
 8006864:	4013      	ands	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800688e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d107      	bne.n	80068b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	4313      	orrs	r3, r2
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d117      	bne.n	800690e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 faef 	bl	8006ed4 <DMA_CheckFifoParam>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2240      	movs	r2, #64	; 0x40
 8006900:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800690a:	2301      	movs	r3, #1
 800690c:	e016      	b.n	800693c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 faa6 	bl	8006e68 <DMA_CalcBaseAndBitshift>
 800691c:	4603      	mov	r3, r0
 800691e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	223f      	movs	r2, #63	; 0x3f
 8006926:	409a      	lsls	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	f010803f 	.word	0xf010803f

08006948 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e050      	b.n	80069fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d101      	bne.n	800696a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
 8006968:	e048      	b.n	80069fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2200      	movs	r2, #0
 8006988:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2221      	movs	r2, #33	; 0x21
 80069a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa5c 	bl	8006e68 <DMA_CalcBaseAndBitshift>
 80069b0:	4603      	mov	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	223f      	movs	r2, #63	; 0x3f
 80069de:	409a      	lsls	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_DMA_Start_IT+0x26>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e040      	b.n	8006aac <HAL_DMA_Start_IT+0xa8>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d12f      	bne.n	8006a9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f9da 	bl	8006e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5c:	223f      	movs	r2, #63	; 0x3f
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0216 	orr.w	r2, r2, #22
 8006a72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0208 	orr.w	r2, r2, #8
 8006a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e005      	b.n	8006aaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e00c      	b.n	8006aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2205      	movs	r2, #5
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b04:	4b92      	ldr	r3, [pc, #584]	; (8006d50 <HAL_DMA_IRQHandler+0x258>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a92      	ldr	r2, [pc, #584]	; (8006d54 <HAL_DMA_IRQHandler+0x25c>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	0a9b      	lsrs	r3, r3, #10
 8006b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	2208      	movs	r2, #8
 8006b24:	409a      	lsls	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01a      	beq.n	8006b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d013      	beq.n	8006b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0204 	bic.w	r2, r2, #4
 8006b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	2208      	movs	r2, #8
 8006b52:	409a      	lsls	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b68:	2201      	movs	r2, #1
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d012      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b86:	2201      	movs	r2, #1
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f043 0202 	orr.w	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d012      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	f043 0204 	orr.w	r2, r3, #4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	409a      	lsls	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d043      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d03c      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d108      	bne.n	8006c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d024      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
 8006c26:	e01f      	b.n	8006c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
 8006c38:	e016      	b.n	8006c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d107      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0208 	bic.w	r2, r2, #8
 8006c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 808e 	beq.w	8006d96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8086 	beq.w	8006d96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8e:	2220      	movs	r2, #32
 8006c90:	409a      	lsls	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d136      	bne.n	8006d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0216 	bic.w	r2, r2, #22
 8006cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <HAL_DMA_IRQHandler+0x1da>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0208 	bic.w	r2, r2, #8
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	223f      	movs	r2, #63	; 0x3f
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d07d      	beq.n	8006e02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
        }
        return;
 8006d0e:	e078      	b.n	8006e02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01c      	beq.n	8006d58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d030      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
 8006d3c:	e02b      	b.n	8006d96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d027      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
 8006d4e:	e022      	b.n	8006d96 <HAL_DMA_IRQHandler+0x29e>
 8006d50:	20000000 	.word	0x20000000
 8006d54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0210 	bic.w	r2, r2, #16
 8006d74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d032      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d022      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2205      	movs	r2, #5
 8006dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d307      	bcc.n	8006dde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f2      	bne.n	8006dc2 <HAL_DMA_IRQHandler+0x2ca>
 8006ddc:	e000      	b.n	8006de0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006dde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	e000      	b.n	8006e04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006e02:	bf00      	nop
    }
  }
}
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop

08006e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d108      	bne.n	8006e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e4a:	e007      	b.n	8006e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
}
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	3b10      	subs	r3, #16
 8006e78:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <DMA_CalcBaseAndBitshift+0x64>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e82:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d909      	bls.n	8006eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ea8:	e007      	b.n	8006eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	aaaaaaab 	.word	0xaaaaaaab
 8006ed0:	0800fa94 	.word	0x0800fa94

08006ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d11f      	bne.n	8006f2e <DMA_CheckFifoParam+0x5a>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d856      	bhi.n	8006fa2 <DMA_CheckFifoParam+0xce>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <DMA_CheckFifoParam+0x28>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f1f 	.word	0x08006f1f
 8006f04:	08006f0d 	.word	0x08006f0d
 8006f08:	08006fa3 	.word	0x08006fa3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d046      	beq.n	8006fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f1c:	e043      	b.n	8006fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f26:	d140      	bne.n	8006faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f2c:	e03d      	b.n	8006faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f36:	d121      	bne.n	8006f7c <DMA_CheckFifoParam+0xa8>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d837      	bhi.n	8006fae <DMA_CheckFifoParam+0xda>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <DMA_CheckFifoParam+0x70>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f5b 	.word	0x08006f5b
 8006f4c:	08006f55 	.word	0x08006f55
 8006f50:	08006f6d 	.word	0x08006f6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]
      break;
 8006f58:	e030      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d025      	beq.n	8006fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f6a:	e022      	b.n	8006fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f74:	d11f      	bne.n	8006fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f7a:	e01c      	b.n	8006fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d903      	bls.n	8006f8a <DMA_CheckFifoParam+0xb6>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d003      	beq.n	8006f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f88:	e018      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8e:	e015      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa0:	e00b      	b.n	8006fba <DMA_CheckFifoParam+0xe6>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e00a      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e008      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;
 8006faa:	bf00      	nop
 8006fac:	e006      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
      break;
 8006fba:	bf00      	nop
    }
  } 
  
  return status; 
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop

08006fcc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <HAL_FLASH_Program+0xa0>)
 8006fe0:	7e1b      	ldrb	r3, [r3, #24]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_FLASH_Program+0x1e>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e03b      	b.n	8007062 <HAL_FLASH_Program+0x96>
 8006fea:	4b20      	ldr	r3, [pc, #128]	; (800706c <HAL_FLASH_Program+0xa0>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ff0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ff4:	f000 f870 	bl	80070d8 <FLASH_WaitForLastOperation>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d12b      	bne.n	800705a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007008:	783b      	ldrb	r3, [r7, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	68b8      	ldr	r0, [r7, #8]
 800700e:	f000 f91b 	bl	8007248 <FLASH_Program_Byte>
 8007012:	e016      	b.n	8007042 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d105      	bne.n	8007026 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800701a:	883b      	ldrh	r3, [r7, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	68b8      	ldr	r0, [r7, #8]
 8007020:	f000 f8ee 	bl	8007200 <FLASH_Program_HalfWord>
 8007024:	e00d      	b.n	8007042 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d105      	bne.n	8007038 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f000 f8c3 	bl	80071bc <FLASH_Program_Word>
 8007036:	e004      	b.n	8007042 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703c:	68b8      	ldr	r0, [r7, #8]
 800703e:	f000 f88b 	bl	8007158 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007042:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007046:	f000 f847 	bl	80070d8 <FLASH_WaitForLastOperation>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_FLASH_Program+0xa4>)
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <HAL_FLASH_Program+0xa4>)
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800705a:	4b04      	ldr	r3, [pc, #16]	; (800706c <HAL_FLASH_Program+0xa0>)
 800705c:	2200      	movs	r2, #0
 800705e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20002d00 	.word	0x20002d00
 8007070:	40023c00 	.word	0x40023c00

08007074 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_FLASH_Unlock+0x38>)
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	da0b      	bge.n	800709e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_FLASH_Unlock+0x38>)
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <HAL_FLASH_Unlock+0x3c>)
 800708a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <HAL_FLASH_Unlock+0x38>)
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <HAL_FLASH_Unlock+0x40>)
 8007090:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_FLASH_Unlock+0x38>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da01      	bge.n	800709e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800709e:	79fb      	ldrb	r3, [r7, #7]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40023c00 	.word	0x40023c00
 80070b0:	45670123 	.word	0x45670123
 80070b4:	cdef89ab 	.word	0xcdef89ab

080070b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <HAL_FLASH_Lock+0x1c>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <HAL_FLASH_Lock+0x1c>)
 80070c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40023c00 	.word	0x40023c00

080070d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <FLASH_WaitForLastOperation+0x78>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80070ea:	f7ff fa0b 	bl	8006504 <HAL_GetTick>
 80070ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80070f0:	e010      	b.n	8007114 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d00c      	beq.n	8007114 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <FLASH_WaitForLastOperation+0x38>
 8007100:	f7ff fa00 	bl	8006504 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d201      	bcs.n	8007114 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e019      	b.n	8007148 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007114:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <FLASH_WaitForLastOperation+0x7c>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e8      	bne.n	80070f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007120:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <FLASH_WaitForLastOperation+0x7c>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <FLASH_WaitForLastOperation+0x7c>)
 800712e:	2201      	movs	r2, #1
 8007130:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007132:	4b08      	ldr	r3, [pc, #32]	; (8007154 <FLASH_WaitForLastOperation+0x7c>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800713e:	f000 f8a5 	bl	800728c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
  
}  
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20002d00 	.word	0x20002d00
 8007154:	40023c00 	.word	0x40023c00

08007158 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007164:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 8007176:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800717a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800717c:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	4a0d      	ldr	r2, [pc, #52]	; (80071b8 <FLASH_Program_DoubleWord+0x60>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800718e:	f3bf 8f6f 	isb	sy
}
 8007192:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	000a      	movs	r2, r1
 80071a2:	2300      	movs	r3, #0
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	3104      	adds	r1, #4
 80071a8:	4613      	mov	r3, r2
 80071aa:	600b      	str	r3, [r1, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	40023c00 	.word	0x40023c00

080071bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <FLASH_Program_Word+0x40>)
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <FLASH_Program_Word+0x40>)
 80071cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80071d2:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <FLASH_Program_Word+0x40>)
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	4a09      	ldr	r2, [pc, #36]	; (80071fc <FLASH_Program_Word+0x40>)
 80071d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <FLASH_Program_Word+0x40>)
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4a06      	ldr	r2, [pc, #24]	; (80071fc <FLASH_Program_Word+0x40>)
 80071e4:	f043 0301 	orr.w	r3, r3, #1
 80071e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	601a      	str	r2, [r3, #0]
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	40023c00 	.word	0x40023c00

08007200 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	4a0c      	ldr	r2, [pc, #48]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 8007212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	4a09      	ldr	r2, [pc, #36]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 800721e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007224:	4b07      	ldr	r3, [pc, #28]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	4a06      	ldr	r2, [pc, #24]	; (8007244 <FLASH_Program_HalfWord+0x44>)
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	801a      	strh	r2, [r3, #0]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40023c00 	.word	0x40023c00

08007248 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <FLASH_Program_Byte+0x40>)
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <FLASH_Program_Byte+0x40>)
 800725a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007260:	4b09      	ldr	r3, [pc, #36]	; (8007288 <FLASH_Program_Byte+0x40>)
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <FLASH_Program_Byte+0x40>)
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007268:	4b07      	ldr	r3, [pc, #28]	; (8007288 <FLASH_Program_Byte+0x40>)
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	4a06      	ldr	r2, [pc, #24]	; (8007288 <FLASH_Program_Byte+0x40>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	78fa      	ldrb	r2, [r7, #3]
 8007278:	701a      	strb	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40023c00 	.word	0x40023c00

0800728c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007290:	4b2f      	ldr	r3, [pc, #188]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	d008      	beq.n	80072ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f043 0310 	orr.w	r3, r3, #16
 80072a4:	4a2b      	ldr	r2, [pc, #172]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072aa:	2210      	movs	r2, #16
 80072ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80072ae:	4b28      	ldr	r3, [pc, #160]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80072ba:	4b26      	ldr	r3, [pc, #152]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f043 0308 	orr.w	r3, r3, #8
 80072c2:	4a24      	ldr	r2, [pc, #144]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80072c6:	4b22      	ldr	r3, [pc, #136]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072c8:	2220      	movs	r2, #32
 80072ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80072cc:	4b20      	ldr	r3, [pc, #128]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f043 0304 	orr.w	r3, r3, #4
 80072e0:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072e6:	2240      	movs	r2, #64	; 0x40
 80072e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80072ea:	4b19      	ldr	r3, [pc, #100]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d008      	beq.n	8007308 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80072f6:	4b17      	ldr	r3, [pc, #92]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f043 0302 	orr.w	r3, r3, #2
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 8007300:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 8007304:	2280      	movs	r2, #128	; 0x80
 8007306:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007308:	4b11      	ldr	r3, [pc, #68]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 800731e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 8007322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007326:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f043 0320 	orr.w	r3, r3, #32
 800733c:	4a05      	ldr	r2, [pc, #20]	; (8007354 <FLASH_SetErrorCode+0xc8>)
 800733e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <FLASH_SetErrorCode+0xc4>)
 8007342:	2202      	movs	r2, #2
 8007344:	60da      	str	r2, [r3, #12]
  }
}
 8007346:	bf00      	nop
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40023c00 	.word	0x40023c00
 8007354:	20002d00 	.word	0x20002d00

08007358 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800736a:	4b31      	ldr	r3, [pc, #196]	; (8007430 <HAL_FLASHEx_Erase+0xd8>)
 800736c:	7e1b      	ldrb	r3, [r3, #24]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_FLASHEx_Erase+0x1e>
 8007372:	2302      	movs	r3, #2
 8007374:	e058      	b.n	8007428 <HAL_FLASHEx_Erase+0xd0>
 8007376:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <HAL_FLASHEx_Erase+0xd8>)
 8007378:	2201      	movs	r2, #1
 800737a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800737c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007380:	f7ff feaa 	bl	80070d8 <FLASH_WaitForLastOperation>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d148      	bne.n	8007420 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d115      	bne.n	80073ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f000 f844 	bl	8007438 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073b4:	f7ff fe90 	bl	80070d8 <FLASH_WaitForLastOperation>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80073bc:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <HAL_FLASHEx_Erase+0xdc>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <HAL_FLASHEx_Erase+0xdc>)
 80073c2:	f023 0304 	bic.w	r3, r3, #4
 80073c6:	6113      	str	r3, [r2, #16]
 80073c8:	e028      	b.n	800741c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	60bb      	str	r3, [r7, #8]
 80073d0:	e01c      	b.n	800740c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	4619      	mov	r1, r3
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f000 f850 	bl	8007480 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073e4:	f7ff fe78 	bl	80070d8 <FLASH_WaitForLastOperation>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <HAL_FLASHEx_Erase+0xdc>)
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	4a10      	ldr	r2, [pc, #64]	; (8007434 <HAL_FLASHEx_Erase+0xdc>)
 80073f2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80073f6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	601a      	str	r2, [r3, #0]
          break;
 8007404:	e00a      	b.n	800741c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3301      	adds	r3, #1
 800740a:	60bb      	str	r3, [r7, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	4413      	add	r3, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	d3da      	bcc.n	80073d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800741c:	f000 f878 	bl	8007510 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <HAL_FLASHEx_Erase+0xd8>)
 8007422:	2200      	movs	r2, #0
 8007424:	761a      	strb	r2, [r3, #24]

  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20002d00 	.word	0x20002d00
 8007434:	40023c00 	.word	0x40023c00

08007438 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	6039      	str	r1, [r7, #0]
 8007442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007444:	4b0d      	ldr	r3, [pc, #52]	; (800747c <FLASH_MassErase+0x44>)
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	4a0c      	ldr	r2, [pc, #48]	; (800747c <FLASH_MassErase+0x44>)
 800744a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <FLASH_MassErase+0x44>)
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	4a09      	ldr	r2, [pc, #36]	; (800747c <FLASH_MassErase+0x44>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <FLASH_MassErase+0x44>)
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	4313      	orrs	r3, r2
 8007466:	4a05      	ldr	r2, [pc, #20]	; (800747c <FLASH_MassErase+0x44>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746c:	6113      	str	r3, [r2, #16]
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40023c00 	.word	0x40023c00

08007480 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e010      	b.n	80074be <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d103      	bne.n	80074aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80074a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e009      	b.n	80074be <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d103      	bne.n	80074b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80074b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e002      	b.n	80074be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80074b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80074bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	4a12      	ldr	r2, [pc, #72]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074cc:	691a      	ldr	r2, [r3, #16]
 80074ce:	490f      	ldr	r1, [pc, #60]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	4a0c      	ldr	r2, [pc, #48]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80074e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	4313      	orrs	r3, r2
 80074ec:	4a07      	ldr	r2, [pc, #28]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	4a04      	ldr	r2, [pc, #16]	; (800750c <FLASH_Erase_Sector+0x8c>)
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fe:	6113      	str	r3, [r2, #16]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40023c00 	.word	0x40023c00

08007510 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007514:	4b20      	ldr	r3, [pc, #128]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007526:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800752a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800752c:	4b1a      	ldr	r3, [pc, #104]	; (8007598 <FLASH_FlushCaches+0x88>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a19      	ldr	r2, [pc, #100]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4b17      	ldr	r3, [pc, #92]	; (8007598 <FLASH_FlushCaches+0x88>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a16      	ldr	r2, [pc, #88]	; (8007598 <FLASH_FlushCaches+0x88>)
 800753e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007542:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007544:	4b14      	ldr	r3, [pc, #80]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a13      	ldr	r2, [pc, #76]	; (8007598 <FLASH_FlushCaches+0x88>)
 800754a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800754e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007550:	4b11      	ldr	r3, [pc, #68]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800755c:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <FLASH_FlushCaches+0x88>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0d      	ldr	r2, [pc, #52]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007566:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007568:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <FLASH_FlushCaches+0x88>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <FLASH_FlushCaches+0x88>)
 800756e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b08      	ldr	r3, [pc, #32]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a07      	ldr	r2, [pc, #28]	; (8007598 <FLASH_FlushCaches+0x88>)
 800757a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800757e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a04      	ldr	r2, [pc, #16]	; (8007598 <FLASH_FlushCaches+0x88>)
 8007586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800758a:	6013      	str	r3, [r2, #0]
  }
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023c00 	.word	0x40023c00

0800759c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800759c:	b480      	push	{r7}
 800759e:	b089      	sub	sp, #36	; 0x24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e159      	b.n	800786c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075b8:	2201      	movs	r2, #1
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4013      	ands	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	f040 8148 	bne.w	8007866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00b      	beq.n	80075f6 <HAL_GPIO_Init+0x5a>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d007      	beq.n	80075f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80075ea:	2b11      	cmp	r3, #17
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b12      	cmp	r3, #18
 80075f4:	d130      	bne.n	8007658 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	2203      	movs	r2, #3
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	43db      	mvns	r3, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	4313      	orrs	r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800762c:	2201      	movs	r2, #1
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	4013      	ands	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 0201 	and.w	r2, r3, #1
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4313      	orrs	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	2203      	movs	r2, #3
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4313      	orrs	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0xfc>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b12      	cmp	r3, #18
 8007696:	d123      	bne.n	80076e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	08da      	lsrs	r2, r3, #3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3208      	adds	r2, #8
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	220f      	movs	r2, #15
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	08da      	lsrs	r2, r3, #3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3208      	adds	r2, #8
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	2203      	movs	r2, #3
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 0203 	and.w	r2, r3, #3
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80a2 	beq.w	8007866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	4b57      	ldr	r3, [pc, #348]	; (8007884 <HAL_GPIO_Init+0x2e8>)
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	4a56      	ldr	r2, [pc, #344]	; (8007884 <HAL_GPIO_Init+0x2e8>)
 800772c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007730:	6453      	str	r3, [r2, #68]	; 0x44
 8007732:	4b54      	ldr	r3, [pc, #336]	; (8007884 <HAL_GPIO_Init+0x2e8>)
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800773e:	4a52      	ldr	r2, [pc, #328]	; (8007888 <HAL_GPIO_Init+0x2ec>)
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	089b      	lsrs	r3, r3, #2
 8007744:	3302      	adds	r3, #2
 8007746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	220f      	movs	r2, #15
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43db      	mvns	r3, r3
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	4013      	ands	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a49      	ldr	r2, [pc, #292]	; (800788c <HAL_GPIO_Init+0x2f0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d019      	beq.n	800779e <HAL_GPIO_Init+0x202>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a48      	ldr	r2, [pc, #288]	; (8007890 <HAL_GPIO_Init+0x2f4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_GPIO_Init+0x1fe>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a47      	ldr	r2, [pc, #284]	; (8007894 <HAL_GPIO_Init+0x2f8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00d      	beq.n	8007796 <HAL_GPIO_Init+0x1fa>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a46      	ldr	r2, [pc, #280]	; (8007898 <HAL_GPIO_Init+0x2fc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <HAL_GPIO_Init+0x1f6>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a45      	ldr	r2, [pc, #276]	; (800789c <HAL_GPIO_Init+0x300>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d101      	bne.n	800778e <HAL_GPIO_Init+0x1f2>
 800778a:	2304      	movs	r3, #4
 800778c:	e008      	b.n	80077a0 <HAL_GPIO_Init+0x204>
 800778e:	2307      	movs	r3, #7
 8007790:	e006      	b.n	80077a0 <HAL_GPIO_Init+0x204>
 8007792:	2303      	movs	r3, #3
 8007794:	e004      	b.n	80077a0 <HAL_GPIO_Init+0x204>
 8007796:	2302      	movs	r3, #2
 8007798:	e002      	b.n	80077a0 <HAL_GPIO_Init+0x204>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <HAL_GPIO_Init+0x204>
 800779e:	2300      	movs	r3, #0
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	f002 0203 	and.w	r2, r2, #3
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	4093      	lsls	r3, r2
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077b0:	4935      	ldr	r1, [pc, #212]	; (8007888 <HAL_GPIO_Init+0x2ec>)
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	3302      	adds	r3, #2
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077be:	4b38      	ldr	r3, [pc, #224]	; (80078a0 <HAL_GPIO_Init+0x304>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077e2:	4a2f      	ldr	r2, [pc, #188]	; (80078a0 <HAL_GPIO_Init+0x304>)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80077e8:	4b2d      	ldr	r3, [pc, #180]	; (80078a0 <HAL_GPIO_Init+0x304>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800780c:	4a24      	ldr	r2, [pc, #144]	; (80078a0 <HAL_GPIO_Init+0x304>)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_GPIO_Init+0x304>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	43db      	mvns	r3, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	4013      	ands	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007836:	4a1a      	ldr	r2, [pc, #104]	; (80078a0 <HAL_GPIO_Init+0x304>)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800783c:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <HAL_GPIO_Init+0x304>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	43db      	mvns	r3, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4013      	ands	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007860:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <HAL_GPIO_Init+0x304>)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3301      	adds	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	f67f aea2 	bls.w	80075b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40023800 	.word	0x40023800
 8007888:	40013800 	.word	0x40013800
 800788c:	40020000 	.word	0x40020000
 8007890:	40020400 	.word	0x40020400
 8007894:	40020800 	.word	0x40020800
 8007898:	40020c00 	.word	0x40020c00
 800789c:	40021000 	.word	0x40021000
 80078a0:	40013c00 	.word	0x40013c00

080078a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e0bb      	b.n	8007a38 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078c0:	2201      	movs	r2, #1
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	4013      	ands	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	f040 80ab 	bne.w	8007a32 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078dc:	4a5c      	ldr	r2, [pc, #368]	; (8007a50 <HAL_GPIO_DeInit+0x1ac>)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	3302      	adds	r3, #2
 80078e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	220f      	movs	r2, #15
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a54      	ldr	r2, [pc, #336]	; (8007a54 <HAL_GPIO_DeInit+0x1b0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d019      	beq.n	800793a <HAL_GPIO_DeInit+0x96>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <HAL_GPIO_DeInit+0x1b4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d013      	beq.n	8007936 <HAL_GPIO_DeInit+0x92>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a52      	ldr	r2, [pc, #328]	; (8007a5c <HAL_GPIO_DeInit+0x1b8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00d      	beq.n	8007932 <HAL_GPIO_DeInit+0x8e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a51      	ldr	r2, [pc, #324]	; (8007a60 <HAL_GPIO_DeInit+0x1bc>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d007      	beq.n	800792e <HAL_GPIO_DeInit+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a50      	ldr	r2, [pc, #320]	; (8007a64 <HAL_GPIO_DeInit+0x1c0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d101      	bne.n	800792a <HAL_GPIO_DeInit+0x86>
 8007926:	2304      	movs	r3, #4
 8007928:	e008      	b.n	800793c <HAL_GPIO_DeInit+0x98>
 800792a:	2307      	movs	r3, #7
 800792c:	e006      	b.n	800793c <HAL_GPIO_DeInit+0x98>
 800792e:	2303      	movs	r3, #3
 8007930:	e004      	b.n	800793c <HAL_GPIO_DeInit+0x98>
 8007932:	2302      	movs	r3, #2
 8007934:	e002      	b.n	800793c <HAL_GPIO_DeInit+0x98>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_GPIO_DeInit+0x98>
 800793a:	2300      	movs	r3, #0
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	f002 0203 	and.w	r2, r2, #3
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	4093      	lsls	r3, r2
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	d132      	bne.n	80079b2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800794c:	4b46      	ldr	r3, [pc, #280]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	43db      	mvns	r3, r3
 8007954:	4944      	ldr	r1, [pc, #272]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 8007956:	4013      	ands	r3, r2
 8007958:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800795a:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	43db      	mvns	r3, r3
 8007962:	4941      	ldr	r1, [pc, #260]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 8007964:	4013      	ands	r3, r2
 8007966:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007968:	4b3f      	ldr	r3, [pc, #252]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	43db      	mvns	r3, r3
 8007970:	493d      	ldr	r1, [pc, #244]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 8007972:	4013      	ands	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007976:	4b3c      	ldr	r3, [pc, #240]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	43db      	mvns	r3, r3
 800797e:	493a      	ldr	r1, [pc, #232]	; (8007a68 <HAL_GPIO_DeInit+0x1c4>)
 8007980:	4013      	ands	r3, r2
 8007982:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	220f      	movs	r2, #15
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007994:	4a2e      	ldr	r2, [pc, #184]	; (8007a50 <HAL_GPIO_DeInit+0x1ac>)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	089b      	lsrs	r3, r3, #2
 800799a:	3302      	adds	r3, #2
 800799c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	43da      	mvns	r2, r3
 80079a4:	482a      	ldr	r0, [pc, #168]	; (8007a50 <HAL_GPIO_DeInit+0x1ac>)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	089b      	lsrs	r3, r3, #2
 80079aa:	400a      	ands	r2, r1
 80079ac:	3302      	adds	r3, #2
 80079ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	2103      	movs	r1, #3
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	08da      	lsrs	r2, r3, #3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3208      	adds	r2, #8
 80079d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	220f      	movs	r2, #15
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	43db      	mvns	r3, r3
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	08d2      	lsrs	r2, r2, #3
 80079e8:	4019      	ands	r1, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3208      	adds	r2, #8
 80079ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	2103      	movs	r1, #3
 80079fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	401a      	ands	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	fa01 f303 	lsl.w	r3, r1, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	401a      	ands	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	2103      	movs	r1, #3
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	401a      	ands	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	3301      	adds	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b0f      	cmp	r3, #15
 8007a3c:	f67f af40 	bls.w	80078c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40013800 	.word	0x40013800
 8007a54:	40020000 	.word	0x40020000
 8007a58:	40020400 	.word	0x40020400
 8007a5c:	40020800 	.word	0x40020800
 8007a60:	40020c00 	.word	0x40020c00
 8007a64:	40021000 	.word	0x40021000
 8007a68:	40013c00 	.word	0x40013c00

08007a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	887b      	ldrh	r3, [r7, #2]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e001      	b.n	8007a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007aac:	787b      	ldrb	r3, [r7, #1]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ab2:	887a      	ldrh	r2, [r7, #2]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ab8:	e003      	b.n	8007ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	041a      	lsls	r2, r3, #16
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	619a      	str	r2, [r3, #24]
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	887b      	ldrh	r3, [r7, #2]
 8007ae0:	401a      	ands	r2, r3
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d104      	bne.n	8007af2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ae8:	887b      	ldrh	r3, [r7, #2]
 8007aea:	041a      	lsls	r2, r3, #16
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007af0:	e002      	b.n	8007af8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b06:	b08f      	sub	sp, #60	; 0x3c
 8007b08:	af0a      	add	r7, sp, #40	; 0x28
 8007b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e10f      	b.n	8007d36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fe f95d 	bl	8005df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f003 f8c4 	bl	800ace2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	687e      	ldr	r6, [r7, #4]
 8007b62:	466d      	mov	r5, sp
 8007b64:	f106 0410 	add.w	r4, r6, #16
 8007b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b78:	1d33      	adds	r3, r6, #4
 8007b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b7c:	6838      	ldr	r0, [r7, #0]
 8007b7e:	f002 ff9b 	bl	800aab8 <USB_CoreInit>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0d0      	b.n	8007d36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 f8b2 	bl	800ad04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e04a      	b.n	8007c3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ba6:	7bfa      	ldrb	r2, [r7, #15]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4613      	mov	r3, r2
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	333d      	adds	r3, #61	; 0x3d
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007bba:	7bfa      	ldrb	r2, [r7, #15]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	333c      	adds	r3, #60	; 0x3c
 8007bca:	7bfa      	ldrb	r2, [r7, #15]
 8007bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007bce:	7bfa      	ldrb	r2, [r7, #15]
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	b298      	uxth	r0, r3
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3342      	adds	r3, #66	; 0x42
 8007be2:	4602      	mov	r2, r0
 8007be4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007be6:	7bfa      	ldrb	r2, [r7, #15]
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	333f      	adds	r3, #63	; 0x3f
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007bfa:	7bfa      	ldrb	r2, [r7, #15]
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	3344      	adds	r3, #68	; 0x44
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c0e:	7bfa      	ldrb	r2, [r7, #15]
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3348      	adds	r3, #72	; 0x48
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c22:	7bfa      	ldrb	r2, [r7, #15]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	3350      	adds	r3, #80	; 0x50
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
 8007c3c:	7bfa      	ldrb	r2, [r7, #15]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d3af      	bcc.n	8007ba6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
 8007c4a:	e044      	b.n	8007cd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c4c:	7bfa      	ldrb	r2, [r7, #15]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c62:	7bfa      	ldrb	r2, [r7, #15]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007c74:	7bfa      	ldrb	r2, [r7, #15]
 8007c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c78:	7bfa      	ldrb	r2, [r7, #15]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c8e:	7bfa      	ldrb	r2, [r7, #15]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007cba:	7bfa      	ldrb	r2, [r7, #15]
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d3b5      	bcc.n	8007c4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	687e      	ldr	r6, [r7, #4]
 8007ce8:	466d      	mov	r5, sp
 8007cea:	f106 0410 	add.w	r4, r6, #16
 8007cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cfe:	1d33      	adds	r3, r6, #4
 8007d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d02:	6838      	ldr	r0, [r7, #0]
 8007d04:	f003 f828 	bl	800ad58 <USB_DevInit>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e00d      	b.n	8007d36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f004 f870 	bl	800be14 <USB_DevDisconnect>

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_PCD_Start+0x1c>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e020      	b.n	8007d9c <HAL_PCD_Start+0x5e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d109      	bne.n	8007d7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d005      	beq.n	8007d7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f002 ff9c 	bl	800acc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f004 f820 	bl	800bdd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b08d      	sub	sp, #52	; 0x34
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f004 f8de 	bl	800bf7c <USB_GetMode>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 839d 	bne.w	8008502 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f004 f842 	bl	800be56 <USB_ReadInterrupts>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8393 	beq.w	8008500 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f004 f839 	bl	800be56 <USB_ReadInterrupts>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d107      	bne.n	8007dfe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695a      	ldr	r2, [r3, #20]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f002 0202 	and.w	r2, r2, #2
 8007dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f004 f827 	bl	800be56 <USB_ReadInterrupts>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d161      	bne.n	8007ed6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0210 	bic.w	r2, r2, #16
 8007e20:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f003 020f 	and.w	r2, r3, #15
 8007e2e:	4613      	mov	r3, r2
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	0c5b      	lsrs	r3, r3, #17
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d124      	bne.n	8007e98 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d035      	beq.n	8007ec6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a38      	ldr	r0, [r7, #32]
 8007e6e:	f003 fe8d 	bl	800bb8c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e7e:	441a      	add	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e90:	441a      	add	r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	619a      	str	r2, [r3, #24]
 8007e96:	e016      	b.n	8007ec6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	0c5b      	lsrs	r3, r3, #17
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	2b06      	cmp	r3, #6
 8007ea2:	d110      	bne.n	8007ec6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007eaa:	2208      	movs	r2, #8
 8007eac:	4619      	mov	r1, r3
 8007eae:	6a38      	ldr	r0, [r7, #32]
 8007eb0:	f003 fe6c 	bl	800bb8c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	091b      	lsrs	r3, r3, #4
 8007ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ec0:	441a      	add	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699a      	ldr	r2, [r3, #24]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0210 	orr.w	r2, r2, #16
 8007ed4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f003 ffbb 	bl	800be56 <USB_ReadInterrupts>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ee6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007eea:	d16e      	bne.n	8007fca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f003 ffc1 	bl	800be7c <USB_ReadDevAllOutEpInterrupt>
 8007efa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007efc:	e062      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d057      	beq.n	8007fb8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f003 ffe6 	bl	800bee4 <USB_ReadDevOutEPInterrupt>
 8007f18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	461a      	mov	r2, r3
 8007f32:	2301      	movs	r3, #1
 8007f34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fdb1 	bl	8008aa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	461a      	mov	r2, r3
 8007f56:	2308      	movs	r3, #8
 8007f58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 feab 	bl	8008cb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d008      	beq.n	8007f7e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2310      	movs	r3, #16
 8007f7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d008      	beq.n	8007f9a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	461a      	mov	r2, r3
 8007f96:	2320      	movs	r3, #32
 8007f98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	3301      	adds	r3, #1
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d199      	bne.n	8007efe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f003 ff41 	bl	800be56 <USB_ReadInterrupts>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fde:	f040 80c0 	bne.w	8008162 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f003 ff62 	bl	800beb0 <USB_ReadDevAllInEpInterrupt>
 8007fec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007ff2:	e0b2      	b.n	800815a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80a7 	beq.w	800814e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f003 ff88 	bl	800bf20 <USB_ReadDevInEPInterrupt>
 8008010:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d057      	beq.n	80080cc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	2201      	movs	r2, #1
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	43db      	mvns	r3, r3
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800803c:	4013      	ands	r3, r2
 800803e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	461a      	mov	r2, r3
 800804e:	2301      	movs	r3, #1
 8008050:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d132      	bne.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	4613      	mov	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	3348      	adds	r3, #72	; 0x48
 800806a:	6819      	ldr	r1, [r3, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008070:	4613      	mov	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4403      	add	r3, r0
 800807a:	3344      	adds	r3, #68	; 0x44
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4419      	add	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008084:	4613      	mov	r3, r2
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4403      	add	r3, r0
 800808e:	3348      	adds	r3, #72	; 0x48
 8008090:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d113      	bne.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	4613      	mov	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	3350      	adds	r3, #80	; 0x50
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080b8:	461a      	mov	r2, r3
 80080ba:	2101      	movs	r1, #1
 80080bc:	f003 ff90 	bl	800bfe0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fd ff13 	bl	8005ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	461a      	mov	r2, r3
 80080e4:	2308      	movs	r3, #8
 80080e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	461a      	mov	r2, r3
 8008100:	2310      	movs	r3, #16
 8008102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811a:	461a      	mov	r2, r3
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	461a      	mov	r2, r3
 8008138:	2302      	movs	r3, #2
 800813a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc1b 	bl	8008984 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	3301      	adds	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	f47f af49 	bne.w	8007ff4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f003 fe75 	bl	800be56 <USB_ReadInterrupts>
 800816c:	4603      	mov	r3, r0
 800816e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008176:	d122      	bne.n	80081be <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008192:	2b01      	cmp	r3, #1
 8008194:	d108      	bne.n	80081a8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800819e:	2100      	movs	r1, #0
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fe27 	bl	8008df4 <HAL_PCDEx_LPM_Callback>
 80081a6:	e002      	b.n	80081ae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fd ff0f 	bl	8005fcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695a      	ldr	r2, [r3, #20]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80081bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f003 fe47 	bl	800be56 <USB_ReadInterrupts>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d2:	d112      	bne.n	80081fa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d102      	bne.n	80081ea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fd fecb 	bl	8005f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695a      	ldr	r2, [r3, #20]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80081f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f003 fe29 	bl	800be56 <USB_ReadInterrupts>
 8008204:	4603      	mov	r3, r0
 8008206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	f040 80c7 	bne.w	80083a0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2110      	movs	r1, #16
 800822c:	4618      	mov	r0, r3
 800822e:	f002 fef7 	bl	800b020 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008236:	e056      	b.n	80082e6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	461a      	mov	r2, r3
 8008246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800824a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	440a      	add	r2, r1
 8008262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800826a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800828a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	461a      	mov	r2, r3
 800829a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800829e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	3301      	adds	r3, #1
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3a3      	bcc.n	8008238 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008302:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	2b00      	cmp	r3, #0
 800830a:	d016      	beq.n	800833a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800831c:	f043 030b 	orr.w	r3, r3, #11
 8008320:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008332:	f043 030b 	orr.w	r3, r3, #11
 8008336:	6453      	str	r3, [r2, #68]	; 0x44
 8008338:	e015      	b.n	8008366 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800834c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008350:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008360:	f043 030b 	orr.w	r3, r3, #11
 8008364:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008374:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008378:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800838a:	461a      	mov	r2, r3
 800838c:	f003 fe28 	bl	800bfe0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800839e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f003 fd56 	bl	800be56 <USB_ReadInterrupts>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b4:	d124      	bne.n	8008400 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f003 fdec 	bl	800bf98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f002 fe8c 	bl	800b0e2 <USB_GetDevSpeed>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681c      	ldr	r4, [r3, #0]
 80083d6:	f001 f925 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 80083da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	4620      	mov	r0, r4
 80083e6:	f002 fbc9 	bl	800ab7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fd fda9 	bl	8005f42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80083fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f003 fd26 	bl	800be56 <USB_ReadInterrupts>
 800840a:	4603      	mov	r3, r0
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b08      	cmp	r3, #8
 8008412:	d10a      	bne.n	800842a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fd fd86 	bl	8005f26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f002 0208 	and.w	r2, r2, #8
 8008428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f003 fd11 	bl	800be56 <USB_ReadInterrupts>
 8008434:	4603      	mov	r3, r0
 8008436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800843a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843e:	d10f      	bne.n	8008460 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	b2db      	uxtb	r3, r3
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fd fdde 	bl	800600c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800845e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f003 fcf6 	bl	800be56 <USB_ReadInterrupts>
 800846a:	4603      	mov	r3, r0
 800846c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008474:	d10f      	bne.n	8008496 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	b2db      	uxtb	r3, r3
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7fd fdb1 	bl	8005fe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695a      	ldr	r2, [r3, #20]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f003 fcdb 	bl	800be56 <USB_ReadInterrupts>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084aa:	d10a      	bne.n	80084c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7fd fdbf 	bl	8006030 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	695a      	ldr	r2, [r3, #20]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80084c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f003 fcc5 	bl	800be56 <USB_ReadInterrupts>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d115      	bne.n	8008502 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fd fdaf 	bl	800604c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6859      	ldr	r1, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	e000      	b.n	8008502 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008500:	bf00      	nop
    }
  }
}
 8008502:	3734      	adds	r7, #52	; 0x34
 8008504:	46bd      	mov	sp, r7
 8008506:	bd90      	pop	{r4, r7, pc}

08008508 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_PCD_SetAddress+0x1a>
 800851e:	2302      	movs	r3, #2
 8008520:	e013      	b.n	800854a <HAL_PCD_SetAddress+0x42>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f003 fc23 	bl	800bd86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	803b      	strh	r3, [r7, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da0f      	bge.n	8008598 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	f003 020f 	and.w	r2, r3, #15
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	3338      	adds	r3, #56	; 0x38
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	705a      	strb	r2, [r3, #1]
 8008596:	e00f      	b.n	80085b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	f003 020f 	and.w	r2, r3, #15
 800859e:	4613      	mov	r3, r2
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085c4:	883a      	ldrh	r2, [r7, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	78ba      	ldrb	r2, [r7, #2]
 80085ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80085e2:	78bb      	ldrb	r3, [r7, #2]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d102      	bne.n	80085ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_PCD_EP_Open+0xaa>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e00e      	b.n	800861a <HAL_PCD_EP_Open+0xc8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	4618      	mov	r0, r3
 800860c:	f002 fd8e 	bl	800b12c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008618:	7afb      	ldrb	r3, [r7, #11]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800862e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008632:	2b00      	cmp	r3, #0
 8008634:	da0f      	bge.n	8008656 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	f003 020f 	and.w	r2, r3, #15
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	3338      	adds	r3, #56	; 0x38
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	3304      	adds	r3, #4
 800864c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	705a      	strb	r2, [r3, #1]
 8008654:	e00f      	b.n	8008676 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	4613      	mov	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	b2da      	uxtb	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_PCD_EP_Close+0x6e>
 800868c:	2302      	movs	r3, #2
 800868e:	e00e      	b.n	80086ae <HAL_PCD_EP_Close+0x8c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68f9      	ldr	r1, [r7, #12]
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fdcc 	bl	800b23c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b086      	sub	sp, #24
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	460b      	mov	r3, r1
 80086c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	3304      	adds	r3, #4
 80086de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2200      	movs	r2, #0
 80086f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2200      	movs	r2, #0
 80086f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d102      	bne.n	8008712 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2b00      	cmp	r3, #0
 800871a:	d109      	bne.n	8008730 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	6979      	ldr	r1, [r7, #20]
 800872a:	f003 f8a7 	bl	800b87c <USB_EP0StartXfer>
 800872e:	e008      	b.n	8008742 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	6979      	ldr	r1, [r7, #20]
 800873e:	f002 fe59 	bl	800b3f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	f003 020f 	and.w	r2, r3, #15
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4613      	mov	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	440b      	add	r3, r1
 800876a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	460b      	mov	r3, r1
 800878a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	3338      	adds	r3, #56	; 0x38
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2201      	movs	r2, #1
 80087ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d102      	bne.n	80087d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	f003 f845 	bl	800b87c <USB_EP0StartXfer>
 80087f2:	e008      	b.n	8008806 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	f002 fdf7 	bl	800b3f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	f003 020f 	and.w	r2, r3, #15
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	429a      	cmp	r2, r3
 8008828:	d901      	bls.n	800882e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e050      	b.n	80088d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800882e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da0f      	bge.n	8008856 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	f003 020f 	and.w	r2, r3, #15
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3338      	adds	r3, #56	; 0x38
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4413      	add	r3, r2
 800884a:	3304      	adds	r3, #4
 800884c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	705a      	strb	r2, [r3, #1]
 8008854:	e00d      	b.n	8008872 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	3304      	adds	r3, #4
 800886a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	b2da      	uxtb	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800888a:	2b01      	cmp	r3, #1
 800888c:	d101      	bne.n	8008892 <HAL_PCD_EP_SetStall+0x82>
 800888e:	2302      	movs	r3, #2
 8008890:	e01e      	b.n	80088d0 <HAL_PCD_EP_SetStall+0xc0>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f003 f99c 	bl	800bbde <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	b2d9      	uxtb	r1, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088c0:	461a      	mov	r2, r3
 80088c2:	f003 fb8d 	bl	800bfe0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	f003 020f 	and.w	r2, r3, #15
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d901      	bls.n	80088f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e042      	b.n	800897c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da0f      	bge.n	800891e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	f003 020f 	and.w	r2, r3, #15
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	3338      	adds	r3, #56	; 0x38
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	705a      	strb	r2, [r3, #1]
 800891c:	e00f      	b.n	800893e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	f003 020f 	and.w	r2, r3, #15
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	3304      	adds	r3, #4
 8008936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	b2da      	uxtb	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_PCD_EP_ClrStall+0x86>
 800895a:	2302      	movs	r3, #2
 800895c:	e00e      	b.n	800897c <HAL_PCD_EP_ClrStall+0xa4>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68f9      	ldr	r1, [r7, #12]
 800896c:	4618      	mov	r0, r3
 800896e:	f003 f9a4 	bl	800bcba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af02      	add	r7, sp, #8
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	4613      	mov	r3, r2
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	3338      	adds	r3, #56	; 0x38
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3304      	adds	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d901      	bls.n	80089bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e06c      	b.n	8008a96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d902      	bls.n	80089d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3303      	adds	r3, #3
 80089dc:	089b      	lsrs	r3, r3, #2
 80089de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089e0:	e02b      	b.n	8008a3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	695a      	ldr	r2, [r3, #20]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	69fa      	ldr	r2, [r7, #28]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d902      	bls.n	80089fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	3303      	adds	r3, #3
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68d9      	ldr	r1, [r3, #12]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f003 f880 	bl	800bb22 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	441a      	add	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d809      	bhi.n	8008a64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	699a      	ldr	r2, [r3, #24]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d203      	bcs.n	8008a64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1be      	bne.n	80089e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d811      	bhi.n	8008a94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	2201      	movs	r2, #1
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	6939      	ldr	r1, [r7, #16]
 8008a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a90:	4013      	ands	r3, r2
 8008a92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	333c      	adds	r3, #60	; 0x3c
 8008ab8:	3304      	adds	r3, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	f040 80a0 	bne.w	8008c18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d015      	beq.n	8008b0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4a72      	ldr	r2, [pc, #456]	; (8008cb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f240 80dd 	bls.w	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80d7 	beq.w	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b04:	461a      	mov	r2, r3
 8008b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0a:	6093      	str	r3, [r2, #8]
 8008b0c:	e0cb      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0320 	and.w	r3, r3, #32
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	461a      	mov	r2, r3
 8008b26:	2320      	movs	r3, #32
 8008b28:	6093      	str	r3, [r2, #8]
 8008b2a:	e0bc      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f040 80b7 	bne.w	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4a5d      	ldr	r2, [pc, #372]	; (8008cb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d90f      	bls.n	8008b60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b56:	461a      	mov	r2, r3
 8008b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5c:	6093      	str	r3, [r2, #8]
 8008b5e:	e0a2      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	0159      	lsls	r1, r3, #5
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008b86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4403      	add	r3, r0
 8008b96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008b9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4403      	add	r3, r0
 8008bbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4419      	add	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4403      	add	r3, r0
 8008bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d114      	bne.n	8008c0a <PCD_EP_OutXfrComplete_int+0x16a>
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d108      	bne.n	8008c0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c02:	461a      	mov	r2, r3
 8008c04:	2101      	movs	r1, #1
 8008c06:	f003 f9eb 	bl	800bfe0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7fd f953 	bl	8005ebc <HAL_PCD_DataOutStageCallback>
 8008c16:	e046      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d124      	bne.n	8008c6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c36:	461a      	mov	r2, r3
 8008c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3c:	6093      	str	r3, [r2, #8]
 8008c3e:	e032      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	461a      	mov	r2, r3
 8008c58:	2320      	movs	r3, #32
 8008c5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fd f92a 	bl	8005ebc <HAL_PCD_DataOutStageCallback>
 8008c68:	e01d      	b.n	8008ca6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d114      	bne.n	8008c9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d108      	bne.n	8008c9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c92:	461a      	mov	r2, r3
 8008c94:	2100      	movs	r1, #0
 8008c96:	f003 f9a3 	bl	800bfe0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fd f90b 	bl	8005ebc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	4f54300a 	.word	0x4f54300a
 8008cb4:	4f54310a 	.word	0x4f54310a

08008cb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	333c      	adds	r3, #60	; 0x3c
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d90e      	bls.n	8008d0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	461a      	mov	r2, r3
 8008d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7fd f8c3 	bl	8005e98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a0a      	ldr	r2, [pc, #40]	; (8008d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d90c      	bls.n	8008d34 <PCD_EP_OutSetupPacket_int+0x7c>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d108      	bne.n	8008d34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	2101      	movs	r1, #1
 8008d30:	f003 f956 	bl	800bfe0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	4f54300a 	.word	0x4f54300a

08008d44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
 8008d50:	4613      	mov	r3, r2
 8008d52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d107      	bne.n	8008d72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d62:	883b      	ldrh	r3, [r7, #0]
 8008d64:	0419      	lsls	r1, r3, #16
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d70:	e028      	b.n	8008dc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
 8008d84:	e00d      	b.n	8008da2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	3340      	adds	r3, #64	; 0x40
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
 8008da2:	7bfa      	ldrb	r2, [r7, #15]
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3ec      	bcc.n	8008d86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008dac:	883b      	ldrh	r3, [r7, #0]
 8008dae:	0418      	lsls	r0, r3, #16
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4302      	orrs	r2, r0
 8008dbc:	3340      	adds	r3, #64	; 0x40
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	887a      	ldrh	r2, [r7, #2]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e25b      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d075      	beq.n	8008f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e2a:	4ba3      	ldr	r3, [pc, #652]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 030c 	and.w	r3, r3, #12
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d00c      	beq.n	8008e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e36:	4ba0      	ldr	r3, [pc, #640]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d112      	bne.n	8008e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e42:	4b9d      	ldr	r3, [pc, #628]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4e:	d10b      	bne.n	8008e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e50:	4b99      	ldr	r3, [pc, #612]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d05b      	beq.n	8008f14 <HAL_RCC_OscConfig+0x108>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d157      	bne.n	8008f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e236      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e70:	d106      	bne.n	8008e80 <HAL_RCC_OscConfig+0x74>
 8008e72:	4b91      	ldr	r3, [pc, #580]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a90      	ldr	r2, [pc, #576]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e01d      	b.n	8008ebc <HAL_RCC_OscConfig+0xb0>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e88:	d10c      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x98>
 8008e8a:	4b8b      	ldr	r3, [pc, #556]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a8a      	ldr	r2, [pc, #552]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	4b88      	ldr	r3, [pc, #544]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a87      	ldr	r2, [pc, #540]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	e00b      	b.n	8008ebc <HAL_RCC_OscConfig+0xb0>
 8008ea4:	4b84      	ldr	r3, [pc, #528]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a83      	ldr	r2, [pc, #524]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	4b81      	ldr	r3, [pc, #516]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a80      	ldr	r2, [pc, #512]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d013      	beq.n	8008eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec4:	f7fd fb1e 	bl	8006504 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ecc:	f7fd fb1a 	bl	8006504 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e1fb      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ede:	4b76      	ldr	r3, [pc, #472]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0f0      	beq.n	8008ecc <HAL_RCC_OscConfig+0xc0>
 8008eea:	e014      	b.n	8008f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eec:	f7fd fb0a 	bl	8006504 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ef4:	f7fd fb06 	bl	8006504 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b64      	cmp	r3, #100	; 0x64
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e1e7      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f06:	4b6c      	ldr	r3, [pc, #432]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0xe8>
 8008f12:	e000      	b.n	8008f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d063      	beq.n	8008fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f22:	4b65      	ldr	r3, [pc, #404]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 030c 	and.w	r3, r3, #12
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f2e:	4b62      	ldr	r3, [pc, #392]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d11c      	bne.n	8008f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f3a:	4b5f      	ldr	r3, [pc, #380]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d116      	bne.n	8008f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f46:	4b5c      	ldr	r3, [pc, #368]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_RCC_OscConfig+0x152>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d001      	beq.n	8008f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e1bb      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5e:	4b56      	ldr	r3, [pc, #344]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4952      	ldr	r1, [pc, #328]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f72:	e03a      	b.n	8008fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d020      	beq.n	8008fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f7c:	4b4f      	ldr	r3, [pc, #316]	; (80090bc <HAL_RCC_OscConfig+0x2b0>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f82:	f7fd fabf 	bl	8006504 <HAL_GetTick>
 8008f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f88:	e008      	b.n	8008f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f8a:	f7fd fabb 	bl	8006504 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e19c      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f9c:	4b46      	ldr	r3, [pc, #280]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa8:	4b43      	ldr	r3, [pc, #268]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4940      	ldr	r1, [pc, #256]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	600b      	str	r3, [r1, #0]
 8008fbc:	e015      	b.n	8008fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fbe:	4b3f      	ldr	r3, [pc, #252]	; (80090bc <HAL_RCC_OscConfig+0x2b0>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fd fa9e 	bl	8006504 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fcc:	f7fd fa9a 	bl	8006504 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e17b      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fde:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d030      	beq.n	8009058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d016      	beq.n	800902c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ffe:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <HAL_RCC_OscConfig+0x2b4>)
 8009000:	2201      	movs	r2, #1
 8009002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009004:	f7fd fa7e 	bl	8006504 <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800900c:	f7fd fa7a 	bl	8006504 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e15b      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800901e:	4b26      	ldr	r3, [pc, #152]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8009020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0x200>
 800902a:	e015      	b.n	8009058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800902c:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <HAL_RCC_OscConfig+0x2b4>)
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009032:	f7fd fa67 	bl	8006504 <HAL_GetTick>
 8009036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009038:	e008      	b.n	800904c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800903a:	f7fd fa63 	bl	8006504 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e144      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 800904e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f0      	bne.n	800903a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80a0 	beq.w	80091a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800906a:	4b13      	ldr	r3, [pc, #76]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10f      	bne.n	8009096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
 800907a:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	4a0e      	ldr	r2, [pc, #56]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8009080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009084:	6413      	str	r3, [r2, #64]	; 0x40
 8009086:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <HAL_RCC_OscConfig+0x2ac>)
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <HAL_RCC_OscConfig+0x2b8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d121      	bne.n	80090e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090a2:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <HAL_RCC_OscConfig+0x2b8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <HAL_RCC_OscConfig+0x2b8>)
 80090a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090ae:	f7fd fa29 	bl	8006504 <HAL_GetTick>
 80090b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b4:	e011      	b.n	80090da <HAL_RCC_OscConfig+0x2ce>
 80090b6:	bf00      	nop
 80090b8:	40023800 	.word	0x40023800
 80090bc:	42470000 	.word	0x42470000
 80090c0:	42470e80 	.word	0x42470e80
 80090c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c8:	f7fd fa1c 	bl	8006504 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e0fd      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090da:	4b81      	ldr	r3, [pc, #516]	; (80092e0 <HAL_RCC_OscConfig+0x4d4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d106      	bne.n	80090fc <HAL_RCC_OscConfig+0x2f0>
 80090ee:	4b7d      	ldr	r3, [pc, #500]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 80090f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f2:	4a7c      	ldr	r2, [pc, #496]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	6713      	str	r3, [r2, #112]	; 0x70
 80090fa:	e01c      	b.n	8009136 <HAL_RCC_OscConfig+0x32a>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b05      	cmp	r3, #5
 8009102:	d10c      	bne.n	800911e <HAL_RCC_OscConfig+0x312>
 8009104:	4b77      	ldr	r3, [pc, #476]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a76      	ldr	r2, [pc, #472]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800910a:	f043 0304 	orr.w	r3, r3, #4
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
 8009110:	4b74      	ldr	r3, [pc, #464]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	4a73      	ldr	r2, [pc, #460]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	6713      	str	r3, [r2, #112]	; 0x70
 800911c:	e00b      	b.n	8009136 <HAL_RCC_OscConfig+0x32a>
 800911e:	4b71      	ldr	r3, [pc, #452]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	4a70      	ldr	r2, [pc, #448]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	6713      	str	r3, [r2, #112]	; 0x70
 800912a:	4b6e      	ldr	r3, [pc, #440]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800912c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912e:	4a6d      	ldr	r2, [pc, #436]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009130:	f023 0304 	bic.w	r3, r3, #4
 8009134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d015      	beq.n	800916a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913e:	f7fd f9e1 	bl	8006504 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009144:	e00a      	b.n	800915c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009146:	f7fd f9dd 	bl	8006504 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	f241 3288 	movw	r2, #5000	; 0x1388
 8009154:	4293      	cmp	r3, r2
 8009156:	d901      	bls.n	800915c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e0bc      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800915c:	4b61      	ldr	r3, [pc, #388]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0ee      	beq.n	8009146 <HAL_RCC_OscConfig+0x33a>
 8009168:	e014      	b.n	8009194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800916a:	f7fd f9cb 	bl	8006504 <HAL_GetTick>
 800916e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009170:	e00a      	b.n	8009188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009172:	f7fd f9c7 	bl	8006504 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e0a6      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009188:	4b56      	ldr	r3, [pc, #344]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800918a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ee      	bne.n	8009172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d105      	bne.n	80091a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800919a:	4b52      	ldr	r3, [pc, #328]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	4a51      	ldr	r2, [pc, #324]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 80091a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8092 	beq.w	80092d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091b0:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f003 030c 	and.w	r3, r3, #12
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d05c      	beq.n	8009276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d141      	bne.n	8009248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091c4:	4b48      	ldr	r3, [pc, #288]	; (80092e8 <HAL_RCC_OscConfig+0x4dc>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091ca:	f7fd f99b 	bl	8006504 <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091d2:	f7fd f997 	bl	8006504 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e078      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091e4:	4b3f      	ldr	r3, [pc, #252]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f0      	bne.n	80091d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	019b      	lsls	r3, r3, #6
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	3b01      	subs	r3, #1
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	061b      	lsls	r3, r3, #24
 8009214:	4933      	ldr	r1, [pc, #204]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009216:	4313      	orrs	r3, r2
 8009218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800921a:	4b33      	ldr	r3, [pc, #204]	; (80092e8 <HAL_RCC_OscConfig+0x4dc>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009220:	f7fd f970 	bl	8006504 <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009226:	e008      	b.n	800923a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009228:	f7fd f96c 	bl	8006504 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b02      	cmp	r3, #2
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e04d      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800923a:	4b2a      	ldr	r3, [pc, #168]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0f0      	beq.n	8009228 <HAL_RCC_OscConfig+0x41c>
 8009246:	e045      	b.n	80092d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <HAL_RCC_OscConfig+0x4dc>)
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800924e:	f7fd f959 	bl	8006504 <HAL_GetTick>
 8009252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009254:	e008      	b.n	8009268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009256:	f7fd f955 	bl	8006504 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d901      	bls.n	8009268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e036      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009268:	4b1e      	ldr	r3, [pc, #120]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1f0      	bne.n	8009256 <HAL_RCC_OscConfig+0x44a>
 8009274:	e02e      	b.n	80092d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e029      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009282:	4b18      	ldr	r3, [pc, #96]	; (80092e4 <HAL_RCC_OscConfig+0x4d8>)
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	429a      	cmp	r2, r3
 8009294:	d11c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d115      	bne.n	80092d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092aa:	4013      	ands	r3, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d10d      	bne.n	80092d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80092be:	429a      	cmp	r2, r3
 80092c0:	d106      	bne.n	80092d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d001      	beq.n	80092d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40007000 	.word	0x40007000
 80092e4:	40023800 	.word	0x40023800
 80092e8:	42470060 	.word	0x42470060

080092ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0cc      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009300:	4b68      	ldr	r3, [pc, #416]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d90c      	bls.n	8009328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800930e:	4b65      	ldr	r3, [pc, #404]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	b2d2      	uxtb	r2, r2
 8009314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009316:	4b63      	ldr	r3, [pc, #396]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d001      	beq.n	8009328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e0b8      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d020      	beq.n	8009376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009340:	4b59      	ldr	r3, [pc, #356]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	4a58      	ldr	r2, [pc, #352]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800934a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009358:	4b53      	ldr	r3, [pc, #332]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	4a52      	ldr	r2, [pc, #328]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800935e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009364:	4b50      	ldr	r3, [pc, #320]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	494d      	ldr	r1, [pc, #308]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	4313      	orrs	r3, r2
 8009374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d044      	beq.n	800940c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d107      	bne.n	800939a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800938a:	4b47      	ldr	r3, [pc, #284]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d119      	bne.n	80093ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e07f      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d003      	beq.n	80093aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d107      	bne.n	80093ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093aa:	4b3f      	ldr	r3, [pc, #252]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d109      	bne.n	80093ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e06f      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ba:	4b3b      	ldr	r3, [pc, #236]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e067      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093ca:	4b37      	ldr	r3, [pc, #220]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f023 0203 	bic.w	r2, r3, #3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	4934      	ldr	r1, [pc, #208]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093dc:	f7fd f892 	bl	8006504 <HAL_GetTick>
 80093e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e2:	e00a      	b.n	80093fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e4:	f7fd f88e 	bl	8006504 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e04f      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093fa:	4b2b      	ldr	r3, [pc, #172]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 020c 	and.w	r2, r3, #12
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	429a      	cmp	r2, r3
 800940a:	d1eb      	bne.n	80093e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800940c:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 030f 	and.w	r3, r3, #15
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d20c      	bcs.n	8009434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800941a:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009422:	4b20      	ldr	r3, [pc, #128]	; (80094a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d001      	beq.n	8009434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e032      	b.n	800949a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009440:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	4916      	ldr	r1, [pc, #88]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800944e:	4313      	orrs	r3, r2
 8009450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800945e:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	490e      	ldr	r1, [pc, #56]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800946e:	4313      	orrs	r3, r2
 8009470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009472:	f000 f821 	bl	80094b8 <HAL_RCC_GetSysClockFreq>
 8009476:	4602      	mov	r2, r0
 8009478:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <HAL_RCC_ClockConfig+0x1bc>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	091b      	lsrs	r3, r3, #4
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	490a      	ldr	r1, [pc, #40]	; (80094ac <HAL_RCC_ClockConfig+0x1c0>)
 8009484:	5ccb      	ldrb	r3, [r1, r3]
 8009486:	fa22 f303 	lsr.w	r3, r2, r3
 800948a:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <HAL_RCC_ClockConfig+0x1c4>)
 800948c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800948e:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f7fc fff2 	bl	800647c <HAL_InitTick>

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40023c00 	.word	0x40023c00
 80094a8:	40023800 	.word	0x40023800
 80094ac:	0800fa7c 	.word	0x0800fa7c
 80094b0:	20000000 	.word	0x20000000
 80094b4:	200001e8 	.word	0x200001e8

080094b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094be:	2100      	movs	r1, #0
 80094c0:	6079      	str	r1, [r7, #4]
 80094c2:	2100      	movs	r1, #0
 80094c4:	60f9      	str	r1, [r7, #12]
 80094c6:	2100      	movs	r1, #0
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80094ca:	2100      	movs	r1, #0
 80094cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094ce:	4952      	ldr	r1, [pc, #328]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 80094d0:	6889      	ldr	r1, [r1, #8]
 80094d2:	f001 010c 	and.w	r1, r1, #12
 80094d6:	2908      	cmp	r1, #8
 80094d8:	d00d      	beq.n	80094f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80094da:	2908      	cmp	r1, #8
 80094dc:	f200 8094 	bhi.w	8009608 <HAL_RCC_GetSysClockFreq+0x150>
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d002      	beq.n	80094ea <HAL_RCC_GetSysClockFreq+0x32>
 80094e4:	2904      	cmp	r1, #4
 80094e6:	d003      	beq.n	80094f0 <HAL_RCC_GetSysClockFreq+0x38>
 80094e8:	e08e      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094ea:	4b4c      	ldr	r3, [pc, #304]	; (800961c <HAL_RCC_GetSysClockFreq+0x164>)
 80094ec:	60bb      	str	r3, [r7, #8]
       break;
 80094ee:	e08e      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094f0:	4b4b      	ldr	r3, [pc, #300]	; (8009620 <HAL_RCC_GetSysClockFreq+0x168>)
 80094f2:	60bb      	str	r3, [r7, #8]
      break;
 80094f4:	e08b      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094f6:	4948      	ldr	r1, [pc, #288]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 80094f8:	6849      	ldr	r1, [r1, #4]
 80094fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80094fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009500:	4945      	ldr	r1, [pc, #276]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 8009502:	6849      	ldr	r1, [r1, #4]
 8009504:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009508:	2900      	cmp	r1, #0
 800950a:	d024      	beq.n	8009556 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800950c:	4942      	ldr	r1, [pc, #264]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 800950e:	6849      	ldr	r1, [r1, #4]
 8009510:	0989      	lsrs	r1, r1, #6
 8009512:	4608      	mov	r0, r1
 8009514:	f04f 0100 	mov.w	r1, #0
 8009518:	f240 14ff 	movw	r4, #511	; 0x1ff
 800951c:	f04f 0500 	mov.w	r5, #0
 8009520:	ea00 0204 	and.w	r2, r0, r4
 8009524:	ea01 0305 	and.w	r3, r1, r5
 8009528:	493d      	ldr	r1, [pc, #244]	; (8009620 <HAL_RCC_GetSysClockFreq+0x168>)
 800952a:	fb01 f003 	mul.w	r0, r1, r3
 800952e:	2100      	movs	r1, #0
 8009530:	fb01 f102 	mul.w	r1, r1, r2
 8009534:	1844      	adds	r4, r0, r1
 8009536:	493a      	ldr	r1, [pc, #232]	; (8009620 <HAL_RCC_GetSysClockFreq+0x168>)
 8009538:	fba2 0101 	umull	r0, r1, r2, r1
 800953c:	1863      	adds	r3, r4, r1
 800953e:	4619      	mov	r1, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	461a      	mov	r2, r3
 8009544:	f04f 0300 	mov.w	r3, #0
 8009548:	f7f7 fb8e 	bl	8000c68 <__aeabi_uldivmod>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4613      	mov	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e04a      	b.n	80095ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009556:	4b30      	ldr	r3, [pc, #192]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	099b      	lsrs	r3, r3, #6
 800955c:	461a      	mov	r2, r3
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009566:	f04f 0100 	mov.w	r1, #0
 800956a:	ea02 0400 	and.w	r4, r2, r0
 800956e:	ea03 0501 	and.w	r5, r3, r1
 8009572:	4620      	mov	r0, r4
 8009574:	4629      	mov	r1, r5
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	f04f 0300 	mov.w	r3, #0
 800957e:	014b      	lsls	r3, r1, #5
 8009580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009584:	0142      	lsls	r2, r0, #5
 8009586:	4610      	mov	r0, r2
 8009588:	4619      	mov	r1, r3
 800958a:	1b00      	subs	r0, r0, r4
 800958c:	eb61 0105 	sbc.w	r1, r1, r5
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	018b      	lsls	r3, r1, #6
 800959a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800959e:	0182      	lsls	r2, r0, #6
 80095a0:	1a12      	subs	r2, r2, r0
 80095a2:	eb63 0301 	sbc.w	r3, r3, r1
 80095a6:	f04f 0000 	mov.w	r0, #0
 80095aa:	f04f 0100 	mov.w	r1, #0
 80095ae:	00d9      	lsls	r1, r3, #3
 80095b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80095b4:	00d0      	lsls	r0, r2, #3
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	1912      	adds	r2, r2, r4
 80095bc:	eb45 0303 	adc.w	r3, r5, r3
 80095c0:	f04f 0000 	mov.w	r0, #0
 80095c4:	f04f 0100 	mov.w	r1, #0
 80095c8:	0299      	lsls	r1, r3, #10
 80095ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80095ce:	0290      	lsls	r0, r2, #10
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4610      	mov	r0, r2
 80095d6:	4619      	mov	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	461a      	mov	r2, r3
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	f7f7 fb42 	bl	8000c68 <__aeabi_uldivmod>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4613      	mov	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <HAL_RCC_GetSysClockFreq+0x160>)
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	3301      	adds	r3, #1
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	fbb2 f3f3 	udiv	r3, r2, r3
 8009604:	60bb      	str	r3, [r7, #8]
      break;
 8009606:	e002      	b.n	800960e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <HAL_RCC_GetSysClockFreq+0x164>)
 800960a:	60bb      	str	r3, [r7, #8]
      break;
 800960c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800960e:	68bb      	ldr	r3, [r7, #8]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bdb0      	pop	{r4, r5, r7, pc}
 8009618:	40023800 	.word	0x40023800
 800961c:	00f42400 	.word	0x00f42400
 8009620:	017d7840 	.word	0x017d7840

08009624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009628:	4b03      	ldr	r3, [pc, #12]	; (8009638 <HAL_RCC_GetHCLKFreq+0x14>)
 800962a:	681b      	ldr	r3, [r3, #0]
}
 800962c:	4618      	mov	r0, r3
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000000 	.word	0x20000000

0800963c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009640:	f7ff fff0 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 8009644:	4602      	mov	r2, r0
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	0a9b      	lsrs	r3, r3, #10
 800964c:	f003 0307 	and.w	r3, r3, #7
 8009650:	4903      	ldr	r1, [pc, #12]	; (8009660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009652:	5ccb      	ldrb	r3, [r1, r3]
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009658:	4618      	mov	r0, r3
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40023800 	.word	0x40023800
 8009660:	0800fa8c 	.word	0x0800fa8c

08009664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009668:	f7ff ffdc 	bl	8009624 <HAL_RCC_GetHCLKFreq>
 800966c:	4602      	mov	r2, r0
 800966e:	4b05      	ldr	r3, [pc, #20]	; (8009684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	0b5b      	lsrs	r3, r3, #13
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	4903      	ldr	r1, [pc, #12]	; (8009688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800967a:	5ccb      	ldrb	r3, [r1, r3]
 800967c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009680:	4618      	mov	r0, r3
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40023800 	.word	0x40023800
 8009688:	0800fa8c 	.word	0x0800fa8c

0800968c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d105      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d038      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096b4:	4b68      	ldr	r3, [pc, #416]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80096ba:	f7fc ff23 	bl	8006504 <HAL_GetTick>
 80096be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096c0:	e008      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80096c2:	f7fc ff1f 	bl	8006504 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e0bd      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096d4:	4b61      	ldr	r3, [pc, #388]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f0      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	019b      	lsls	r3, r3, #6
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	071b      	lsls	r3, r3, #28
 80096f2:	495a      	ldr	r1, [pc, #360]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80096fa:	4b57      	ldr	r3, [pc, #348]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009700:	f7fc ff00 	bl	8006504 <HAL_GetTick>
 8009704:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009706:	e008      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009708:	f7fc fefc 	bl	8006504 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b02      	cmp	r3, #2
 8009714:	d901      	bls.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e09a      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800971a:	4b50      	ldr	r3, [pc, #320]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f0      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8083 	beq.w	800983a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	4b48      	ldr	r3, [pc, #288]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	4a47      	ldr	r2, [pc, #284]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009742:	6413      	str	r3, [r2, #64]	; 0x40
 8009744:	4b45      	ldr	r3, [pc, #276]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009750:	4b43      	ldr	r3, [pc, #268]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a42      	ldr	r2, [pc, #264]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800975a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800975c:	f7fc fed2 	bl	8006504 <HAL_GetTick>
 8009760:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009762:	e008      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009764:	f7fc fece 	bl	8006504 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	2b02      	cmp	r3, #2
 8009770:	d901      	bls.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e06c      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009776:	4b3a      	ldr	r3, [pc, #232]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0f0      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009782:	4b36      	ldr	r3, [pc, #216]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d02f      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	429a      	cmp	r2, r3
 800979e:	d028      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097a0:	4b2e      	ldr	r3, [pc, #184]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097aa:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097b0:	4b2c      	ldr	r3, [pc, #176]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80097b6:	4a29      	ldr	r2, [pc, #164]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097bc:	4b27      	ldr	r3, [pc, #156]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d114      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80097c8:	f7fc fe9c 	bl	8006504 <HAL_GetTick>
 80097cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ce:	e00a      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097d0:	f7fc fe98 	bl	8006504 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e034      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e6:	4b1d      	ldr	r3, [pc, #116]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ee      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fe:	d10d      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009800:	4b16      	ldr	r3, [pc, #88]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009814:	4911      	ldr	r1, [pc, #68]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009816:	4313      	orrs	r3, r2
 8009818:	608b      	str	r3, [r1, #8]
 800981a:	e005      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800981c:	4b0f      	ldr	r3, [pc, #60]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	4a0e      	ldr	r2, [pc, #56]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009826:	6093      	str	r3, [r2, #8]
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800982a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009834:	4909      	ldr	r1, [pc, #36]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009836:	4313      	orrs	r3, r2
 8009838:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0308 	and.w	r3, r3, #8
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7d1a      	ldrb	r2, [r3, #20]
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800984c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	42470068 	.word	0x42470068
 800985c:	40023800 	.word	0x40023800
 8009860:	40007000 	.word	0x40007000
 8009864:	42470e40 	.word	0x42470e40
 8009868:	424711e0 	.word	0x424711e0

0800986c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e083      	b.n	8009986 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7f5b      	ldrb	r3, [r3, #29]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f9 fd5e 	bl	8003350 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	22ca      	movs	r2, #202	; 0xca
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2253      	movs	r2, #83	; 0x53
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f897 	bl	80099de <RTC_EnterInitMode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d008      	beq.n	80098c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	22ff      	movs	r2, #255	; 0xff
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2204      	movs	r2, #4
 80098c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e05e      	b.n	8009986 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6899      	ldr	r1, [r3, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68d2      	ldr	r2, [r2, #12]
 8009902:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6919      	ldr	r1, [r3, #16]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	041a      	lsls	r2, r3, #16
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009926:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10e      	bne.n	8009954 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f829 	bl	800998e <HAL_RTC_WaitForSynchro>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	22ff      	movs	r2, #255	; 0xff
 8009948:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2204      	movs	r2, #4
 800994e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e018      	b.n	8009986 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009962:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699a      	ldr	r2, [r3, #24]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009984:	2300      	movs	r3, #0
  }
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80099a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099aa:	f7fc fdab 	bl	8006504 <HAL_GetTick>
 80099ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80099b0:	e009      	b.n	80099c6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80099b2:	f7fc fda7 	bl	8006504 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099c0:	d901      	bls.n	80099c6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e007      	b.n	80099d6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0ee      	beq.n	80099b2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d119      	bne.n	8009a2c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a02:	f7fc fd7f 	bl	8006504 <HAL_GetTick>
 8009a06:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a08:	e009      	b.n	8009a1e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a0a:	f7fc fd7b 	bl	8006504 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a18:	d901      	bls.n	8009a1e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e007      	b.n	8009a2e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0ee      	beq.n	8009a0a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b087      	sub	sp, #28
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3350      	adds	r3, #80	; 0x50
 8009a4c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	4413      	add	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3350      	adds	r3, #80	; 0x50
 8009a7e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e03f      	b.n	8009b2c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d106      	bne.n	8009ac6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7f9 ffd9 	bl	8003a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2224      	movs	r2, #36	; 0x24
 8009aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009adc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc4e 	bl	800a380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009af2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	695a      	ldr	r2, [r3, #20]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e01e      	b.n	8009b84 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2224      	movs	r2, #36	; 0x24
 8009b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b5c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7fa f8d0 	bl	8003d04 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d153      	bne.n	8009c4e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <HAL_UART_Transmit_DMA+0x26>
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e04c      	b.n	8009c50 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Transmit_DMA+0x38>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e045      	b.n	8009c50 <HAL_UART_Transmit_DMA+0xc4>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	88fa      	ldrh	r2, [r7, #6]
 8009bd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2221      	movs	r2, #33	; 0x21
 8009be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	4a19      	ldr	r2, [pc, #100]	; (8009c58 <HAL_UART_Transmit_DMA+0xcc>)
 8009bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf8:	4a18      	ldr	r2, [pc, #96]	; (8009c5c <HAL_UART_Transmit_DMA+0xd0>)
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	4a17      	ldr	r2, [pc, #92]	; (8009c60 <HAL_UART_Transmit_DMA+0xd4>)
 8009c02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c08:	2200      	movs	r2, #0
 8009c0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	6819      	ldr	r1, [r3, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	461a      	mov	r2, r3
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	f7fc feee 	bl	8006a04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c48:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e000      	b.n	8009c50 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009c4e:	2302      	movs	r3, #2
  }
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	08009f8d 	.word	0x08009f8d
 8009c5c:	08009fdf 	.word	0x08009fdf
 8009c60:	0800a07f 	.word	0x0800a07f

08009c64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d166      	bne.n	8009d4c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <HAL_UART_Receive_DMA+0x26>
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e05f      	b.n	8009d4e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_UART_Receive_DMA+0x38>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e058      	b.n	8009d4e <HAL_UART_Receive_DMA+0xea>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	88fa      	ldrh	r2, [r7, #6]
 8009cae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2222      	movs	r2, #34	; 0x22
 8009cba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc2:	4a25      	ldr	r2, [pc, #148]	; (8009d58 <HAL_UART_Receive_DMA+0xf4>)
 8009cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cca:	4a24      	ldr	r2, [pc, #144]	; (8009d5c <HAL_UART_Receive_DMA+0xf8>)
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd2:	4a23      	ldr	r2, [pc, #140]	; (8009d60 <HAL_UART_Receive_DMA+0xfc>)
 8009cd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	2200      	movs	r2, #0
 8009cdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	88fb      	ldrh	r3, [r7, #6]
 8009cf6:	f7fc fe85 	bl	8006a04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	613b      	str	r3, [r7, #16]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d26:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0201 	orr.w	r2, r2, #1
 8009d36:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695a      	ldr	r2, [r3, #20]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d46:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e000      	b.n	8009d4e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009d4c:	2302      	movs	r3, #2
  }
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	08009ffb 	.word	0x08009ffb
 8009d5c:	0800a063 	.word	0x0800a063
 8009d60:	0800a07f 	.word	0x0800a07f

08009d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 030f 	and.w	r3, r3, #15
 8009d92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10d      	bne.n	8009db6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	f003 0320 	and.w	r3, r3, #32
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d008      	beq.n	8009db6 <HAL_UART_IRQHandler+0x52>
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa65 	bl	800a27e <UART_Receive_IT>
      return;
 8009db4:	e0d0      	b.n	8009f58 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80b0 	beq.w	8009f1e <HAL_UART_IRQHandler+0x1ba>
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <HAL_UART_IRQHandler+0x70>
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80a5 	beq.w	8009f1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <HAL_UART_IRQHandler+0x90>
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dec:	f043 0201 	orr.w	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <HAL_UART_IRQHandler+0xb0>
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0c:	f043 0202 	orr.w	r2, r3, #2
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <HAL_UART_IRQHandler+0xd0>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	f043 0204 	orr.w	r2, r3, #4
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00f      	beq.n	8009e5e <HAL_UART_IRQHandler+0xfa>
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d104      	bne.n	8009e52 <HAL_UART_IRQHandler+0xee>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e56:	f043 0208 	orr.w	r2, r3, #8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d077      	beq.n	8009f56 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <HAL_UART_IRQHandler+0x11c>
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9ff 	bl	800a27e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b40      	cmp	r3, #64	; 0x40
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9a:	f003 0308 	and.w	r3, r3, #8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <HAL_UART_IRQHandler+0x144>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d031      	beq.n	8009f0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f948 	bl	800a13e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b40      	cmp	r3, #64	; 0x40
 8009eba:	d123      	bne.n	8009f04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695a      	ldr	r2, [r3, #20]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d013      	beq.n	8009efc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed8:	4a21      	ldr	r2, [pc, #132]	; (8009f60 <HAL_UART_IRQHandler+0x1fc>)
 8009eda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fc fde7 	bl	8006ab4 <HAL_DMA_Abort_IT>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d016      	beq.n	8009f1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009efa:	e00e      	b.n	8009f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7f9 fd7b 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f02:	e00a      	b.n	8009f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7f9 fd77 	bl	80039f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f0a:	e006      	b.n	8009f1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7f9 fd73 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009f18:	e01d      	b.n	8009f56 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f1a:	bf00      	nop
    return;
 8009f1c:	e01b      	b.n	8009f56 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1d6>
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f935 	bl	800a1a2 <UART_Transmit_IT>
    return;
 8009f38:	e00e      	b.n	8009f58 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <HAL_UART_IRQHandler+0x1f4>
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f97d 	bl	800a24e <UART_EndTransmit_IT>
    return;
 8009f54:	e000      	b.n	8009f58 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009f56:	bf00      	nop
  }
}
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800a17b 	.word	0x0800a17b

08009f64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d113      	bne.n	8009fd0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	695a      	ldr	r2, [r3, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fbc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fcc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fce:	e002      	b.n	8009fd6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7f9 fd25 	bl	8003a20 <HAL_UART_TxCpltCallback>
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff ffb9 	bl	8009f64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff2:	bf00      	nop
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a012:	2b00      	cmp	r3, #0
 800a014:	d11e      	bne.n	800a054 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a02a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695a      	ldr	r2, [r3, #20]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0201 	bic.w	r2, r2, #1
 800a03a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a04a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2220      	movs	r2, #32
 800a050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7f9 fcd9 	bl	8003a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff ff81 	bl	8009f78 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09a:	2b80      	cmp	r3, #128	; 0x80
 800a09c:	bf0c      	ite	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	2300      	movne	r3, #0
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b21      	cmp	r3, #33	; 0x21
 800a0b0:	d108      	bne.n	800a0c4 <UART_DMAError+0x46>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a0be:	68b8      	ldr	r0, [r7, #8]
 800a0c0:	f000 f827 	bl	800a112 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ce:	2b40      	cmp	r3, #64	; 0x40
 800a0d0:	bf0c      	ite	eq
 800a0d2:	2301      	moveq	r3, #1
 800a0d4:	2300      	movne	r3, #0
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b22      	cmp	r3, #34	; 0x22
 800a0e4:	d108      	bne.n	800a0f8 <UART_DMAError+0x7a>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a0f2:	68b8      	ldr	r0, [r7, #8]
 800a0f4:	f000 f823 	bl	800a13e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	f043 0210 	orr.w	r2, r3, #16
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f7f9 fc77 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a128:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a154:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	695a      	ldr	r2, [r3, #20]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0201 	bic.w	r2, r2, #1
 800a164:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7f9 fc2f 	bl	80039f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b21      	cmp	r3, #33	; 0x21
 800a1b4:	d144      	bne.n	800a240 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1be:	d11a      	bne.n	800a1f6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1d4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	1c9a      	adds	r2, r3, #2
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	621a      	str	r2, [r3, #32]
 800a1e8:	e00e      	b.n	800a208 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	621a      	str	r2, [r3, #32]
 800a1f4:	e008      	b.n	800a208 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1c59      	adds	r1, r3, #1
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6211      	str	r1, [r2, #32]
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	b29b      	uxth	r3, r3
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	4619      	mov	r1, r3
 800a216:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10f      	bne.n	800a23c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a22a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a23a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	e000      	b.n	800a242 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7f9 fbd6 	bl	8003a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b22      	cmp	r3, #34	; 0x22
 800a290:	d171      	bne.n	800a376 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a29a:	d123      	bne.n	800a2e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10e      	bne.n	800a2c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	629a      	str	r2, [r3, #40]	; 0x28
 800a2c6:	e029      	b.n	800a31c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	629a      	str	r2, [r3, #40]	; 0x28
 800a2e2:	e01b      	b.n	800a31c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6858      	ldr	r0, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	1c59      	adds	r1, r3, #1
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6291      	str	r1, [r2, #40]	; 0x28
 800a2fc:	b2c2      	uxtb	r2, r0
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	e00c      	b.n	800a31c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30e:	1c58      	adds	r0, r3, #1
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	6288      	str	r0, [r1, #40]	; 0x28
 800a314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a318:	b2d2      	uxtb	r2, r2
 800a31a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a320:	b29b      	uxth	r3, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	b29b      	uxth	r3, r3
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4619      	mov	r1, r3
 800a32a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d120      	bne.n	800a372 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0220 	bic.w	r2, r2, #32
 800a33e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a34e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0201 	bic.w	r2, r2, #1
 800a35e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2220      	movs	r2, #32
 800a364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f9 fb4f 	bl	8003a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	e002      	b.n	800a378 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	e000      	b.n	800a378 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a376:	2302      	movs	r3, #2
  }
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	b0bd      	sub	sp, #244	; 0xf4
 800a386:	af00      	add	r7, sp, #0
 800a388:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a39c:	68d9      	ldr	r1, [r3, #12]
 800a39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	ea40 0301 	orr.w	r3, r0, r1
 800a3a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800a3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3d8:	f021 010c 	bic.w	r1, r1, #12
 800a3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3fa:	6999      	ldr	r1, [r3, #24]
 800a3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	ea40 0301 	orr.w	r3, r0, r1
 800a406:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a412:	f040 81a5 	bne.w	800a760 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	4bcd      	ldr	r3, [pc, #820]	; (800a754 <UART_SetConfig+0x3d4>)
 800a41e:	429a      	cmp	r2, r3
 800a420:	d006      	beq.n	800a430 <UART_SetConfig+0xb0>
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4bcb      	ldr	r3, [pc, #812]	; (800a758 <UART_SetConfig+0x3d8>)
 800a42a:	429a      	cmp	r2, r3
 800a42c:	f040 80cb 	bne.w	800a5c6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a430:	f7ff f918 	bl	8009664 <HAL_RCC_GetPCLK2Freq>
 800a434:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a43c:	461c      	mov	r4, r3
 800a43e:	f04f 0500 	mov.w	r5, #0
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	1891      	adds	r1, r2, r2
 800a448:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a44c:	415b      	adcs	r3, r3
 800a44e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a452:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a456:	1912      	adds	r2, r2, r4
 800a458:	eb45 0303 	adc.w	r3, r5, r3
 800a45c:	f04f 0000 	mov.w	r0, #0
 800a460:	f04f 0100 	mov.w	r1, #0
 800a464:	00d9      	lsls	r1, r3, #3
 800a466:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a46a:	00d0      	lsls	r0, r2, #3
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	1911      	adds	r1, r2, r4
 800a472:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800a476:	416b      	adcs	r3, r5
 800a478:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	461a      	mov	r2, r3
 800a484:	f04f 0300 	mov.w	r3, #0
 800a488:	1891      	adds	r1, r2, r2
 800a48a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a48e:	415b      	adcs	r3, r3
 800a490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a494:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a498:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a49c:	f7f6 fbe4 	bl	8000c68 <__aeabi_uldivmod>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4bad      	ldr	r3, [pc, #692]	; (800a75c <UART_SetConfig+0x3dc>)
 800a4a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a4aa:	095b      	lsrs	r3, r3, #5
 800a4ac:	011e      	lsls	r6, r3, #4
 800a4ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	f04f 0500 	mov.w	r5, #0
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	1891      	adds	r1, r2, r2
 800a4be:	67b9      	str	r1, [r7, #120]	; 0x78
 800a4c0:	415b      	adcs	r3, r3
 800a4c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a4c8:	1912      	adds	r2, r2, r4
 800a4ca:	eb45 0303 	adc.w	r3, r5, r3
 800a4ce:	f04f 0000 	mov.w	r0, #0
 800a4d2:	f04f 0100 	mov.w	r1, #0
 800a4d6:	00d9      	lsls	r1, r3, #3
 800a4d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4dc:	00d0      	lsls	r0, r2, #3
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	1911      	adds	r1, r2, r4
 800a4e4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a4e8:	416b      	adcs	r3, r5
 800a4ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f04f 0300 	mov.w	r3, #0
 800a4fa:	1891      	adds	r1, r2, r2
 800a4fc:	6739      	str	r1, [r7, #112]	; 0x70
 800a4fe:	415b      	adcs	r3, r3
 800a500:	677b      	str	r3, [r7, #116]	; 0x74
 800a502:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a506:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a50a:	f7f6 fbad 	bl	8000c68 <__aeabi_uldivmod>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4b92      	ldr	r3, [pc, #584]	; (800a75c <UART_SetConfig+0x3dc>)
 800a514:	fba3 1302 	umull	r1, r3, r3, r2
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	2164      	movs	r1, #100	; 0x64
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	3332      	adds	r3, #50	; 0x32
 800a526:	4a8d      	ldr	r2, [pc, #564]	; (800a75c <UART_SetConfig+0x3dc>)
 800a528:	fba2 2303 	umull	r2, r3, r2, r3
 800a52c:	095b      	lsrs	r3, r3, #5
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a534:	441e      	add	r6, r3
 800a536:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a53a:	4618      	mov	r0, r3
 800a53c:	f04f 0100 	mov.w	r1, #0
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	1894      	adds	r4, r2, r2
 800a546:	66bc      	str	r4, [r7, #104]	; 0x68
 800a548:	415b      	adcs	r3, r3
 800a54a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a54c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a550:	1812      	adds	r2, r2, r0
 800a552:	eb41 0303 	adc.w	r3, r1, r3
 800a556:	f04f 0400 	mov.w	r4, #0
 800a55a:	f04f 0500 	mov.w	r5, #0
 800a55e:	00dd      	lsls	r5, r3, #3
 800a560:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a564:	00d4      	lsls	r4, r2, #3
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	1814      	adds	r4, r2, r0
 800a56c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a570:	414b      	adcs	r3, r1
 800a572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	1891      	adds	r1, r2, r2
 800a584:	6639      	str	r1, [r7, #96]	; 0x60
 800a586:	415b      	adcs	r3, r3
 800a588:	667b      	str	r3, [r7, #100]	; 0x64
 800a58a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a58e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a592:	f7f6 fb69 	bl	8000c68 <__aeabi_uldivmod>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4b70      	ldr	r3, [pc, #448]	; (800a75c <UART_SetConfig+0x3dc>)
 800a59c:	fba3 1302 	umull	r1, r3, r3, r2
 800a5a0:	095b      	lsrs	r3, r3, #5
 800a5a2:	2164      	movs	r1, #100	; 0x64
 800a5a4:	fb01 f303 	mul.w	r3, r1, r3
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	3332      	adds	r3, #50	; 0x32
 800a5ae:	4a6b      	ldr	r2, [pc, #428]	; (800a75c <UART_SetConfig+0x3dc>)
 800a5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b4:	095b      	lsrs	r3, r3, #5
 800a5b6:	f003 0207 	and.w	r2, r3, #7
 800a5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4432      	add	r2, r6
 800a5c2:	609a      	str	r2, [r3, #8]
 800a5c4:	e26d      	b.n	800aaa2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5c6:	f7ff f839 	bl	800963c <HAL_RCC_GetPCLK1Freq>
 800a5ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5d2:	461c      	mov	r4, r3
 800a5d4:	f04f 0500 	mov.w	r5, #0
 800a5d8:	4622      	mov	r2, r4
 800a5da:	462b      	mov	r3, r5
 800a5dc:	1891      	adds	r1, r2, r2
 800a5de:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5e0:	415b      	adcs	r3, r3
 800a5e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5e8:	1912      	adds	r2, r2, r4
 800a5ea:	eb45 0303 	adc.w	r3, r5, r3
 800a5ee:	f04f 0000 	mov.w	r0, #0
 800a5f2:	f04f 0100 	mov.w	r1, #0
 800a5f6:	00d9      	lsls	r1, r3, #3
 800a5f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5fc:	00d0      	lsls	r0, r2, #3
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	1911      	adds	r1, r2, r4
 800a604:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800a608:	416b      	adcs	r3, r5
 800a60a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	461a      	mov	r2, r3
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	1891      	adds	r1, r2, r2
 800a61c:	6539      	str	r1, [r7, #80]	; 0x50
 800a61e:	415b      	adcs	r3, r3
 800a620:	657b      	str	r3, [r7, #84]	; 0x54
 800a622:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a626:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a62a:	f7f6 fb1d 	bl	8000c68 <__aeabi_uldivmod>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4b4a      	ldr	r3, [pc, #296]	; (800a75c <UART_SetConfig+0x3dc>)
 800a634:	fba3 2302 	umull	r2, r3, r3, r2
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	011e      	lsls	r6, r3, #4
 800a63c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a640:	461c      	mov	r4, r3
 800a642:	f04f 0500 	mov.w	r5, #0
 800a646:	4622      	mov	r2, r4
 800a648:	462b      	mov	r3, r5
 800a64a:	1891      	adds	r1, r2, r2
 800a64c:	64b9      	str	r1, [r7, #72]	; 0x48
 800a64e:	415b      	adcs	r3, r3
 800a650:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a652:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a656:	1912      	adds	r2, r2, r4
 800a658:	eb45 0303 	adc.w	r3, r5, r3
 800a65c:	f04f 0000 	mov.w	r0, #0
 800a660:	f04f 0100 	mov.w	r1, #0
 800a664:	00d9      	lsls	r1, r3, #3
 800a666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a66a:	00d0      	lsls	r0, r2, #3
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	1911      	adds	r1, r2, r4
 800a672:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a676:	416b      	adcs	r3, r5
 800a678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	461a      	mov	r2, r3
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	1891      	adds	r1, r2, r2
 800a68a:	6439      	str	r1, [r7, #64]	; 0x40
 800a68c:	415b      	adcs	r3, r3
 800a68e:	647b      	str	r3, [r7, #68]	; 0x44
 800a690:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a694:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800a698:	f7f6 fae6 	bl	8000c68 <__aeabi_uldivmod>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <UART_SetConfig+0x3dc>)
 800a6a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	2164      	movs	r1, #100	; 0x64
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	3332      	adds	r3, #50	; 0x32
 800a6b4:	4a29      	ldr	r2, [pc, #164]	; (800a75c <UART_SetConfig+0x3dc>)
 800a6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ba:	095b      	lsrs	r3, r3, #5
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6c2:	441e      	add	r6, r3
 800a6c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f04f 0100 	mov.w	r1, #0
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	1894      	adds	r4, r2, r2
 800a6d4:	63bc      	str	r4, [r7, #56]	; 0x38
 800a6d6:	415b      	adcs	r3, r3
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a6de:	1812      	adds	r2, r2, r0
 800a6e0:	eb41 0303 	adc.w	r3, r1, r3
 800a6e4:	f04f 0400 	mov.w	r4, #0
 800a6e8:	f04f 0500 	mov.w	r5, #0
 800a6ec:	00dd      	lsls	r5, r3, #3
 800a6ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6f2:	00d4      	lsls	r4, r2, #3
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	1814      	adds	r4, r2, r0
 800a6fa:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800a6fe:	414b      	adcs	r3, r1
 800a700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	1891      	adds	r1, r2, r2
 800a712:	6339      	str	r1, [r7, #48]	; 0x30
 800a714:	415b      	adcs	r3, r3
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
 800a718:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a71c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a720:	f7f6 faa2 	bl	8000c68 <__aeabi_uldivmod>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <UART_SetConfig+0x3dc>)
 800a72a:	fba3 1302 	umull	r1, r3, r3, r2
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	2164      	movs	r1, #100	; 0x64
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	3332      	adds	r3, #50	; 0x32
 800a73c:	4a07      	ldr	r2, [pc, #28]	; (800a75c <UART_SetConfig+0x3dc>)
 800a73e:	fba2 2303 	umull	r2, r3, r2, r3
 800a742:	095b      	lsrs	r3, r3, #5
 800a744:	f003 0207 	and.w	r2, r3, #7
 800a748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4432      	add	r2, r6
 800a750:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a752:	e1a6      	b.n	800aaa2 <UART_SetConfig+0x722>
 800a754:	40011000 	.word	0x40011000
 800a758:	40011400 	.word	0x40011400
 800a75c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	4bd1      	ldr	r3, [pc, #836]	; (800aaac <UART_SetConfig+0x72c>)
 800a768:	429a      	cmp	r2, r3
 800a76a:	d006      	beq.n	800a77a <UART_SetConfig+0x3fa>
 800a76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4bcf      	ldr	r3, [pc, #828]	; (800aab0 <UART_SetConfig+0x730>)
 800a774:	429a      	cmp	r2, r3
 800a776:	f040 80ca 	bne.w	800a90e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a77a:	f7fe ff73 	bl	8009664 <HAL_RCC_GetPCLK2Freq>
 800a77e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a786:	461c      	mov	r4, r3
 800a788:	f04f 0500 	mov.w	r5, #0
 800a78c:	4622      	mov	r2, r4
 800a78e:	462b      	mov	r3, r5
 800a790:	1891      	adds	r1, r2, r2
 800a792:	62b9      	str	r1, [r7, #40]	; 0x28
 800a794:	415b      	adcs	r3, r3
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a79c:	1912      	adds	r2, r2, r4
 800a79e:	eb45 0303 	adc.w	r3, r5, r3
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f04f 0100 	mov.w	r1, #0
 800a7aa:	00d9      	lsls	r1, r3, #3
 800a7ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7b0:	00d0      	lsls	r0, r2, #3
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	eb12 0a04 	adds.w	sl, r2, r4
 800a7ba:	eb43 0b05 	adc.w	fp, r3, r5
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f04f 0100 	mov.w	r1, #0
 800a7ca:	f04f 0200 	mov.w	r2, #0
 800a7ce:	f04f 0300 	mov.w	r3, #0
 800a7d2:	008b      	lsls	r3, r1, #2
 800a7d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a7d8:	0082      	lsls	r2, r0, #2
 800a7da:	4650      	mov	r0, sl
 800a7dc:	4659      	mov	r1, fp
 800a7de:	f7f6 fa43 	bl	8000c68 <__aeabi_uldivmod>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4bb3      	ldr	r3, [pc, #716]	; (800aab4 <UART_SetConfig+0x734>)
 800a7e8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	011e      	lsls	r6, r3, #4
 800a7f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f04f 0100 	mov.w	r1, #0
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	1894      	adds	r4, r2, r2
 800a800:	623c      	str	r4, [r7, #32]
 800a802:	415b      	adcs	r3, r3
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
 800a806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a80a:	1812      	adds	r2, r2, r0
 800a80c:	eb41 0303 	adc.w	r3, r1, r3
 800a810:	f04f 0400 	mov.w	r4, #0
 800a814:	f04f 0500 	mov.w	r5, #0
 800a818:	00dd      	lsls	r5, r3, #3
 800a81a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a81e:	00d4      	lsls	r4, r2, #3
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	1814      	adds	r4, r2, r0
 800a826:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800a82a:	414b      	adcs	r3, r1
 800a82c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	4618      	mov	r0, r3
 800a838:	f04f 0100 	mov.w	r1, #0
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	008b      	lsls	r3, r1, #2
 800a846:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a84a:	0082      	lsls	r2, r0, #2
 800a84c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800a850:	f7f6 fa0a 	bl	8000c68 <__aeabi_uldivmod>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4b96      	ldr	r3, [pc, #600]	; (800aab4 <UART_SetConfig+0x734>)
 800a85a:	fba3 1302 	umull	r1, r3, r3, r2
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	2164      	movs	r1, #100	; 0x64
 800a862:	fb01 f303 	mul.w	r3, r1, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	3332      	adds	r3, #50	; 0x32
 800a86c:	4a91      	ldr	r2, [pc, #580]	; (800aab4 <UART_SetConfig+0x734>)
 800a86e:	fba2 2303 	umull	r2, r3, r2, r3
 800a872:	095b      	lsrs	r3, r3, #5
 800a874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a878:	441e      	add	r6, r3
 800a87a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a87e:	4618      	mov	r0, r3
 800a880:	f04f 0100 	mov.w	r1, #0
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	1894      	adds	r4, r2, r2
 800a88a:	61bc      	str	r4, [r7, #24]
 800a88c:	415b      	adcs	r3, r3
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a894:	1812      	adds	r2, r2, r0
 800a896:	eb41 0303 	adc.w	r3, r1, r3
 800a89a:	f04f 0400 	mov.w	r4, #0
 800a89e:	f04f 0500 	mov.w	r5, #0
 800a8a2:	00dd      	lsls	r5, r3, #3
 800a8a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8a8:	00d4      	lsls	r4, r2, #3
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	1814      	adds	r4, r2, r0
 800a8b0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800a8b4:	414b      	adcs	r3, r1
 800a8b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f04f 0100 	mov.w	r1, #0
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	008b      	lsls	r3, r1, #2
 800a8d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a8d4:	0082      	lsls	r2, r0, #2
 800a8d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a8da:	f7f6 f9c5 	bl	8000c68 <__aeabi_uldivmod>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4b74      	ldr	r3, [pc, #464]	; (800aab4 <UART_SetConfig+0x734>)
 800a8e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8e8:	095b      	lsrs	r3, r3, #5
 800a8ea:	2164      	movs	r1, #100	; 0x64
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	3332      	adds	r3, #50	; 0x32
 800a8f6:	4a6f      	ldr	r2, [pc, #444]	; (800aab4 <UART_SetConfig+0x734>)
 800a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	f003 020f 	and.w	r2, r3, #15
 800a902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4432      	add	r2, r6
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	e0c9      	b.n	800aaa2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a90e:	f7fe fe95 	bl	800963c <HAL_RCC_GetPCLK1Freq>
 800a912:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a91a:	461c      	mov	r4, r3
 800a91c:	f04f 0500 	mov.w	r5, #0
 800a920:	4622      	mov	r2, r4
 800a922:	462b      	mov	r3, r5
 800a924:	1891      	adds	r1, r2, r2
 800a926:	6139      	str	r1, [r7, #16]
 800a928:	415b      	adcs	r3, r3
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a930:	1912      	adds	r2, r2, r4
 800a932:	eb45 0303 	adc.w	r3, r5, r3
 800a936:	f04f 0000 	mov.w	r0, #0
 800a93a:	f04f 0100 	mov.w	r1, #0
 800a93e:	00d9      	lsls	r1, r3, #3
 800a940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a944:	00d0      	lsls	r0, r2, #3
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	eb12 0804 	adds.w	r8, r2, r4
 800a94e:	eb43 0905 	adc.w	r9, r3, r5
 800a952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	4618      	mov	r0, r3
 800a95a:	f04f 0100 	mov.w	r1, #0
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	008b      	lsls	r3, r1, #2
 800a968:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a96c:	0082      	lsls	r2, r0, #2
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f6 f979 	bl	8000c68 <__aeabi_uldivmod>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4b4e      	ldr	r3, [pc, #312]	; (800aab4 <UART_SetConfig+0x734>)
 800a97c:	fba3 2302 	umull	r2, r3, r3, r2
 800a980:	095b      	lsrs	r3, r3, #5
 800a982:	011e      	lsls	r6, r3, #4
 800a984:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a988:	4618      	mov	r0, r3
 800a98a:	f04f 0100 	mov.w	r1, #0
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	1894      	adds	r4, r2, r2
 800a994:	60bc      	str	r4, [r7, #8]
 800a996:	415b      	adcs	r3, r3
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a99e:	1812      	adds	r2, r2, r0
 800a9a0:	eb41 0303 	adc.w	r3, r1, r3
 800a9a4:	f04f 0400 	mov.w	r4, #0
 800a9a8:	f04f 0500 	mov.w	r5, #0
 800a9ac:	00dd      	lsls	r5, r3, #3
 800a9ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9b2:	00d4      	lsls	r4, r2, #3
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	1814      	adds	r4, r2, r0
 800a9ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800a9be:	414b      	adcs	r3, r1
 800a9c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f04f 0100 	mov.w	r1, #0
 800a9d0:	f04f 0200 	mov.w	r2, #0
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	008b      	lsls	r3, r1, #2
 800a9da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9de:	0082      	lsls	r2, r0, #2
 800a9e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a9e4:	f7f6 f940 	bl	8000c68 <__aeabi_uldivmod>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4b31      	ldr	r3, [pc, #196]	; (800aab4 <UART_SetConfig+0x734>)
 800a9ee:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	2164      	movs	r1, #100	; 0x64
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	3332      	adds	r3, #50	; 0x32
 800aa00:	4a2c      	ldr	r2, [pc, #176]	; (800aab4 <UART_SetConfig+0x734>)
 800aa02:	fba2 2303 	umull	r2, r3, r2, r3
 800aa06:	095b      	lsrs	r3, r3, #5
 800aa08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa0c:	441e      	add	r6, r3
 800aa0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa12:	4618      	mov	r0, r3
 800aa14:	f04f 0100 	mov.w	r1, #0
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	1894      	adds	r4, r2, r2
 800aa1e:	603c      	str	r4, [r7, #0]
 800aa20:	415b      	adcs	r3, r3
 800aa22:	607b      	str	r3, [r7, #4]
 800aa24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa28:	1812      	adds	r2, r2, r0
 800aa2a:	eb41 0303 	adc.w	r3, r1, r3
 800aa2e:	f04f 0400 	mov.w	r4, #0
 800aa32:	f04f 0500 	mov.w	r5, #0
 800aa36:	00dd      	lsls	r5, r3, #3
 800aa38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa3c:	00d4      	lsls	r4, r2, #3
 800aa3e:	4622      	mov	r2, r4
 800aa40:	462b      	mov	r3, r5
 800aa42:	1814      	adds	r4, r2, r0
 800aa44:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800aa48:	414b      	adcs	r3, r1
 800aa4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f04f 0100 	mov.w	r1, #0
 800aa5a:	f04f 0200 	mov.w	r2, #0
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	008b      	lsls	r3, r1, #2
 800aa64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa68:	0082      	lsls	r2, r0, #2
 800aa6a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800aa6e:	f7f6 f8fb 	bl	8000c68 <__aeabi_uldivmod>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <UART_SetConfig+0x734>)
 800aa78:	fba3 1302 	umull	r1, r3, r3, r2
 800aa7c:	095b      	lsrs	r3, r3, #5
 800aa7e:	2164      	movs	r1, #100	; 0x64
 800aa80:	fb01 f303 	mul.w	r3, r1, r3
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	3332      	adds	r3, #50	; 0x32
 800aa8a:	4a0a      	ldr	r2, [pc, #40]	; (800aab4 <UART_SetConfig+0x734>)
 800aa8c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	f003 020f 	and.w	r2, r3, #15
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4432      	add	r2, r6
 800aa9e:	609a      	str	r2, [r3, #8]
}
 800aaa0:	e7ff      	b.n	800aaa2 <UART_SetConfig+0x722>
 800aaa2:	bf00      	nop
 800aaa4:	37f4      	adds	r7, #244	; 0xf4
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	40011000 	.word	0x40011000
 800aab0:	40011400 	.word	0x40011400
 800aab4:	51eb851f 	.word	0x51eb851f

0800aab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aab8:	b084      	sub	sp, #16
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	f107 001c 	add.w	r0, r7, #28
 800aac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d122      	bne.n	800ab16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d105      	bne.n	800ab0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fac6 	bl	800c09c <USB_CoreReset>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
 800ab14:	e01a      	b.n	800ab4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 faba 	bl	800c09c <USB_CoreReset>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
 800ab3e:	e005      	b.n	800ab4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d10b      	bne.n	800ab6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f043 0206 	orr.w	r2, r3, #6
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f043 0220 	orr.w	r2, r3, #32
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab76:	b004      	add	sp, #16
 800ab78:	4770      	bx	lr
	...

0800ab7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d165      	bne.n	800ac5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	4a41      	ldr	r2, [pc, #260]	; (800ac98 <USB_SetTurnaroundTime+0x11c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d906      	bls.n	800aba6 <USB_SetTurnaroundTime+0x2a>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	4a40      	ldr	r2, [pc, #256]	; (800ac9c <USB_SetTurnaroundTime+0x120>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d202      	bcs.n	800aba6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aba0:	230f      	movs	r3, #15
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	e062      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	4a3c      	ldr	r2, [pc, #240]	; (800ac9c <USB_SetTurnaroundTime+0x120>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d306      	bcc.n	800abbc <USB_SetTurnaroundTime+0x40>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	4a3b      	ldr	r2, [pc, #236]	; (800aca0 <USB_SetTurnaroundTime+0x124>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d202      	bcs.n	800abbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800abb6:	230e      	movs	r3, #14
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	e057      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	4a38      	ldr	r2, [pc, #224]	; (800aca0 <USB_SetTurnaroundTime+0x124>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d306      	bcc.n	800abd2 <USB_SetTurnaroundTime+0x56>
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	4a37      	ldr	r2, [pc, #220]	; (800aca4 <USB_SetTurnaroundTime+0x128>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d202      	bcs.n	800abd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800abcc:	230d      	movs	r3, #13
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e04c      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	4a33      	ldr	r2, [pc, #204]	; (800aca4 <USB_SetTurnaroundTime+0x128>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d306      	bcc.n	800abe8 <USB_SetTurnaroundTime+0x6c>
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	4a32      	ldr	r2, [pc, #200]	; (800aca8 <USB_SetTurnaroundTime+0x12c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d802      	bhi.n	800abe8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800abe2:	230c      	movs	r3, #12
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	e041      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4a2f      	ldr	r2, [pc, #188]	; (800aca8 <USB_SetTurnaroundTime+0x12c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d906      	bls.n	800abfe <USB_SetTurnaroundTime+0x82>
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	4a2e      	ldr	r2, [pc, #184]	; (800acac <USB_SetTurnaroundTime+0x130>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d802      	bhi.n	800abfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800abf8:	230b      	movs	r3, #11
 800abfa:	617b      	str	r3, [r7, #20]
 800abfc:	e036      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4a2a      	ldr	r2, [pc, #168]	; (800acac <USB_SetTurnaroundTime+0x130>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d906      	bls.n	800ac14 <USB_SetTurnaroundTime+0x98>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	4a29      	ldr	r2, [pc, #164]	; (800acb0 <USB_SetTurnaroundTime+0x134>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d802      	bhi.n	800ac14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ac0e:	230a      	movs	r3, #10
 800ac10:	617b      	str	r3, [r7, #20]
 800ac12:	e02b      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4a26      	ldr	r2, [pc, #152]	; (800acb0 <USB_SetTurnaroundTime+0x134>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d906      	bls.n	800ac2a <USB_SetTurnaroundTime+0xae>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	4a25      	ldr	r2, [pc, #148]	; (800acb4 <USB_SetTurnaroundTime+0x138>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d202      	bcs.n	800ac2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ac24:	2309      	movs	r3, #9
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e020      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	4a21      	ldr	r2, [pc, #132]	; (800acb4 <USB_SetTurnaroundTime+0x138>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d306      	bcc.n	800ac40 <USB_SetTurnaroundTime+0xc4>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	4a20      	ldr	r2, [pc, #128]	; (800acb8 <USB_SetTurnaroundTime+0x13c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d802      	bhi.n	800ac40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	617b      	str	r3, [r7, #20]
 800ac3e:	e015      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4a1d      	ldr	r2, [pc, #116]	; (800acb8 <USB_SetTurnaroundTime+0x13c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d906      	bls.n	800ac56 <USB_SetTurnaroundTime+0xda>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	4a1c      	ldr	r2, [pc, #112]	; (800acbc <USB_SetTurnaroundTime+0x140>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d202      	bcs.n	800ac56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ac50:	2307      	movs	r3, #7
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	e00a      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ac56:	2306      	movs	r3, #6
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e007      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d102      	bne.n	800ac68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ac62:	2309      	movs	r3, #9
 800ac64:	617b      	str	r3, [r7, #20]
 800ac66:	e001      	b.n	800ac6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ac68:	2309      	movs	r3, #9
 800ac6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	029b      	lsls	r3, r3, #10
 800ac80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ac84:	431a      	orrs	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	00d8acbf 	.word	0x00d8acbf
 800ac9c:	00e4e1c0 	.word	0x00e4e1c0
 800aca0:	00f42400 	.word	0x00f42400
 800aca4:	01067380 	.word	0x01067380
 800aca8:	011a499f 	.word	0x011a499f
 800acac:	01312cff 	.word	0x01312cff
 800acb0:	014ca43f 	.word	0x014ca43f
 800acb4:	016e3600 	.word	0x016e3600
 800acb8:	01a6ab1f 	.word	0x01a6ab1f
 800acbc:	01e84800 	.word	0x01e84800

0800acc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f043 0201 	orr.w	r2, r3, #1
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f023 0201 	bic.w	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d106      	bne.n	800ad30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	60da      	str	r2, [r3, #12]
 800ad2e:	e00b      	b.n	800ad48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	e001      	b.n	800ad48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e003      	b.n	800ad50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ad48:	2032      	movs	r0, #50	; 0x32
 800ad4a:	f7fb fbe7 	bl	800651c <HAL_Delay>

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad58:	b084      	sub	sp, #16
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]
 800ad76:	e009      	b.n	800ad8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3340      	adds	r3, #64	; 0x40
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	2b0e      	cmp	r3, #14
 800ad90:	d9f2      	bls.n	800ad78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d11c      	bne.n	800add2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ada6:	f043 0302 	orr.w	r3, r3, #2
 800adaa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	639a      	str	r2, [r3, #56]	; 0x38
 800add0:	e00b      	b.n	800adea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adf0:	461a      	mov	r2, r3
 800adf2:	2300      	movs	r3, #0
 800adf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adfc:	4619      	mov	r1, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae04:	461a      	mov	r2, r3
 800ae06:	680b      	ldr	r3, [r1, #0]
 800ae08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d10c      	bne.n	800ae2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d104      	bne.n	800ae20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae16:	2100      	movs	r1, #0
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f949 	bl	800b0b0 <USB_SetDevSpeed>
 800ae1e:	e008      	b.n	800ae32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae20:	2101      	movs	r1, #1
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f944 	bl	800b0b0 <USB_SetDevSpeed>
 800ae28:	e003      	b.n	800ae32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae2a:	2103      	movs	r1, #3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f93f 	bl	800b0b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae32:	2110      	movs	r1, #16
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f8f3 	bl	800b020 <USB_FlushTxFifo>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f911 	bl	800b06c <USB_FlushRxFifo>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae66:	461a      	mov	r2, r3
 800ae68:	2300      	movs	r3, #0
 800ae6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae72:	461a      	mov	r2, r3
 800ae74:	2300      	movs	r3, #0
 800ae76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	e043      	b.n	800af06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae94:	d118      	bne.n	800aec8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea8:	461a      	mov	r2, r3
 800aeaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	e013      	b.n	800aeda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	015a      	lsls	r2, r3, #5
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aebe:	461a      	mov	r2, r3
 800aec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	e008      	b.n	800aeda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	015a      	lsls	r2, r3, #5
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed4:	461a      	mov	r2, r3
 800aed6:	2300      	movs	r3, #0
 800aed8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	461a      	mov	r2, r3
 800aee8:	2300      	movs	r3, #0
 800aeea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef8:	461a      	mov	r2, r3
 800aefa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aefe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3301      	adds	r3, #1
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d3b7      	bcc.n	800ae7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	e043      	b.n	800af9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af2a:	d118      	bne.n	800af5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3e:	461a      	mov	r2, r3
 800af40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	e013      	b.n	800af70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af54:	461a      	mov	r2, r3
 800af56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	e008      	b.n	800af70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6a:	461a      	mov	r2, r3
 800af6c:	2300      	movs	r3, #0
 800af6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7c:	461a      	mov	r2, r3
 800af7e:	2300      	movs	r3, #0
 800af80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8e:	461a      	mov	r2, r3
 800af90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	3301      	adds	r3, #1
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d3b7      	bcc.n	800af14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800afc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d105      	bne.n	800afd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	f043 0210 	orr.w	r2, r3, #16
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	699a      	ldr	r2, [r3, #24]
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <USB_DevInit+0x2c4>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	f043 0208 	orr.w	r2, r3, #8
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d107      	bne.n	800b00c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b004:	f043 0304 	orr.w	r3, r3, #4
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b018:	b004      	add	sp, #16
 800b01a:	4770      	bx	lr
 800b01c:	803c3800 	.word	0x803c3800

0800b020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	019b      	lsls	r3, r3, #6
 800b032:	f043 0220 	orr.w	r2, r3, #32
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4a09      	ldr	r2, [pc, #36]	; (800b068 <USB_FlushTxFifo+0x48>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d901      	bls.n	800b04c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e006      	b.n	800b05a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b20      	cmp	r3, #32
 800b056:	d0f0      	beq.n	800b03a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	00030d40 	.word	0x00030d40

0800b06c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2210      	movs	r2, #16
 800b07c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3301      	adds	r3, #1
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4a09      	ldr	r2, [pc, #36]	; (800b0ac <USB_FlushRxFifo+0x40>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d901      	bls.n	800b090 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e006      	b.n	800b09e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b10      	cmp	r3, #16
 800b09a:	d0f0      	beq.n	800b07e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	00030d40 	.word	0x00030d40

0800b0b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b087      	sub	sp, #28
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 0306 	and.w	r3, r3, #6
 800b0fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
 800b106:	e00a      	b.n	800b11e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d002      	beq.n	800b114 <USB_GetDevSpeed+0x32>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b06      	cmp	r3, #6
 800b112:	d102      	bne.n	800b11a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b114:	2302      	movs	r3, #2
 800b116:	75fb      	strb	r3, [r7, #23]
 800b118:	e001      	b.n	800b11e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b11a:	230f      	movs	r3, #15
 800b11c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	785b      	ldrb	r3, [r3, #1]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d13a      	bne.n	800b1be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b14e:	69da      	ldr	r2, [r3, #28]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	2101      	movs	r1, #1
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	b29b      	uxth	r3, r3
 800b160:	68f9      	ldr	r1, [r7, #12]
 800b162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b166:	4313      	orrs	r3, r2
 800b168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d155      	bne.n	800b22c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	78db      	ldrb	r3, [r3, #3]
 800b19a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b19c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	059b      	lsls	r3, r3, #22
 800b1a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e036      	b.n	800b22c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c4:	69da      	ldr	r2, [r3, #28]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d4:	041b      	lsls	r3, r3, #16
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11a      	bne.n	800b22c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b212:	430b      	orrs	r3, r1
 800b214:	4313      	orrs	r3, r2
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b22a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
	...

0800b23c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d161      	bne.n	800b31c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b26a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b26e:	d11f      	bne.n	800b2b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	0151      	lsls	r1, r2, #5
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	440a      	add	r2, r1
 800b286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b28a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b28e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	0151      	lsls	r1, r2, #5
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	440a      	add	r2, r1
 800b2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f003 030f 	and.w	r3, r3, #15
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	43db      	mvns	r3, r3
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2da:	69da      	ldr	r2, [r3, #28]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	43db      	mvns	r3, r3
 800b2ee:	68f9      	ldr	r1, [r7, #12]
 800b2f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	0159      	lsls	r1, r3, #5
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	440b      	add	r3, r1
 800b30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b312:	4619      	mov	r1, r3
 800b314:	4b35      	ldr	r3, [pc, #212]	; (800b3ec <USB_DeactivateEndpoint+0x1b0>)
 800b316:	4013      	ands	r3, r2
 800b318:	600b      	str	r3, [r1, #0]
 800b31a:	e060      	b.n	800b3de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b32e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b332:	d11f      	bne.n	800b374 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b36e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f003 030f 	and.w	r3, r3, #15
 800b384:	2101      	movs	r1, #1
 800b386:	fa01 f303 	lsl.w	r3, r1, r3
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	43db      	mvns	r3, r3
 800b38e:	68f9      	ldr	r1, [r7, #12]
 800b390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b394:	4013      	ands	r3, r2
 800b396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ae:	041b      	lsls	r3, r3, #16
 800b3b0:	43db      	mvns	r3, r3
 800b3b2:	68f9      	ldr	r1, [r7, #12]
 800b3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	0159      	lsls	r1, r3, #5
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	440b      	add	r3, r1
 800b3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <USB_DeactivateEndpoint+0x1b4>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	ec337800 	.word	0xec337800
 800b3f0:	eff37800 	.word	0xeff37800

0800b3f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4613      	mov	r3, r2
 800b400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	2b01      	cmp	r3, #1
 800b412:	f040 815c 	bne.w	800b6ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d132      	bne.n	800b484 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b43c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	69fa      	ldr	r2, [r7, #28]
 800b456:	440a      	add	r2, r1
 800b458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b45c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	0151      	lsls	r1, r2, #5
 800b474:	69fa      	ldr	r2, [r7, #28]
 800b476:	440a      	add	r2, r1
 800b478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47c:	0cdb      	lsrs	r3, r3, #19
 800b47e:	04db      	lsls	r3, r3, #19
 800b480:	6113      	str	r3, [r2, #16]
 800b482:	e074      	b.n	800b56e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	69ba      	ldr	r2, [r7, #24]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	69fa      	ldr	r2, [r7, #28]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b49e:	0cdb      	lsrs	r3, r3, #19
 800b4a0:	04db      	lsls	r3, r3, #19
 800b4a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d4:	691a      	ldr	r2, [r3, #16]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	6959      	ldr	r1, [r3, #20]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	440b      	add	r3, r1
 800b4e0:	1e59      	subs	r1, r3, #1
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4ea:	04d9      	lsls	r1, r3, #19
 800b4ec:	4b9d      	ldr	r3, [pc, #628]	; (800b764 <USB_EPStartXfer+0x370>)
 800b4ee:	400b      	ands	r3, r1
 800b4f0:	69b9      	ldr	r1, [r7, #24]
 800b4f2:	0148      	lsls	r0, r1, #5
 800b4f4:	69f9      	ldr	r1, [r7, #28]
 800b4f6:	4401      	add	r1, r0
 800b4f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	015a      	lsls	r2, r3, #5
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	4413      	add	r3, r2
 800b508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50c:	691a      	ldr	r2, [r3, #16]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b516:	69b9      	ldr	r1, [r7, #24]
 800b518:	0148      	lsls	r0, r1, #5
 800b51a:	69f9      	ldr	r1, [r7, #28]
 800b51c:	4401      	add	r1, r0
 800b51e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b522:	4313      	orrs	r3, r2
 800b524:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	78db      	ldrb	r3, [r3, #3]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d11f      	bne.n	800b56e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	0151      	lsls	r1, r2, #5
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	440a      	add	r2, r1
 800b544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b548:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b54c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	0151      	lsls	r1, r2, #5
 800b560:	69fa      	ldr	r2, [r7, #28]
 800b562:	440a      	add	r2, r1
 800b564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b56c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d14b      	bne.n	800b60c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	015a      	lsls	r2, r3, #5
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	4413      	add	r3, r2
 800b584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b588:	461a      	mov	r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	78db      	ldrb	r3, [r3, #3]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d128      	bne.n	800b5ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d110      	bne.n	800b5ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	e00f      	b.n	800b5ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	0151      	lsls	r1, r2, #5
 800b5dc:	69fa      	ldr	r2, [r7, #28]
 800b5de:	440a      	add	r2, r1
 800b5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	015a      	lsls	r2, r3, #5
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	0151      	lsls	r1, r2, #5
 800b5fc:	69fa      	ldr	r2, [r7, #28]
 800b5fe:	440a      	add	r2, r1
 800b600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	e12f      	b.n	800b86c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	4413      	add	r3, r2
 800b614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	0151      	lsls	r1, r2, #5
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	440a      	add	r2, r1
 800b622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b62a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	78db      	ldrb	r3, [r3, #3]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d015      	beq.n	800b660 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 8117 	beq.w	800b86c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	f003 030f 	and.w	r3, r3, #15
 800b64e:	2101      	movs	r1, #1
 800b650:	fa01 f303 	lsl.w	r3, r1, r3
 800b654:	69f9      	ldr	r1, [r7, #28]
 800b656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b65a:	4313      	orrs	r3, r2
 800b65c:	634b      	str	r3, [r1, #52]	; 0x34
 800b65e:	e105      	b.n	800b86c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d110      	bne.n	800b692 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e00f      	b.n	800b6b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	0151      	lsls	r1, r2, #5
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	440a      	add	r2, r1
 800b6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	68d9      	ldr	r1, [r3, #12]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	781a      	ldrb	r2, [r3, #0]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	b298      	uxth	r0, r3
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fa2b 	bl	800bb22 <USB_WritePacket>
 800b6cc:	e0ce      	b.n	800b86c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	0151      	lsls	r1, r2, #5
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	440a      	add	r2, r1
 800b6e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e8:	0cdb      	lsrs	r3, r3, #19
 800b6ea:	04db      	lsls	r3, r3, #19
 800b6ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	69ba      	ldr	r2, [r7, #24]
 800b6fe:	0151      	lsls	r1, r2, #5
 800b700:	69fa      	ldr	r2, [r7, #28]
 800b702:	440a      	add	r2, r1
 800b704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b70c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d126      	bne.n	800b768 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b726:	691a      	ldr	r2, [r3, #16]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b730:	69b9      	ldr	r1, [r7, #24]
 800b732:	0148      	lsls	r0, r1, #5
 800b734:	69f9      	ldr	r1, [r7, #28]
 800b736:	4401      	add	r1, r0
 800b738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b73c:	4313      	orrs	r3, r2
 800b73e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	0151      	lsls	r1, r2, #5
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	440a      	add	r2, r1
 800b756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b75a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b75e:	6113      	str	r3, [r2, #16]
 800b760:	e036      	b.n	800b7d0 <USB_EPStartXfer+0x3dc>
 800b762:	bf00      	nop
 800b764:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	695a      	ldr	r2, [r3, #20]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	4413      	add	r3, r2
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	691a      	ldr	r2, [r3, #16]
 800b78c:	8afb      	ldrh	r3, [r7, #22]
 800b78e:	04d9      	lsls	r1, r3, #19
 800b790:	4b39      	ldr	r3, [pc, #228]	; (800b878 <USB_EPStartXfer+0x484>)
 800b792:	400b      	ands	r3, r1
 800b794:	69b9      	ldr	r1, [r7, #24]
 800b796:	0148      	lsls	r0, r1, #5
 800b798:	69f9      	ldr	r1, [r7, #28]
 800b79a:	4401      	add	r1, r0
 800b79c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	691a      	ldr	r2, [r3, #16]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	8af9      	ldrh	r1, [r7, #22]
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7c0:	69b9      	ldr	r1, [r7, #24]
 800b7c2:	0148      	lsls	r0, r1, #5
 800b7c4:	69f9      	ldr	r1, [r7, #28]
 800b7c6:	4401      	add	r1, r0
 800b7c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d10d      	bne.n	800b7f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	68d9      	ldr	r1, [r3, #12]
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ee:	460a      	mov	r2, r1
 800b7f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	78db      	ldrb	r3, [r3, #3]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d128      	bne.n	800b84c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b806:	2b00      	cmp	r3, #0
 800b808:	d110      	bne.n	800b82c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e00f      	b.n	800b84c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	015a      	lsls	r2, r3, #5
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	4413      	add	r3, r2
 800b834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	0151      	lsls	r1, r2, #5
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	440a      	add	r2, r1
 800b842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b84a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	0151      	lsls	r1, r2, #5
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	440a      	add	r2, r1
 800b862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b86a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3720      	adds	r7, #32
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	1ff80000 	.word	0x1ff80000

0800b87c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	4613      	mov	r3, r2
 800b888:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	f040 80cd 	bne.w	800ba38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d132      	bne.n	800b90c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	015a      	lsls	r2, r3, #5
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	0151      	lsls	r1, r2, #5
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	440a      	add	r2, r1
 800b8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	0151      	lsls	r1, r2, #5
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	440a      	add	r2, r1
 800b900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b904:	0cdb      	lsrs	r3, r3, #19
 800b906:	04db      	lsls	r3, r3, #19
 800b908:	6113      	str	r3, [r2, #16]
 800b90a:	e04e      	b.n	800b9aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	0151      	lsls	r1, r2, #5
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	440a      	add	r2, r1
 800b922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b926:	0cdb      	lsrs	r3, r3, #19
 800b928:	04db      	lsls	r3, r3, #19
 800b92a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b946:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b94a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b94e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	695a      	ldr	r2, [r3, #20]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d903      	bls.n	800b964 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	0151      	lsls	r1, r2, #5
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	440a      	add	r2, r1
 800b97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b97e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b99a:	6939      	ldr	r1, [r7, #16]
 800b99c:	0148      	lsls	r0, r1, #5
 800b99e:	6979      	ldr	r1, [r7, #20]
 800b9a0:	4401      	add	r1, r0
 800b9a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d11e      	bne.n	800b9ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	693a      	ldr	r2, [r7, #16]
 800b9dc:	0151      	lsls	r1, r2, #5
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	440a      	add	r2, r1
 800b9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	e092      	b.n	800bb14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d07e      	beq.n	800bb14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	2101      	movs	r1, #1
 800ba28:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2c:	6979      	ldr	r1, [r7, #20]
 800ba2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba32:	4313      	orrs	r3, r2
 800ba34:	634b      	str	r3, [r1, #52]	; 0x34
 800ba36:	e06d      	b.n	800bb14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	0151      	lsls	r1, r2, #5
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba52:	0cdb      	lsrs	r3, r3, #19
 800ba54:	04db      	lsls	r3, r3, #19
 800ba56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	689a      	ldr	r2, [r3, #8]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bac2:	6939      	ldr	r1, [r7, #16]
 800bac4:	0148      	lsls	r0, r1, #5
 800bac6:	6979      	ldr	r1, [r7, #20]
 800bac8:	4401      	add	r1, r0
 800baca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bace:	4313      	orrs	r3, r2
 800bad0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d10d      	bne.n	800baf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d009      	beq.n	800baf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	68d9      	ldr	r1, [r3, #12]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	015a      	lsls	r2, r3, #5
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	4413      	add	r3, r2
 800baec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf0:	460a      	mov	r2, r1
 800baf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	0151      	lsls	r1, r2, #5
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	440a      	add	r2, r1
 800bb0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b089      	sub	sp, #36	; 0x24
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	461a      	mov	r2, r3
 800bb30:	460b      	mov	r3, r1
 800bb32:	71fb      	strb	r3, [r7, #7]
 800bb34:	4613      	mov	r3, r2
 800bb36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bb40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d11a      	bne.n	800bb7e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb48:	88bb      	ldrh	r3, [r7, #4]
 800bb4a:	3303      	adds	r3, #3
 800bb4c:	089b      	lsrs	r3, r3, #2
 800bb4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb50:	2300      	movs	r3, #0
 800bb52:	61bb      	str	r3, [r7, #24]
 800bb54:	e00f      	b.n	800bb76 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	031a      	lsls	r2, r3, #12
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb62:	461a      	mov	r2, r3
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	3301      	adds	r3, #1
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3eb      	bcc.n	800bb56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3724      	adds	r7, #36	; 0x24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b089      	sub	sp, #36	; 0x24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bba2:	88fb      	ldrh	r3, [r7, #6]
 800bba4:	3303      	adds	r3, #3
 800bba6:	089b      	lsrs	r3, r3, #2
 800bba8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61bb      	str	r3, [r7, #24]
 800bbae:	e00b      	b.n	800bbc8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d3ef      	bcc.n	800bbb0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bbd0:	69fb      	ldr	r3, [r7, #28]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3724      	adds	r7, #36	; 0x24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b085      	sub	sp, #20
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d12c      	bne.n	800bc54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	015a      	lsls	r2, r3, #5
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4413      	add	r3, r2
 800bc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db12      	blt.n	800bc32 <USB_EPSetStall+0x54>
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00f      	beq.n	800bc32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	0151      	lsls	r1, r2, #5
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	440a      	add	r2, r1
 800bc28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	0151      	lsls	r1, r2, #5
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	440a      	add	r2, r1
 800bc48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	e02b      	b.n	800bcac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	db12      	blt.n	800bc8c <USB_EPSetStall+0xae>
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00f      	beq.n	800bc8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	0151      	lsls	r1, r2, #5
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	440a      	add	r2, r1
 800bc82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	0151      	lsls	r1, r2, #5
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	440a      	add	r2, r1
 800bca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b085      	sub	sp, #20
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	785b      	ldrb	r3, [r3, #1]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d128      	bne.n	800bd28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	0151      	lsls	r1, r2, #5
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	440a      	add	r2, r1
 800bcec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	78db      	ldrb	r3, [r3, #3]
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d003      	beq.n	800bd06 <USB_EPClearStall+0x4c>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	78db      	ldrb	r3, [r3, #3]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d138      	bne.n	800bd78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	0151      	lsls	r1, r2, #5
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	440a      	add	r2, r1
 800bd1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	e027      	b.n	800bd78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	015a      	lsls	r2, r3, #5
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4413      	add	r3, r2
 800bd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	0151      	lsls	r1, r2, #5
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	440a      	add	r2, r1
 800bd3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	78db      	ldrb	r3, [r3, #3]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d003      	beq.n	800bd58 <USB_EPClearStall+0x9e>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	78db      	ldrb	r3, [r3, #3]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d10f      	bne.n	800bd78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	0151      	lsls	r1, r2, #5
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	440a      	add	r2, r1
 800bd6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b085      	sub	sp, #20
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bda4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bda8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdec:	f023 0303 	bic.w	r3, r3, #3
 800bdf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be00:	f023 0302 	bic.w	r3, r3, #2
 800be04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be2e:	f023 0303 	bic.w	r3, r3, #3
 800be32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be42:	f043 0302 	orr.w	r3, r3, #2
 800be46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4013      	ands	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	4013      	ands	r3, r2
 800be9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	0c1b      	lsrs	r3, r3, #16
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	4013      	ands	r3, r2
 800bed2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	b29b      	uxth	r3, r3
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	4013      	ands	r3, r2
 800bf10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf12:	68bb      	ldr	r3, [r7, #8]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf50:	01db      	lsls	r3, r3, #7
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
 800bf5c:	015a      	lsls	r2, r3, #5
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	4413      	add	r3, r2
 800bf62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	f003 0301 	and.w	r3, r3, #1
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bfb6:	f023 0307 	bic.w	r3, r3, #7
 800bfba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b087      	sub	sp, #28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	333c      	adds	r3, #60	; 0x3c
 800bff6:	3304      	adds	r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	4a26      	ldr	r2, [pc, #152]	; (800c098 <USB_EP0_OutStart+0xb8>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d90a      	bls.n	800c01a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c014:	d101      	bne.n	800c01a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	e037      	b.n	800c08a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c020:	461a      	mov	r2, r3
 800c022:	2300      	movs	r3, #0
 800c024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c048:	f043 0318 	orr.w	r3, r3, #24
 800c04c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c05c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c060:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c062:	7afb      	ldrb	r3, [r7, #11]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d10f      	bne.n	800c088 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06e:	461a      	mov	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c082:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	4f54300a 	.word	0x4f54300a

0800c09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	4a13      	ldr	r2, [pc, #76]	; (800c100 <USB_CoreReset+0x64>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d901      	bls.n	800c0ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e01b      	b.n	800c0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	daf2      	bge.n	800c0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	f043 0201 	orr.w	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4a09      	ldr	r2, [pc, #36]	; (800c100 <USB_CoreReset+0x64>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d901      	bls.n	800c0e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e006      	b.n	800c0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d0f0      	beq.n	800c0d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	00030d40 	.word	0x00030d40

0800c104 <main>:


#include "main.h"

int main(void)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0

  hwInit();
 800c108:	f7fa f964 	bl	80063d4 <hwInit>
  apInit();
 800c10c:	f7f4 ff5e 	bl	8000fcc <apInit>

  apMain();
 800c110:	f7f4 ff6a 	bl	8000fe8 <apMain>

  return 0;
 800c114:	2300      	movs	r3, #0


}
 800c116:	4618      	mov	r0, r3
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <__errno>:
 800c11c:	4b01      	ldr	r3, [pc, #4]	; (800c124 <__errno+0x8>)
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	200001f0 	.word	0x200001f0

0800c128 <__libc_init_array>:
 800c128:	b570      	push	{r4, r5, r6, lr}
 800c12a:	4d0d      	ldr	r5, [pc, #52]	; (800c160 <__libc_init_array+0x38>)
 800c12c:	4c0d      	ldr	r4, [pc, #52]	; (800c164 <__libc_init_array+0x3c>)
 800c12e:	1b64      	subs	r4, r4, r5
 800c130:	10a4      	asrs	r4, r4, #2
 800c132:	2600      	movs	r6, #0
 800c134:	42a6      	cmp	r6, r4
 800c136:	d109      	bne.n	800c14c <__libc_init_array+0x24>
 800c138:	4d0b      	ldr	r5, [pc, #44]	; (800c168 <__libc_init_array+0x40>)
 800c13a:	4c0c      	ldr	r4, [pc, #48]	; (800c16c <__libc_init_array+0x44>)
 800c13c:	f003 f9be 	bl	800f4bc <_init>
 800c140:	1b64      	subs	r4, r4, r5
 800c142:	10a4      	asrs	r4, r4, #2
 800c144:	2600      	movs	r6, #0
 800c146:	42a6      	cmp	r6, r4
 800c148:	d105      	bne.n	800c156 <__libc_init_array+0x2e>
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c150:	4798      	blx	r3
 800c152:	3601      	adds	r6, #1
 800c154:	e7ee      	b.n	800c134 <__libc_init_array+0xc>
 800c156:	f855 3b04 	ldr.w	r3, [r5], #4
 800c15a:	4798      	blx	r3
 800c15c:	3601      	adds	r6, #1
 800c15e:	e7f2      	b.n	800c146 <__libc_init_array+0x1e>
 800c160:	0800fedc 	.word	0x0800fedc
 800c164:	0800fedc 	.word	0x0800fedc
 800c168:	0800fedc 	.word	0x0800fedc
 800c16c:	0800fee0 	.word	0x0800fee0

0800c170 <malloc>:
 800c170:	4b02      	ldr	r3, [pc, #8]	; (800c17c <malloc+0xc>)
 800c172:	4601      	mov	r1, r0
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	f000 b871 	b.w	800c25c <_malloc_r>
 800c17a:	bf00      	nop
 800c17c:	200001f0 	.word	0x200001f0

0800c180 <free>:
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <free+0xc>)
 800c182:	4601      	mov	r1, r0
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	f000 b819 	b.w	800c1bc <_free_r>
 800c18a:	bf00      	nop
 800c18c:	200001f0 	.word	0x200001f0

0800c190 <memcpy>:
 800c190:	440a      	add	r2, r1
 800c192:	4291      	cmp	r1, r2
 800c194:	f100 33ff 	add.w	r3, r0, #4294967295
 800c198:	d100      	bne.n	800c19c <memcpy+0xc>
 800c19a:	4770      	bx	lr
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	d1f9      	bne.n	800c19e <memcpy+0xe>
 800c1aa:	bd10      	pop	{r4, pc}

0800c1ac <memset>:
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <_free_r>:
 800c1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1be:	2900      	cmp	r1, #0
 800c1c0:	d048      	beq.n	800c254 <_free_r+0x98>
 800c1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c6:	9001      	str	r0, [sp, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c1ce:	bfb8      	it	lt
 800c1d0:	18e4      	addlt	r4, r4, r3
 800c1d2:	f001 fbd7 	bl	800d984 <__malloc_lock>
 800c1d6:	4a20      	ldr	r2, [pc, #128]	; (800c258 <_free_r+0x9c>)
 800c1d8:	9801      	ldr	r0, [sp, #4]
 800c1da:	6813      	ldr	r3, [r2, #0]
 800c1dc:	4615      	mov	r5, r2
 800c1de:	b933      	cbnz	r3, 800c1ee <_free_r+0x32>
 800c1e0:	6063      	str	r3, [r4, #4]
 800c1e2:	6014      	str	r4, [r2, #0]
 800c1e4:	b003      	add	sp, #12
 800c1e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ea:	f001 bbd1 	b.w	800d990 <__malloc_unlock>
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	d90b      	bls.n	800c20a <_free_r+0x4e>
 800c1f2:	6821      	ldr	r1, [r4, #0]
 800c1f4:	1862      	adds	r2, r4, r1
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	bf04      	itt	eq
 800c1fa:	681a      	ldreq	r2, [r3, #0]
 800c1fc:	685b      	ldreq	r3, [r3, #4]
 800c1fe:	6063      	str	r3, [r4, #4]
 800c200:	bf04      	itt	eq
 800c202:	1852      	addeq	r2, r2, r1
 800c204:	6022      	streq	r2, [r4, #0]
 800c206:	602c      	str	r4, [r5, #0]
 800c208:	e7ec      	b.n	800c1e4 <_free_r+0x28>
 800c20a:	461a      	mov	r2, r3
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	b10b      	cbz	r3, 800c214 <_free_r+0x58>
 800c210:	42a3      	cmp	r3, r4
 800c212:	d9fa      	bls.n	800c20a <_free_r+0x4e>
 800c214:	6811      	ldr	r1, [r2, #0]
 800c216:	1855      	adds	r5, r2, r1
 800c218:	42a5      	cmp	r5, r4
 800c21a:	d10b      	bne.n	800c234 <_free_r+0x78>
 800c21c:	6824      	ldr	r4, [r4, #0]
 800c21e:	4421      	add	r1, r4
 800c220:	1854      	adds	r4, r2, r1
 800c222:	42a3      	cmp	r3, r4
 800c224:	6011      	str	r1, [r2, #0]
 800c226:	d1dd      	bne.n	800c1e4 <_free_r+0x28>
 800c228:	681c      	ldr	r4, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	6053      	str	r3, [r2, #4]
 800c22e:	4421      	add	r1, r4
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	e7d7      	b.n	800c1e4 <_free_r+0x28>
 800c234:	d902      	bls.n	800c23c <_free_r+0x80>
 800c236:	230c      	movs	r3, #12
 800c238:	6003      	str	r3, [r0, #0]
 800c23a:	e7d3      	b.n	800c1e4 <_free_r+0x28>
 800c23c:	6825      	ldr	r5, [r4, #0]
 800c23e:	1961      	adds	r1, r4, r5
 800c240:	428b      	cmp	r3, r1
 800c242:	bf04      	itt	eq
 800c244:	6819      	ldreq	r1, [r3, #0]
 800c246:	685b      	ldreq	r3, [r3, #4]
 800c248:	6063      	str	r3, [r4, #4]
 800c24a:	bf04      	itt	eq
 800c24c:	1949      	addeq	r1, r1, r5
 800c24e:	6021      	streq	r1, [r4, #0]
 800c250:	6054      	str	r4, [r2, #4]
 800c252:	e7c7      	b.n	800c1e4 <_free_r+0x28>
 800c254:	b003      	add	sp, #12
 800c256:	bd30      	pop	{r4, r5, pc}
 800c258:	200014fc 	.word	0x200014fc

0800c25c <_malloc_r>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	1ccd      	adds	r5, r1, #3
 800c260:	f025 0503 	bic.w	r5, r5, #3
 800c264:	3508      	adds	r5, #8
 800c266:	2d0c      	cmp	r5, #12
 800c268:	bf38      	it	cc
 800c26a:	250c      	movcc	r5, #12
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	4606      	mov	r6, r0
 800c270:	db01      	blt.n	800c276 <_malloc_r+0x1a>
 800c272:	42a9      	cmp	r1, r5
 800c274:	d903      	bls.n	800c27e <_malloc_r+0x22>
 800c276:	230c      	movs	r3, #12
 800c278:	6033      	str	r3, [r6, #0]
 800c27a:	2000      	movs	r0, #0
 800c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27e:	f001 fb81 	bl	800d984 <__malloc_lock>
 800c282:	4921      	ldr	r1, [pc, #132]	; (800c308 <_malloc_r+0xac>)
 800c284:	680a      	ldr	r2, [r1, #0]
 800c286:	4614      	mov	r4, r2
 800c288:	b99c      	cbnz	r4, 800c2b2 <_malloc_r+0x56>
 800c28a:	4f20      	ldr	r7, [pc, #128]	; (800c30c <_malloc_r+0xb0>)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	b923      	cbnz	r3, 800c29a <_malloc_r+0x3e>
 800c290:	4621      	mov	r1, r4
 800c292:	4630      	mov	r0, r6
 800c294:	f000 f83c 	bl	800c310 <_sbrk_r>
 800c298:	6038      	str	r0, [r7, #0]
 800c29a:	4629      	mov	r1, r5
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 f837 	bl	800c310 <_sbrk_r>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d123      	bne.n	800c2ee <_malloc_r+0x92>
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	6033      	str	r3, [r6, #0]
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f001 fb70 	bl	800d990 <__malloc_unlock>
 800c2b0:	e7e3      	b.n	800c27a <_malloc_r+0x1e>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	1b5b      	subs	r3, r3, r5
 800c2b6:	d417      	bmi.n	800c2e8 <_malloc_r+0x8c>
 800c2b8:	2b0b      	cmp	r3, #11
 800c2ba:	d903      	bls.n	800c2c4 <_malloc_r+0x68>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	441c      	add	r4, r3
 800c2c0:	6025      	str	r5, [r4, #0]
 800c2c2:	e004      	b.n	800c2ce <_malloc_r+0x72>
 800c2c4:	6863      	ldr	r3, [r4, #4]
 800c2c6:	42a2      	cmp	r2, r4
 800c2c8:	bf0c      	ite	eq
 800c2ca:	600b      	streq	r3, [r1, #0]
 800c2cc:	6053      	strne	r3, [r2, #4]
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f001 fb5e 	bl	800d990 <__malloc_unlock>
 800c2d4:	f104 000b 	add.w	r0, r4, #11
 800c2d8:	1d23      	adds	r3, r4, #4
 800c2da:	f020 0007 	bic.w	r0, r0, #7
 800c2de:	1ac2      	subs	r2, r0, r3
 800c2e0:	d0cc      	beq.n	800c27c <_malloc_r+0x20>
 800c2e2:	1a1b      	subs	r3, r3, r0
 800c2e4:	50a3      	str	r3, [r4, r2]
 800c2e6:	e7c9      	b.n	800c27c <_malloc_r+0x20>
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	6864      	ldr	r4, [r4, #4]
 800c2ec:	e7cc      	b.n	800c288 <_malloc_r+0x2c>
 800c2ee:	1cc4      	adds	r4, r0, #3
 800c2f0:	f024 0403 	bic.w	r4, r4, #3
 800c2f4:	42a0      	cmp	r0, r4
 800c2f6:	d0e3      	beq.n	800c2c0 <_malloc_r+0x64>
 800c2f8:	1a21      	subs	r1, r4, r0
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 f808 	bl	800c310 <_sbrk_r>
 800c300:	3001      	adds	r0, #1
 800c302:	d1dd      	bne.n	800c2c0 <_malloc_r+0x64>
 800c304:	e7cf      	b.n	800c2a6 <_malloc_r+0x4a>
 800c306:	bf00      	nop
 800c308:	200014fc 	.word	0x200014fc
 800c30c:	20001500 	.word	0x20001500

0800c310 <_sbrk_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d06      	ldr	r5, [pc, #24]	; (800c32c <_sbrk_r+0x1c>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	f7f5 f86e 	bl	80013fc <_sbrk>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_sbrk_r+0x1a>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_sbrk_r+0x1a>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	20002d20 	.word	0x20002d20

0800c330 <sniprintf>:
 800c330:	b40c      	push	{r2, r3}
 800c332:	b530      	push	{r4, r5, lr}
 800c334:	4b17      	ldr	r3, [pc, #92]	; (800c394 <sniprintf+0x64>)
 800c336:	1e0c      	subs	r4, r1, #0
 800c338:	681d      	ldr	r5, [r3, #0]
 800c33a:	b09d      	sub	sp, #116	; 0x74
 800c33c:	da08      	bge.n	800c350 <sniprintf+0x20>
 800c33e:	238b      	movs	r3, #139	; 0x8b
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	f04f 30ff 	mov.w	r0, #4294967295
 800c346:	b01d      	add	sp, #116	; 0x74
 800c348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c34c:	b002      	add	sp, #8
 800c34e:	4770      	bx	lr
 800c350:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c354:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c358:	bf14      	ite	ne
 800c35a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c35e:	4623      	moveq	r3, r4
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c368:	9002      	str	r0, [sp, #8]
 800c36a:	9006      	str	r0, [sp, #24]
 800c36c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c372:	ab21      	add	r3, sp, #132	; 0x84
 800c374:	a902      	add	r1, sp, #8
 800c376:	4628      	mov	r0, r5
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	f002 f835 	bl	800e3e8 <_svfiprintf_r>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	bfbc      	itt	lt
 800c382:	238b      	movlt	r3, #139	; 0x8b
 800c384:	602b      	strlt	r3, [r5, #0]
 800c386:	2c00      	cmp	r4, #0
 800c388:	d0dd      	beq.n	800c346 <sniprintf+0x16>
 800c38a:	9b02      	ldr	r3, [sp, #8]
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e7d9      	b.n	800c346 <sniprintf+0x16>
 800c392:	bf00      	nop
 800c394:	200001f0 	.word	0x200001f0

0800c398 <strcpy>:
 800c398:	4603      	mov	r3, r0
 800c39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c39e:	f803 2b01 	strb.w	r2, [r3], #1
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	d1f9      	bne.n	800c39a <strcpy+0x2>
 800c3a6:	4770      	bx	lr

0800c3a8 <sulp>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	ec45 4b10 	vmov	d0, r4, r5
 800c3b2:	4616      	mov	r6, r2
 800c3b4:	f001 fe5e 	bl	800e074 <__ulp>
 800c3b8:	ec51 0b10 	vmov	r0, r1, d0
 800c3bc:	b17e      	cbz	r6, 800c3de <sulp+0x36>
 800c3be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dd09      	ble.n	800c3de <sulp+0x36>
 800c3ca:	051b      	lsls	r3, r3, #20
 800c3cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c3d0:	2400      	movs	r4, #0
 800c3d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	462b      	mov	r3, r5
 800c3da:	f7f4 f925 	bl	8000628 <__aeabi_dmul>
 800c3de:	bd70      	pop	{r4, r5, r6, pc}

0800c3e0 <_strtod_l>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	b0a3      	sub	sp, #140	; 0x8c
 800c3e6:	461f      	mov	r7, r3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	931e      	str	r3, [sp, #120]	; 0x78
 800c3ec:	4ba4      	ldr	r3, [pc, #656]	; (800c680 <_strtod_l+0x2a0>)
 800c3ee:	9219      	str	r2, [sp, #100]	; 0x64
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	9307      	str	r3, [sp, #28]
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	4688      	mov	r8, r1
 800c3fa:	f7f3 fefb 	bl	80001f4 <strlen>
 800c3fe:	f04f 0a00 	mov.w	sl, #0
 800c402:	4605      	mov	r5, r0
 800c404:	f04f 0b00 	mov.w	fp, #0
 800c408:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c40c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	2a2b      	cmp	r2, #43	; 0x2b
 800c412:	d04c      	beq.n	800c4ae <_strtod_l+0xce>
 800c414:	d839      	bhi.n	800c48a <_strtod_l+0xaa>
 800c416:	2a0d      	cmp	r2, #13
 800c418:	d832      	bhi.n	800c480 <_strtod_l+0xa0>
 800c41a:	2a08      	cmp	r2, #8
 800c41c:	d832      	bhi.n	800c484 <_strtod_l+0xa4>
 800c41e:	2a00      	cmp	r2, #0
 800c420:	d03c      	beq.n	800c49c <_strtod_l+0xbc>
 800c422:	2300      	movs	r3, #0
 800c424:	930e      	str	r3, [sp, #56]	; 0x38
 800c426:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c428:	7833      	ldrb	r3, [r6, #0]
 800c42a:	2b30      	cmp	r3, #48	; 0x30
 800c42c:	f040 80b4 	bne.w	800c598 <_strtod_l+0x1b8>
 800c430:	7873      	ldrb	r3, [r6, #1]
 800c432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c436:	2b58      	cmp	r3, #88	; 0x58
 800c438:	d16c      	bne.n	800c514 <_strtod_l+0x134>
 800c43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	ab1e      	add	r3, sp, #120	; 0x78
 800c440:	9702      	str	r7, [sp, #8]
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	4a8f      	ldr	r2, [pc, #572]	; (800c684 <_strtod_l+0x2a4>)
 800c446:	ab1f      	add	r3, sp, #124	; 0x7c
 800c448:	a91d      	add	r1, sp, #116	; 0x74
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 ff80 	bl	800d350 <__gethex>
 800c450:	f010 0707 	ands.w	r7, r0, #7
 800c454:	4605      	mov	r5, r0
 800c456:	d005      	beq.n	800c464 <_strtod_l+0x84>
 800c458:	2f06      	cmp	r7, #6
 800c45a:	d12a      	bne.n	800c4b2 <_strtod_l+0xd2>
 800c45c:	3601      	adds	r6, #1
 800c45e:	2300      	movs	r3, #0
 800c460:	961d      	str	r6, [sp, #116]	; 0x74
 800c462:	930e      	str	r3, [sp, #56]	; 0x38
 800c464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c466:	2b00      	cmp	r3, #0
 800c468:	f040 8596 	bne.w	800cf98 <_strtod_l+0xbb8>
 800c46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c46e:	b1db      	cbz	r3, 800c4a8 <_strtod_l+0xc8>
 800c470:	4652      	mov	r2, sl
 800c472:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c476:	ec43 2b10 	vmov	d0, r2, r3
 800c47a:	b023      	add	sp, #140	; 0x8c
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	2a20      	cmp	r2, #32
 800c482:	d1ce      	bne.n	800c422 <_strtod_l+0x42>
 800c484:	3301      	adds	r3, #1
 800c486:	931d      	str	r3, [sp, #116]	; 0x74
 800c488:	e7c0      	b.n	800c40c <_strtod_l+0x2c>
 800c48a:	2a2d      	cmp	r2, #45	; 0x2d
 800c48c:	d1c9      	bne.n	800c422 <_strtod_l+0x42>
 800c48e:	2201      	movs	r2, #1
 800c490:	920e      	str	r2, [sp, #56]	; 0x38
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	921d      	str	r2, [sp, #116]	; 0x74
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1c4      	bne.n	800c426 <_strtod_l+0x46>
 800c49c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c49e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f040 8576 	bne.w	800cf94 <_strtod_l+0xbb4>
 800c4a8:	4652      	mov	r2, sl
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	e7e3      	b.n	800c476 <_strtod_l+0x96>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	e7ee      	b.n	800c490 <_strtod_l+0xb0>
 800c4b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c4b4:	b13a      	cbz	r2, 800c4c6 <_strtod_l+0xe6>
 800c4b6:	2135      	movs	r1, #53	; 0x35
 800c4b8:	a820      	add	r0, sp, #128	; 0x80
 800c4ba:	f001 fee6 	bl	800e28a <__copybits>
 800c4be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f001 faab 	bl	800da1c <_Bfree>
 800c4c6:	3f01      	subs	r7, #1
 800c4c8:	2f05      	cmp	r7, #5
 800c4ca:	d807      	bhi.n	800c4dc <_strtod_l+0xfc>
 800c4cc:	e8df f007 	tbb	[pc, r7]
 800c4d0:	1d180b0e 	.word	0x1d180b0e
 800c4d4:	030e      	.short	0x030e
 800c4d6:	f04f 0b00 	mov.w	fp, #0
 800c4da:	46da      	mov	sl, fp
 800c4dc:	0728      	lsls	r0, r5, #28
 800c4de:	d5c1      	bpl.n	800c464 <_strtod_l+0x84>
 800c4e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c4e4:	e7be      	b.n	800c464 <_strtod_l+0x84>
 800c4e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c4ea:	e7f7      	b.n	800c4dc <_strtod_l+0xfc>
 800c4ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c4f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c4f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c4fe:	e7ed      	b.n	800c4dc <_strtod_l+0xfc>
 800c500:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c688 <_strtod_l+0x2a8>
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	e7e8      	b.n	800c4dc <_strtod_l+0xfc>
 800c50a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c50e:	f04f 3aff 	mov.w	sl, #4294967295
 800c512:	e7e3      	b.n	800c4dc <_strtod_l+0xfc>
 800c514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	921d      	str	r2, [sp, #116]	; 0x74
 800c51a:	785b      	ldrb	r3, [r3, #1]
 800c51c:	2b30      	cmp	r3, #48	; 0x30
 800c51e:	d0f9      	beq.n	800c514 <_strtod_l+0x134>
 800c520:	2b00      	cmp	r3, #0
 800c522:	d09f      	beq.n	800c464 <_strtod_l+0x84>
 800c524:	2301      	movs	r3, #1
 800c526:	f04f 0900 	mov.w	r9, #0
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c52e:	930a      	str	r3, [sp, #40]	; 0x28
 800c530:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c534:	464f      	mov	r7, r9
 800c536:	220a      	movs	r2, #10
 800c538:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c53a:	7806      	ldrb	r6, [r0, #0]
 800c53c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c540:	b2d9      	uxtb	r1, r3
 800c542:	2909      	cmp	r1, #9
 800c544:	d92a      	bls.n	800c59c <_strtod_l+0x1bc>
 800c546:	9907      	ldr	r1, [sp, #28]
 800c548:	462a      	mov	r2, r5
 800c54a:	f002 f9ef 	bl	800e92c <strncmp>
 800c54e:	b398      	cbz	r0, 800c5b8 <_strtod_l+0x1d8>
 800c550:	2000      	movs	r0, #0
 800c552:	4633      	mov	r3, r6
 800c554:	463d      	mov	r5, r7
 800c556:	9007      	str	r0, [sp, #28]
 800c558:	4602      	mov	r2, r0
 800c55a:	2b65      	cmp	r3, #101	; 0x65
 800c55c:	d001      	beq.n	800c562 <_strtod_l+0x182>
 800c55e:	2b45      	cmp	r3, #69	; 0x45
 800c560:	d118      	bne.n	800c594 <_strtod_l+0x1b4>
 800c562:	b91d      	cbnz	r5, 800c56c <_strtod_l+0x18c>
 800c564:	9b04      	ldr	r3, [sp, #16]
 800c566:	4303      	orrs	r3, r0
 800c568:	d098      	beq.n	800c49c <_strtod_l+0xbc>
 800c56a:	2500      	movs	r5, #0
 800c56c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c570:	f108 0301 	add.w	r3, r8, #1
 800c574:	931d      	str	r3, [sp, #116]	; 0x74
 800c576:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c57a:	2b2b      	cmp	r3, #43	; 0x2b
 800c57c:	d075      	beq.n	800c66a <_strtod_l+0x28a>
 800c57e:	2b2d      	cmp	r3, #45	; 0x2d
 800c580:	d07b      	beq.n	800c67a <_strtod_l+0x29a>
 800c582:	f04f 0c00 	mov.w	ip, #0
 800c586:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c58a:	2909      	cmp	r1, #9
 800c58c:	f240 8082 	bls.w	800c694 <_strtod_l+0x2b4>
 800c590:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c594:	2600      	movs	r6, #0
 800c596:	e09d      	b.n	800c6d4 <_strtod_l+0x2f4>
 800c598:	2300      	movs	r3, #0
 800c59a:	e7c4      	b.n	800c526 <_strtod_l+0x146>
 800c59c:	2f08      	cmp	r7, #8
 800c59e:	bfd8      	it	le
 800c5a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c5a2:	f100 0001 	add.w	r0, r0, #1
 800c5a6:	bfda      	itte	le
 800c5a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800c5ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c5b2:	3701      	adds	r7, #1
 800c5b4:	901d      	str	r0, [sp, #116]	; 0x74
 800c5b6:	e7bf      	b.n	800c538 <_strtod_l+0x158>
 800c5b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5ba:	195a      	adds	r2, r3, r5
 800c5bc:	921d      	str	r2, [sp, #116]	; 0x74
 800c5be:	5d5b      	ldrb	r3, [r3, r5]
 800c5c0:	2f00      	cmp	r7, #0
 800c5c2:	d037      	beq.n	800c634 <_strtod_l+0x254>
 800c5c4:	9007      	str	r0, [sp, #28]
 800c5c6:	463d      	mov	r5, r7
 800c5c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c5cc:	2a09      	cmp	r2, #9
 800c5ce:	d912      	bls.n	800c5f6 <_strtod_l+0x216>
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	e7c2      	b.n	800c55a <_strtod_l+0x17a>
 800c5d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	921d      	str	r2, [sp, #116]	; 0x74
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	3001      	adds	r0, #1
 800c5de:	2b30      	cmp	r3, #48	; 0x30
 800c5e0:	d0f8      	beq.n	800c5d4 <_strtod_l+0x1f4>
 800c5e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c5e6:	2a08      	cmp	r2, #8
 800c5e8:	f200 84db 	bhi.w	800cfa2 <_strtod_l+0xbc2>
 800c5ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c5ee:	9007      	str	r0, [sp, #28]
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	920a      	str	r2, [sp, #40]	; 0x28
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	3b30      	subs	r3, #48	; 0x30
 800c5f8:	f100 0201 	add.w	r2, r0, #1
 800c5fc:	d014      	beq.n	800c628 <_strtod_l+0x248>
 800c5fe:	9907      	ldr	r1, [sp, #28]
 800c600:	4411      	add	r1, r2
 800c602:	9107      	str	r1, [sp, #28]
 800c604:	462a      	mov	r2, r5
 800c606:	eb00 0e05 	add.w	lr, r0, r5
 800c60a:	210a      	movs	r1, #10
 800c60c:	4572      	cmp	r2, lr
 800c60e:	d113      	bne.n	800c638 <_strtod_l+0x258>
 800c610:	182a      	adds	r2, r5, r0
 800c612:	2a08      	cmp	r2, #8
 800c614:	f105 0501 	add.w	r5, r5, #1
 800c618:	4405      	add	r5, r0
 800c61a:	dc1c      	bgt.n	800c656 <_strtod_l+0x276>
 800c61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c61e:	220a      	movs	r2, #10
 800c620:	fb02 3301 	mla	r3, r2, r1, r3
 800c624:	9309      	str	r3, [sp, #36]	; 0x24
 800c626:	2200      	movs	r2, #0
 800c628:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c62a:	1c59      	adds	r1, r3, #1
 800c62c:	911d      	str	r1, [sp, #116]	; 0x74
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	4610      	mov	r0, r2
 800c632:	e7c9      	b.n	800c5c8 <_strtod_l+0x1e8>
 800c634:	4638      	mov	r0, r7
 800c636:	e7d2      	b.n	800c5de <_strtod_l+0x1fe>
 800c638:	2a08      	cmp	r2, #8
 800c63a:	dc04      	bgt.n	800c646 <_strtod_l+0x266>
 800c63c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c63e:	434e      	muls	r6, r1
 800c640:	9609      	str	r6, [sp, #36]	; 0x24
 800c642:	3201      	adds	r2, #1
 800c644:	e7e2      	b.n	800c60c <_strtod_l+0x22c>
 800c646:	f102 0c01 	add.w	ip, r2, #1
 800c64a:	f1bc 0f10 	cmp.w	ip, #16
 800c64e:	bfd8      	it	le
 800c650:	fb01 f909 	mulle.w	r9, r1, r9
 800c654:	e7f5      	b.n	800c642 <_strtod_l+0x262>
 800c656:	2d10      	cmp	r5, #16
 800c658:	bfdc      	itt	le
 800c65a:	220a      	movle	r2, #10
 800c65c:	fb02 3909 	mlale	r9, r2, r9, r3
 800c660:	e7e1      	b.n	800c626 <_strtod_l+0x246>
 800c662:	2300      	movs	r3, #0
 800c664:	9307      	str	r3, [sp, #28]
 800c666:	2201      	movs	r2, #1
 800c668:	e77c      	b.n	800c564 <_strtod_l+0x184>
 800c66a:	f04f 0c00 	mov.w	ip, #0
 800c66e:	f108 0302 	add.w	r3, r8, #2
 800c672:	931d      	str	r3, [sp, #116]	; 0x74
 800c674:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c678:	e785      	b.n	800c586 <_strtod_l+0x1a6>
 800c67a:	f04f 0c01 	mov.w	ip, #1
 800c67e:	e7f6      	b.n	800c66e <_strtod_l+0x28e>
 800c680:	0800fc7c 	.word	0x0800fc7c
 800c684:	0800faac 	.word	0x0800faac
 800c688:	7ff00000 	.word	0x7ff00000
 800c68c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c68e:	1c59      	adds	r1, r3, #1
 800c690:	911d      	str	r1, [sp, #116]	; 0x74
 800c692:	785b      	ldrb	r3, [r3, #1]
 800c694:	2b30      	cmp	r3, #48	; 0x30
 800c696:	d0f9      	beq.n	800c68c <_strtod_l+0x2ac>
 800c698:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c69c:	2908      	cmp	r1, #8
 800c69e:	f63f af79 	bhi.w	800c594 <_strtod_l+0x1b4>
 800c6a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c6a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6a8:	9308      	str	r3, [sp, #32]
 800c6aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6ac:	1c59      	adds	r1, r3, #1
 800c6ae:	911d      	str	r1, [sp, #116]	; 0x74
 800c6b0:	785b      	ldrb	r3, [r3, #1]
 800c6b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c6b6:	2e09      	cmp	r6, #9
 800c6b8:	d937      	bls.n	800c72a <_strtod_l+0x34a>
 800c6ba:	9e08      	ldr	r6, [sp, #32]
 800c6bc:	1b89      	subs	r1, r1, r6
 800c6be:	2908      	cmp	r1, #8
 800c6c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c6c4:	dc02      	bgt.n	800c6cc <_strtod_l+0x2ec>
 800c6c6:	4576      	cmp	r6, lr
 800c6c8:	bfa8      	it	ge
 800c6ca:	4676      	movge	r6, lr
 800c6cc:	f1bc 0f00 	cmp.w	ip, #0
 800c6d0:	d000      	beq.n	800c6d4 <_strtod_l+0x2f4>
 800c6d2:	4276      	negs	r6, r6
 800c6d4:	2d00      	cmp	r5, #0
 800c6d6:	d14f      	bne.n	800c778 <_strtod_l+0x398>
 800c6d8:	9904      	ldr	r1, [sp, #16]
 800c6da:	4301      	orrs	r1, r0
 800c6dc:	f47f aec2 	bne.w	800c464 <_strtod_l+0x84>
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	f47f aedb 	bne.w	800c49c <_strtod_l+0xbc>
 800c6e6:	2b69      	cmp	r3, #105	; 0x69
 800c6e8:	d027      	beq.n	800c73a <_strtod_l+0x35a>
 800c6ea:	dc24      	bgt.n	800c736 <_strtod_l+0x356>
 800c6ec:	2b49      	cmp	r3, #73	; 0x49
 800c6ee:	d024      	beq.n	800c73a <_strtod_l+0x35a>
 800c6f0:	2b4e      	cmp	r3, #78	; 0x4e
 800c6f2:	f47f aed3 	bne.w	800c49c <_strtod_l+0xbc>
 800c6f6:	499e      	ldr	r1, [pc, #632]	; (800c970 <_strtod_l+0x590>)
 800c6f8:	a81d      	add	r0, sp, #116	; 0x74
 800c6fa:	f001 f881 	bl	800d800 <__match>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f43f aecc 	beq.w	800c49c <_strtod_l+0xbc>
 800c704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b28      	cmp	r3, #40	; 0x28
 800c70a:	d12d      	bne.n	800c768 <_strtod_l+0x388>
 800c70c:	4999      	ldr	r1, [pc, #612]	; (800c974 <_strtod_l+0x594>)
 800c70e:	aa20      	add	r2, sp, #128	; 0x80
 800c710:	a81d      	add	r0, sp, #116	; 0x74
 800c712:	f001 f889 	bl	800d828 <__hexnan>
 800c716:	2805      	cmp	r0, #5
 800c718:	d126      	bne.n	800c768 <_strtod_l+0x388>
 800c71a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c71c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c720:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c724:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c728:	e69c      	b.n	800c464 <_strtod_l+0x84>
 800c72a:	210a      	movs	r1, #10
 800c72c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c730:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c734:	e7b9      	b.n	800c6aa <_strtod_l+0x2ca>
 800c736:	2b6e      	cmp	r3, #110	; 0x6e
 800c738:	e7db      	b.n	800c6f2 <_strtod_l+0x312>
 800c73a:	498f      	ldr	r1, [pc, #572]	; (800c978 <_strtod_l+0x598>)
 800c73c:	a81d      	add	r0, sp, #116	; 0x74
 800c73e:	f001 f85f 	bl	800d800 <__match>
 800c742:	2800      	cmp	r0, #0
 800c744:	f43f aeaa 	beq.w	800c49c <_strtod_l+0xbc>
 800c748:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c74a:	498c      	ldr	r1, [pc, #560]	; (800c97c <_strtod_l+0x59c>)
 800c74c:	3b01      	subs	r3, #1
 800c74e:	a81d      	add	r0, sp, #116	; 0x74
 800c750:	931d      	str	r3, [sp, #116]	; 0x74
 800c752:	f001 f855 	bl	800d800 <__match>
 800c756:	b910      	cbnz	r0, 800c75e <_strtod_l+0x37e>
 800c758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c75a:	3301      	adds	r3, #1
 800c75c:	931d      	str	r3, [sp, #116]	; 0x74
 800c75e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800c98c <_strtod_l+0x5ac>
 800c762:	f04f 0a00 	mov.w	sl, #0
 800c766:	e67d      	b.n	800c464 <_strtod_l+0x84>
 800c768:	4885      	ldr	r0, [pc, #532]	; (800c980 <_strtod_l+0x5a0>)
 800c76a:	f002 f8d1 	bl	800e910 <nan>
 800c76e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c772:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c776:	e675      	b.n	800c464 <_strtod_l+0x84>
 800c778:	9b07      	ldr	r3, [sp, #28]
 800c77a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c77c:	1af3      	subs	r3, r6, r3
 800c77e:	2f00      	cmp	r7, #0
 800c780:	bf08      	it	eq
 800c782:	462f      	moveq	r7, r5
 800c784:	2d10      	cmp	r5, #16
 800c786:	9308      	str	r3, [sp, #32]
 800c788:	46a8      	mov	r8, r5
 800c78a:	bfa8      	it	ge
 800c78c:	f04f 0810 	movge.w	r8, #16
 800c790:	f7f3 fed0 	bl	8000534 <__aeabi_ui2d>
 800c794:	2d09      	cmp	r5, #9
 800c796:	4682      	mov	sl, r0
 800c798:	468b      	mov	fp, r1
 800c79a:	dd13      	ble.n	800c7c4 <_strtod_l+0x3e4>
 800c79c:	4b79      	ldr	r3, [pc, #484]	; (800c984 <_strtod_l+0x5a4>)
 800c79e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c7a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c7a6:	f7f3 ff3f 	bl	8000628 <__aeabi_dmul>
 800c7aa:	4682      	mov	sl, r0
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	468b      	mov	fp, r1
 800c7b0:	f7f3 fec0 	bl	8000534 <__aeabi_ui2d>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	4659      	mov	r1, fp
 800c7bc:	f7f3 fd7e 	bl	80002bc <__adddf3>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	468b      	mov	fp, r1
 800c7c4:	2d0f      	cmp	r5, #15
 800c7c6:	dc38      	bgt.n	800c83a <_strtod_l+0x45a>
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f43f ae4a 	beq.w	800c464 <_strtod_l+0x84>
 800c7d0:	dd24      	ble.n	800c81c <_strtod_l+0x43c>
 800c7d2:	2b16      	cmp	r3, #22
 800c7d4:	dc0b      	bgt.n	800c7ee <_strtod_l+0x40e>
 800c7d6:	4d6b      	ldr	r5, [pc, #428]	; (800c984 <_strtod_l+0x5a4>)
 800c7d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c7dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c7e0:	4652      	mov	r2, sl
 800c7e2:	465b      	mov	r3, fp
 800c7e4:	f7f3 ff20 	bl	8000628 <__aeabi_dmul>
 800c7e8:	4682      	mov	sl, r0
 800c7ea:	468b      	mov	fp, r1
 800c7ec:	e63a      	b.n	800c464 <_strtod_l+0x84>
 800c7ee:	9a08      	ldr	r2, [sp, #32]
 800c7f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	db20      	blt.n	800c83a <_strtod_l+0x45a>
 800c7f8:	4c62      	ldr	r4, [pc, #392]	; (800c984 <_strtod_l+0x5a4>)
 800c7fa:	f1c5 050f 	rsb	r5, r5, #15
 800c7fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c802:	4652      	mov	r2, sl
 800c804:	465b      	mov	r3, fp
 800c806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c80a:	f7f3 ff0d 	bl	8000628 <__aeabi_dmul>
 800c80e:	9b08      	ldr	r3, [sp, #32]
 800c810:	1b5d      	subs	r5, r3, r5
 800c812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c81a:	e7e3      	b.n	800c7e4 <_strtod_l+0x404>
 800c81c:	9b08      	ldr	r3, [sp, #32]
 800c81e:	3316      	adds	r3, #22
 800c820:	db0b      	blt.n	800c83a <_strtod_l+0x45a>
 800c822:	9b07      	ldr	r3, [sp, #28]
 800c824:	4a57      	ldr	r2, [pc, #348]	; (800c984 <_strtod_l+0x5a4>)
 800c826:	1b9e      	subs	r6, r3, r6
 800c828:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c82c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c830:	4650      	mov	r0, sl
 800c832:	4659      	mov	r1, fp
 800c834:	f7f4 f822 	bl	800087c <__aeabi_ddiv>
 800c838:	e7d6      	b.n	800c7e8 <_strtod_l+0x408>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	eba5 0808 	sub.w	r8, r5, r8
 800c840:	4498      	add	r8, r3
 800c842:	f1b8 0f00 	cmp.w	r8, #0
 800c846:	dd71      	ble.n	800c92c <_strtod_l+0x54c>
 800c848:	f018 030f 	ands.w	r3, r8, #15
 800c84c:	d00a      	beq.n	800c864 <_strtod_l+0x484>
 800c84e:	494d      	ldr	r1, [pc, #308]	; (800c984 <_strtod_l+0x5a4>)
 800c850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c854:	4652      	mov	r2, sl
 800c856:	465b      	mov	r3, fp
 800c858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c85c:	f7f3 fee4 	bl	8000628 <__aeabi_dmul>
 800c860:	4682      	mov	sl, r0
 800c862:	468b      	mov	fp, r1
 800c864:	f038 080f 	bics.w	r8, r8, #15
 800c868:	d04d      	beq.n	800c906 <_strtod_l+0x526>
 800c86a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c86e:	dd22      	ble.n	800c8b6 <_strtod_l+0x4d6>
 800c870:	2500      	movs	r5, #0
 800c872:	462e      	mov	r6, r5
 800c874:	9509      	str	r5, [sp, #36]	; 0x24
 800c876:	9507      	str	r5, [sp, #28]
 800c878:	2322      	movs	r3, #34	; 0x22
 800c87a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800c98c <_strtod_l+0x5ac>
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	f04f 0a00 	mov.w	sl, #0
 800c884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	f43f adec 	beq.w	800c464 <_strtod_l+0x84>
 800c88c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c88e:	4620      	mov	r0, r4
 800c890:	f001 f8c4 	bl	800da1c <_Bfree>
 800c894:	9907      	ldr	r1, [sp, #28]
 800c896:	4620      	mov	r0, r4
 800c898:	f001 f8c0 	bl	800da1c <_Bfree>
 800c89c:	4631      	mov	r1, r6
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f001 f8bc 	bl	800da1c <_Bfree>
 800c8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f001 f8b8 	bl	800da1c <_Bfree>
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f001 f8b4 	bl	800da1c <_Bfree>
 800c8b4:	e5d6      	b.n	800c464 <_strtod_l+0x84>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c8bc:	4650      	mov	r0, sl
 800c8be:	4659      	mov	r1, fp
 800c8c0:	4699      	mov	r9, r3
 800c8c2:	f1b8 0f01 	cmp.w	r8, #1
 800c8c6:	dc21      	bgt.n	800c90c <_strtod_l+0x52c>
 800c8c8:	b10b      	cbz	r3, 800c8ce <_strtod_l+0x4ee>
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	468b      	mov	fp, r1
 800c8ce:	4b2e      	ldr	r3, [pc, #184]	; (800c988 <_strtod_l+0x5a8>)
 800c8d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c8d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c8d8:	4652      	mov	r2, sl
 800c8da:	465b      	mov	r3, fp
 800c8dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c8e0:	f7f3 fea2 	bl	8000628 <__aeabi_dmul>
 800c8e4:	4b29      	ldr	r3, [pc, #164]	; (800c98c <_strtod_l+0x5ac>)
 800c8e6:	460a      	mov	r2, r1
 800c8e8:	400b      	ands	r3, r1
 800c8ea:	4929      	ldr	r1, [pc, #164]	; (800c990 <_strtod_l+0x5b0>)
 800c8ec:	428b      	cmp	r3, r1
 800c8ee:	4682      	mov	sl, r0
 800c8f0:	d8be      	bhi.n	800c870 <_strtod_l+0x490>
 800c8f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c8f6:	428b      	cmp	r3, r1
 800c8f8:	bf86      	itte	hi
 800c8fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c994 <_strtod_l+0x5b4>
 800c8fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800c902:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c906:	2300      	movs	r3, #0
 800c908:	9304      	str	r3, [sp, #16]
 800c90a:	e081      	b.n	800ca10 <_strtod_l+0x630>
 800c90c:	f018 0f01 	tst.w	r8, #1
 800c910:	d007      	beq.n	800c922 <_strtod_l+0x542>
 800c912:	4b1d      	ldr	r3, [pc, #116]	; (800c988 <_strtod_l+0x5a8>)
 800c914:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fe84 	bl	8000628 <__aeabi_dmul>
 800c920:	2301      	movs	r3, #1
 800c922:	f109 0901 	add.w	r9, r9, #1
 800c926:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c92a:	e7ca      	b.n	800c8c2 <_strtod_l+0x4e2>
 800c92c:	d0eb      	beq.n	800c906 <_strtod_l+0x526>
 800c92e:	f1c8 0800 	rsb	r8, r8, #0
 800c932:	f018 020f 	ands.w	r2, r8, #15
 800c936:	d00a      	beq.n	800c94e <_strtod_l+0x56e>
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <_strtod_l+0x5a4>)
 800c93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c93e:	4650      	mov	r0, sl
 800c940:	4659      	mov	r1, fp
 800c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c946:	f7f3 ff99 	bl	800087c <__aeabi_ddiv>
 800c94a:	4682      	mov	sl, r0
 800c94c:	468b      	mov	fp, r1
 800c94e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c952:	d0d8      	beq.n	800c906 <_strtod_l+0x526>
 800c954:	f1b8 0f1f 	cmp.w	r8, #31
 800c958:	dd1e      	ble.n	800c998 <_strtod_l+0x5b8>
 800c95a:	2500      	movs	r5, #0
 800c95c:	462e      	mov	r6, r5
 800c95e:	9509      	str	r5, [sp, #36]	; 0x24
 800c960:	9507      	str	r5, [sp, #28]
 800c962:	2322      	movs	r3, #34	; 0x22
 800c964:	f04f 0a00 	mov.w	sl, #0
 800c968:	f04f 0b00 	mov.w	fp, #0
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	e789      	b.n	800c884 <_strtod_l+0x4a4>
 800c970:	0800faa9 	.word	0x0800faa9
 800c974:	0800fac0 	.word	0x0800fac0
 800c978:	0800faa0 	.word	0x0800faa0
 800c97c:	0800faa3 	.word	0x0800faa3
 800c980:	0800fe72 	.word	0x0800fe72
 800c984:	0800fd30 	.word	0x0800fd30
 800c988:	0800fd08 	.word	0x0800fd08
 800c98c:	7ff00000 	.word	0x7ff00000
 800c990:	7ca00000 	.word	0x7ca00000
 800c994:	7fefffff 	.word	0x7fefffff
 800c998:	f018 0310 	ands.w	r3, r8, #16
 800c99c:	bf18      	it	ne
 800c99e:	236a      	movne	r3, #106	; 0x6a
 800c9a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800cd58 <_strtod_l+0x978>
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	4659      	mov	r1, fp
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f018 0f01 	tst.w	r8, #1
 800c9b0:	d004      	beq.n	800c9bc <_strtod_l+0x5dc>
 800c9b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c9b6:	f7f3 fe37 	bl	8000628 <__aeabi_dmul>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c9c0:	f109 0908 	add.w	r9, r9, #8
 800c9c4:	d1f2      	bne.n	800c9ac <_strtod_l+0x5cc>
 800c9c6:	b10b      	cbz	r3, 800c9cc <_strtod_l+0x5ec>
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	468b      	mov	fp, r1
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	b1bb      	cbz	r3, 800ca00 <_strtod_l+0x620>
 800c9d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c9d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	4659      	mov	r1, fp
 800c9dc:	dd10      	ble.n	800ca00 <_strtod_l+0x620>
 800c9de:	2b1f      	cmp	r3, #31
 800c9e0:	f340 8128 	ble.w	800cc34 <_strtod_l+0x854>
 800c9e4:	2b34      	cmp	r3, #52	; 0x34
 800c9e6:	bfde      	ittt	le
 800c9e8:	3b20      	suble	r3, #32
 800c9ea:	f04f 32ff 	movle.w	r2, #4294967295
 800c9ee:	fa02 f303 	lslle.w	r3, r2, r3
 800c9f2:	f04f 0a00 	mov.w	sl, #0
 800c9f6:	bfcc      	ite	gt
 800c9f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c9fc:	ea03 0b01 	andle.w	fp, r3, r1
 800ca00:	2200      	movs	r2, #0
 800ca02:	2300      	movs	r3, #0
 800ca04:	4650      	mov	r0, sl
 800ca06:	4659      	mov	r1, fp
 800ca08:	f7f4 f876 	bl	8000af8 <__aeabi_dcmpeq>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d1a4      	bne.n	800c95a <_strtod_l+0x57a>
 800ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca16:	462b      	mov	r3, r5
 800ca18:	463a      	mov	r2, r7
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f001 f86a 	bl	800daf4 <__s2b>
 800ca20:	9009      	str	r0, [sp, #36]	; 0x24
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f43f af24 	beq.w	800c870 <_strtod_l+0x490>
 800ca28:	9b07      	ldr	r3, [sp, #28]
 800ca2a:	1b9e      	subs	r6, r3, r6
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bfb4      	ite	lt
 800ca32:	4633      	movlt	r3, r6
 800ca34:	2300      	movge	r3, #0
 800ca36:	9310      	str	r3, [sp, #64]	; 0x40
 800ca38:	9b08      	ldr	r3, [sp, #32]
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ca40:	9318      	str	r3, [sp, #96]	; 0x60
 800ca42:	462e      	mov	r6, r5
 800ca44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca46:	4620      	mov	r0, r4
 800ca48:	6859      	ldr	r1, [r3, #4]
 800ca4a:	f000 ffa7 	bl	800d99c <_Balloc>
 800ca4e:	9007      	str	r0, [sp, #28]
 800ca50:	2800      	cmp	r0, #0
 800ca52:	f43f af11 	beq.w	800c878 <_strtod_l+0x498>
 800ca56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca58:	691a      	ldr	r2, [r3, #16]
 800ca5a:	3202      	adds	r2, #2
 800ca5c:	f103 010c 	add.w	r1, r3, #12
 800ca60:	0092      	lsls	r2, r2, #2
 800ca62:	300c      	adds	r0, #12
 800ca64:	f7ff fb94 	bl	800c190 <memcpy>
 800ca68:	ec4b ab10 	vmov	d0, sl, fp
 800ca6c:	aa20      	add	r2, sp, #128	; 0x80
 800ca6e:	a91f      	add	r1, sp, #124	; 0x7c
 800ca70:	4620      	mov	r0, r4
 800ca72:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ca76:	f001 fb79 	bl	800e16c <__d2b>
 800ca7a:	901e      	str	r0, [sp, #120]	; 0x78
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f43f aefb 	beq.w	800c878 <_strtod_l+0x498>
 800ca82:	2101      	movs	r1, #1
 800ca84:	4620      	mov	r0, r4
 800ca86:	f001 f8cf 	bl	800dc28 <__i2b>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	f43f aef3 	beq.w	800c878 <_strtod_l+0x498>
 800ca92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca94:	9904      	ldr	r1, [sp, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bfab      	itete	ge
 800ca9a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ca9c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ca9e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800caa0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800caa4:	bfac      	ite	ge
 800caa6:	eb03 0902 	addge.w	r9, r3, r2
 800caaa:	1ad7      	sublt	r7, r2, r3
 800caac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800caae:	eba3 0801 	sub.w	r8, r3, r1
 800cab2:	4490      	add	r8, r2
 800cab4:	4ba3      	ldr	r3, [pc, #652]	; (800cd44 <_strtod_l+0x964>)
 800cab6:	f108 38ff 	add.w	r8, r8, #4294967295
 800caba:	4598      	cmp	r8, r3
 800cabc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cac0:	f280 80cc 	bge.w	800cc5c <_strtod_l+0x87c>
 800cac4:	eba3 0308 	sub.w	r3, r3, r8
 800cac8:	2b1f      	cmp	r3, #31
 800caca:	eba2 0203 	sub.w	r2, r2, r3
 800cace:	f04f 0101 	mov.w	r1, #1
 800cad2:	f300 80b6 	bgt.w	800cc42 <_strtod_l+0x862>
 800cad6:	fa01 f303 	lsl.w	r3, r1, r3
 800cada:	9311      	str	r3, [sp, #68]	; 0x44
 800cadc:	2300      	movs	r3, #0
 800cade:	930c      	str	r3, [sp, #48]	; 0x30
 800cae0:	eb09 0802 	add.w	r8, r9, r2
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	45c1      	cmp	r9, r8
 800cae8:	4417      	add	r7, r2
 800caea:	441f      	add	r7, r3
 800caec:	464b      	mov	r3, r9
 800caee:	bfa8      	it	ge
 800caf0:	4643      	movge	r3, r8
 800caf2:	42bb      	cmp	r3, r7
 800caf4:	bfa8      	it	ge
 800caf6:	463b      	movge	r3, r7
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bfc2      	ittt	gt
 800cafc:	eba8 0803 	subgt.w	r8, r8, r3
 800cb00:	1aff      	subgt	r7, r7, r3
 800cb02:	eba9 0903 	subgt.w	r9, r9, r3
 800cb06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dd17      	ble.n	800cb3c <_strtod_l+0x75c>
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	461a      	mov	r2, r3
 800cb10:	4620      	mov	r0, r4
 800cb12:	f001 f945 	bl	800dda0 <__pow5mult>
 800cb16:	4606      	mov	r6, r0
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	f43f aead 	beq.w	800c878 <_strtod_l+0x498>
 800cb1e:	4601      	mov	r1, r0
 800cb20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb22:	4620      	mov	r0, r4
 800cb24:	f001 f896 	bl	800dc54 <__multiply>
 800cb28:	900f      	str	r0, [sp, #60]	; 0x3c
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	f43f aea4 	beq.w	800c878 <_strtod_l+0x498>
 800cb30:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 ff72 	bl	800da1c <_Bfree>
 800cb38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb3a:	931e      	str	r3, [sp, #120]	; 0x78
 800cb3c:	f1b8 0f00 	cmp.w	r8, #0
 800cb40:	f300 8091 	bgt.w	800cc66 <_strtod_l+0x886>
 800cb44:	9b08      	ldr	r3, [sp, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd08      	ble.n	800cb5c <_strtod_l+0x77c>
 800cb4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb4c:	9907      	ldr	r1, [sp, #28]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f001 f926 	bl	800dda0 <__pow5mult>
 800cb54:	9007      	str	r0, [sp, #28]
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f43f ae8e 	beq.w	800c878 <_strtod_l+0x498>
 800cb5c:	2f00      	cmp	r7, #0
 800cb5e:	dd08      	ble.n	800cb72 <_strtod_l+0x792>
 800cb60:	9907      	ldr	r1, [sp, #28]
 800cb62:	463a      	mov	r2, r7
 800cb64:	4620      	mov	r0, r4
 800cb66:	f001 f975 	bl	800de54 <__lshift>
 800cb6a:	9007      	str	r0, [sp, #28]
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f43f ae83 	beq.w	800c878 <_strtod_l+0x498>
 800cb72:	f1b9 0f00 	cmp.w	r9, #0
 800cb76:	dd08      	ble.n	800cb8a <_strtod_l+0x7aa>
 800cb78:	4631      	mov	r1, r6
 800cb7a:	464a      	mov	r2, r9
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f001 f969 	bl	800de54 <__lshift>
 800cb82:	4606      	mov	r6, r0
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f43f ae77 	beq.w	800c878 <_strtod_l+0x498>
 800cb8a:	9a07      	ldr	r2, [sp, #28]
 800cb8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f001 f9e8 	bl	800df64 <__mdiff>
 800cb94:	4605      	mov	r5, r0
 800cb96:	2800      	cmp	r0, #0
 800cb98:	f43f ae6e 	beq.w	800c878 <_strtod_l+0x498>
 800cb9c:	68c3      	ldr	r3, [r0, #12]
 800cb9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cba0:	2300      	movs	r3, #0
 800cba2:	60c3      	str	r3, [r0, #12]
 800cba4:	4631      	mov	r1, r6
 800cba6:	f001 f9c1 	bl	800df2c <__mcmp>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	da65      	bge.n	800cc7a <_strtod_l+0x89a>
 800cbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb0:	ea53 030a 	orrs.w	r3, r3, sl
 800cbb4:	f040 8087 	bne.w	800ccc6 <_strtod_l+0x8e6>
 800cbb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f040 8082 	bne.w	800ccc6 <_strtod_l+0x8e6>
 800cbc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cbc6:	0d1b      	lsrs	r3, r3, #20
 800cbc8:	051b      	lsls	r3, r3, #20
 800cbca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cbce:	d97a      	bls.n	800ccc6 <_strtod_l+0x8e6>
 800cbd0:	696b      	ldr	r3, [r5, #20]
 800cbd2:	b913      	cbnz	r3, 800cbda <_strtod_l+0x7fa>
 800cbd4:	692b      	ldr	r3, [r5, #16]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	dd75      	ble.n	800ccc6 <_strtod_l+0x8e6>
 800cbda:	4629      	mov	r1, r5
 800cbdc:	2201      	movs	r2, #1
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f001 f938 	bl	800de54 <__lshift>
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	f001 f9a0 	bl	800df2c <__mcmp>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	dd6a      	ble.n	800ccc6 <_strtod_l+0x8e6>
 800cbf0:	9904      	ldr	r1, [sp, #16]
 800cbf2:	4a55      	ldr	r2, [pc, #340]	; (800cd48 <_strtod_l+0x968>)
 800cbf4:	465b      	mov	r3, fp
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	f000 8085 	beq.w	800cd06 <_strtod_l+0x926>
 800cbfc:	ea02 010b 	and.w	r1, r2, fp
 800cc00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cc04:	dc7f      	bgt.n	800cd06 <_strtod_l+0x926>
 800cc06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cc0a:	f77f aeaa 	ble.w	800c962 <_strtod_l+0x582>
 800cc0e:	4a4f      	ldr	r2, [pc, #316]	; (800cd4c <_strtod_l+0x96c>)
 800cc10:	2300      	movs	r3, #0
 800cc12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cc16:	4650      	mov	r0, sl
 800cc18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cc1c:	4659      	mov	r1, fp
 800cc1e:	f7f3 fd03 	bl	8000628 <__aeabi_dmul>
 800cc22:	460b      	mov	r3, r1
 800cc24:	4303      	orrs	r3, r0
 800cc26:	bf08      	it	eq
 800cc28:	2322      	moveq	r3, #34	; 0x22
 800cc2a:	4682      	mov	sl, r0
 800cc2c:	468b      	mov	fp, r1
 800cc2e:	bf08      	it	eq
 800cc30:	6023      	streq	r3, [r4, #0]
 800cc32:	e62b      	b.n	800c88c <_strtod_l+0x4ac>
 800cc34:	f04f 32ff 	mov.w	r2, #4294967295
 800cc38:	fa02 f303 	lsl.w	r3, r2, r3
 800cc3c:	ea03 0a0a 	and.w	sl, r3, sl
 800cc40:	e6de      	b.n	800ca00 <_strtod_l+0x620>
 800cc42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cc46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cc4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cc4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cc52:	fa01 f308 	lsl.w	r3, r1, r8
 800cc56:	930c      	str	r3, [sp, #48]	; 0x30
 800cc58:	9111      	str	r1, [sp, #68]	; 0x44
 800cc5a:	e741      	b.n	800cae0 <_strtod_l+0x700>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc60:	2301      	movs	r3, #1
 800cc62:	9311      	str	r3, [sp, #68]	; 0x44
 800cc64:	e73c      	b.n	800cae0 <_strtod_l+0x700>
 800cc66:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc68:	4642      	mov	r2, r8
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f001 f8f2 	bl	800de54 <__lshift>
 800cc70:	901e      	str	r0, [sp, #120]	; 0x78
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f47f af66 	bne.w	800cb44 <_strtod_l+0x764>
 800cc78:	e5fe      	b.n	800c878 <_strtod_l+0x498>
 800cc7a:	465f      	mov	r7, fp
 800cc7c:	d16e      	bne.n	800cd5c <_strtod_l+0x97c>
 800cc7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc84:	b342      	cbz	r2, 800ccd8 <_strtod_l+0x8f8>
 800cc86:	4a32      	ldr	r2, [pc, #200]	; (800cd50 <_strtod_l+0x970>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d128      	bne.n	800ccde <_strtod_l+0x8fe>
 800cc8c:	9b04      	ldr	r3, [sp, #16]
 800cc8e:	4650      	mov	r0, sl
 800cc90:	b1eb      	cbz	r3, 800ccce <_strtod_l+0x8ee>
 800cc92:	4a2d      	ldr	r2, [pc, #180]	; (800cd48 <_strtod_l+0x968>)
 800cc94:	403a      	ands	r2, r7
 800cc96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cc9a:	f04f 31ff 	mov.w	r1, #4294967295
 800cc9e:	d819      	bhi.n	800ccd4 <_strtod_l+0x8f4>
 800cca0:	0d12      	lsrs	r2, r2, #20
 800cca2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cca6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccaa:	4298      	cmp	r0, r3
 800ccac:	d117      	bne.n	800ccde <_strtod_l+0x8fe>
 800ccae:	4b29      	ldr	r3, [pc, #164]	; (800cd54 <_strtod_l+0x974>)
 800ccb0:	429f      	cmp	r7, r3
 800ccb2:	d102      	bne.n	800ccba <_strtod_l+0x8da>
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	f43f addf 	beq.w	800c878 <_strtod_l+0x498>
 800ccba:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <_strtod_l+0x968>)
 800ccbc:	403b      	ands	r3, r7
 800ccbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ccc2:	f04f 0a00 	mov.w	sl, #0
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1a0      	bne.n	800cc0e <_strtod_l+0x82e>
 800cccc:	e5de      	b.n	800c88c <_strtod_l+0x4ac>
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd2:	e7ea      	b.n	800ccaa <_strtod_l+0x8ca>
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	e7e8      	b.n	800ccaa <_strtod_l+0x8ca>
 800ccd8:	ea53 030a 	orrs.w	r3, r3, sl
 800ccdc:	d088      	beq.n	800cbf0 <_strtod_l+0x810>
 800ccde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cce0:	b1db      	cbz	r3, 800cd1a <_strtod_l+0x93a>
 800cce2:	423b      	tst	r3, r7
 800cce4:	d0ef      	beq.n	800ccc6 <_strtod_l+0x8e6>
 800cce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cce8:	9a04      	ldr	r2, [sp, #16]
 800ccea:	4650      	mov	r0, sl
 800ccec:	4659      	mov	r1, fp
 800ccee:	b1c3      	cbz	r3, 800cd22 <_strtod_l+0x942>
 800ccf0:	f7ff fb5a 	bl	800c3a8 <sulp>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccfc:	f7f3 fade 	bl	80002bc <__adddf3>
 800cd00:	4682      	mov	sl, r0
 800cd02:	468b      	mov	fp, r1
 800cd04:	e7df      	b.n	800ccc6 <_strtod_l+0x8e6>
 800cd06:	4013      	ands	r3, r2
 800cd08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd14:	f04f 3aff 	mov.w	sl, #4294967295
 800cd18:	e7d5      	b.n	800ccc6 <_strtod_l+0x8e6>
 800cd1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd1c:	ea13 0f0a 	tst.w	r3, sl
 800cd20:	e7e0      	b.n	800cce4 <_strtod_l+0x904>
 800cd22:	f7ff fb41 	bl	800c3a8 <sulp>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd2e:	f7f3 fac3 	bl	80002b8 <__aeabi_dsub>
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	4682      	mov	sl, r0
 800cd38:	468b      	mov	fp, r1
 800cd3a:	f7f3 fedd 	bl	8000af8 <__aeabi_dcmpeq>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d0c1      	beq.n	800ccc6 <_strtod_l+0x8e6>
 800cd42:	e60e      	b.n	800c962 <_strtod_l+0x582>
 800cd44:	fffffc02 	.word	0xfffffc02
 800cd48:	7ff00000 	.word	0x7ff00000
 800cd4c:	39500000 	.word	0x39500000
 800cd50:	000fffff 	.word	0x000fffff
 800cd54:	7fefffff 	.word	0x7fefffff
 800cd58:	0800fad8 	.word	0x0800fad8
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f001 fa60 	bl	800e224 <__ratio>
 800cd64:	ec59 8b10 	vmov	r8, r9, d0
 800cd68:	ee10 0a10 	vmov	r0, s0
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd72:	4649      	mov	r1, r9
 800cd74:	f7f3 fed4 	bl	8000b20 <__aeabi_dcmple>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d07c      	beq.n	800ce76 <_strtod_l+0xa96>
 800cd7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d04c      	beq.n	800ce1c <_strtod_l+0xa3c>
 800cd82:	4b95      	ldr	r3, [pc, #596]	; (800cfd8 <_strtod_l+0xbf8>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cd8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cfd8 <_strtod_l+0xbf8>
 800cd8e:	f04f 0800 	mov.w	r8, #0
 800cd92:	4b92      	ldr	r3, [pc, #584]	; (800cfdc <_strtod_l+0xbfc>)
 800cd94:	403b      	ands	r3, r7
 800cd96:	9311      	str	r3, [sp, #68]	; 0x44
 800cd98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd9a:	4b91      	ldr	r3, [pc, #580]	; (800cfe0 <_strtod_l+0xc00>)
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	f040 80b2 	bne.w	800cf06 <_strtod_l+0xb26>
 800cda2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cda6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cdae:	ec4b ab10 	vmov	d0, sl, fp
 800cdb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800cdb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cdba:	f001 f95b 	bl	800e074 <__ulp>
 800cdbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdc2:	ec53 2b10 	vmov	r2, r3, d0
 800cdc6:	f7f3 fc2f 	bl	8000628 <__aeabi_dmul>
 800cdca:	4652      	mov	r2, sl
 800cdcc:	465b      	mov	r3, fp
 800cdce:	f7f3 fa75 	bl	80002bc <__adddf3>
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4981      	ldr	r1, [pc, #516]	; (800cfdc <_strtod_l+0xbfc>)
 800cdd6:	4a83      	ldr	r2, [pc, #524]	; (800cfe4 <_strtod_l+0xc04>)
 800cdd8:	4019      	ands	r1, r3
 800cdda:	4291      	cmp	r1, r2
 800cddc:	4682      	mov	sl, r0
 800cdde:	d95e      	bls.n	800ce9e <_strtod_l+0xabe>
 800cde0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d103      	bne.n	800cdf2 <_strtod_l+0xa12>
 800cdea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdec:	3301      	adds	r3, #1
 800cdee:	f43f ad43 	beq.w	800c878 <_strtod_l+0x498>
 800cdf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800cff0 <_strtod_l+0xc10>
 800cdf6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdfa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 fe0d 	bl	800da1c <_Bfree>
 800ce02:	9907      	ldr	r1, [sp, #28]
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fe09 	bl	800da1c <_Bfree>
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f000 fe05 	bl	800da1c <_Bfree>
 800ce12:	4629      	mov	r1, r5
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fe01 	bl	800da1c <_Bfree>
 800ce1a:	e613      	b.n	800ca44 <_strtod_l+0x664>
 800ce1c:	f1ba 0f00 	cmp.w	sl, #0
 800ce20:	d11b      	bne.n	800ce5a <_strtod_l+0xa7a>
 800ce22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce26:	b9f3      	cbnz	r3, 800ce66 <_strtod_l+0xa86>
 800ce28:	4b6b      	ldr	r3, [pc, #428]	; (800cfd8 <_strtod_l+0xbf8>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	4649      	mov	r1, r9
 800ce30:	f7f3 fe6c 	bl	8000b0c <__aeabi_dcmplt>
 800ce34:	b9d0      	cbnz	r0, 800ce6c <_strtod_l+0xa8c>
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	4b6b      	ldr	r3, [pc, #428]	; (800cfe8 <_strtod_l+0xc08>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f7f3 fbf3 	bl	8000628 <__aeabi_dmul>
 800ce42:	4680      	mov	r8, r0
 800ce44:	4689      	mov	r9, r1
 800ce46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ce4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ce54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ce58:	e79b      	b.n	800cd92 <_strtod_l+0x9b2>
 800ce5a:	f1ba 0f01 	cmp.w	sl, #1
 800ce5e:	d102      	bne.n	800ce66 <_strtod_l+0xa86>
 800ce60:	2f00      	cmp	r7, #0
 800ce62:	f43f ad7e 	beq.w	800c962 <_strtod_l+0x582>
 800ce66:	4b61      	ldr	r3, [pc, #388]	; (800cfec <_strtod_l+0xc0c>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	e78c      	b.n	800cd86 <_strtod_l+0x9a6>
 800ce6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cfe8 <_strtod_l+0xc08>
 800ce70:	f04f 0800 	mov.w	r8, #0
 800ce74:	e7e7      	b.n	800ce46 <_strtod_l+0xa66>
 800ce76:	4b5c      	ldr	r3, [pc, #368]	; (800cfe8 <_strtod_l+0xc08>)
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f7f3 fbd3 	bl	8000628 <__aeabi_dmul>
 800ce82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce84:	4680      	mov	r8, r0
 800ce86:	4689      	mov	r9, r1
 800ce88:	b933      	cbnz	r3, 800ce98 <_strtod_l+0xab8>
 800ce8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce8e:	9012      	str	r0, [sp, #72]	; 0x48
 800ce90:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ce96:	e7dd      	b.n	800ce54 <_strtod_l+0xa74>
 800ce98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ce9c:	e7f9      	b.n	800ce92 <_strtod_l+0xab2>
 800ce9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1a8      	bne.n	800cdfa <_strtod_l+0xa1a>
 800cea8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ceac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ceae:	0d1b      	lsrs	r3, r3, #20
 800ceb0:	051b      	lsls	r3, r3, #20
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d1a1      	bne.n	800cdfa <_strtod_l+0xa1a>
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 feed 	bl	8000c98 <__aeabi_d2lz>
 800cebe:	f7f3 fb85 	bl	80005cc <__aeabi_l2d>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4640      	mov	r0, r8
 800cec8:	4649      	mov	r1, r9
 800ceca:	f7f3 f9f5 	bl	80002b8 <__aeabi_dsub>
 800cece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ced0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ced4:	ea43 030a 	orr.w	r3, r3, sl
 800ced8:	4313      	orrs	r3, r2
 800ceda:	4680      	mov	r8, r0
 800cedc:	4689      	mov	r9, r1
 800cede:	d053      	beq.n	800cf88 <_strtod_l+0xba8>
 800cee0:	a335      	add	r3, pc, #212	; (adr r3, 800cfb8 <_strtod_l+0xbd8>)
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f3 fe11 	bl	8000b0c <__aeabi_dcmplt>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	f47f acce 	bne.w	800c88c <_strtod_l+0x4ac>
 800cef0:	a333      	add	r3, pc, #204	; (adr r3, 800cfc0 <_strtod_l+0xbe0>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	4640      	mov	r0, r8
 800cef8:	4649      	mov	r1, r9
 800cefa:	f7f3 fe25 	bl	8000b48 <__aeabi_dcmpgt>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af7b 	beq.w	800cdfa <_strtod_l+0xa1a>
 800cf04:	e4c2      	b.n	800c88c <_strtod_l+0x4ac>
 800cf06:	9b04      	ldr	r3, [sp, #16]
 800cf08:	b333      	cbz	r3, 800cf58 <_strtod_l+0xb78>
 800cf0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf10:	d822      	bhi.n	800cf58 <_strtod_l+0xb78>
 800cf12:	a32d      	add	r3, pc, #180	; (adr r3, 800cfc8 <_strtod_l+0xbe8>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	4640      	mov	r0, r8
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	f7f3 fe00 	bl	8000b20 <__aeabi_dcmple>
 800cf20:	b1a0      	cbz	r0, 800cf4c <_strtod_l+0xb6c>
 800cf22:	4649      	mov	r1, r9
 800cf24:	4640      	mov	r0, r8
 800cf26:	f7f3 fe2f 	bl	8000b88 <__aeabi_d2uiz>
 800cf2a:	2801      	cmp	r0, #1
 800cf2c:	bf38      	it	cc
 800cf2e:	2001      	movcc	r0, #1
 800cf30:	f7f3 fb00 	bl	8000534 <__aeabi_ui2d>
 800cf34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf36:	4680      	mov	r8, r0
 800cf38:	4689      	mov	r9, r1
 800cf3a:	bb13      	cbnz	r3, 800cf82 <_strtod_l+0xba2>
 800cf3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf40:	9014      	str	r0, [sp, #80]	; 0x50
 800cf42:	9315      	str	r3, [sp, #84]	; 0x54
 800cf44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cf48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	930d      	str	r3, [sp, #52]	; 0x34
 800cf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cf60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf64:	f001 f886 	bl	800e074 <__ulp>
 800cf68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf6c:	ec53 2b10 	vmov	r2, r3, d0
 800cf70:	f7f3 fb5a 	bl	8000628 <__aeabi_dmul>
 800cf74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf78:	f7f3 f9a0 	bl	80002bc <__adddf3>
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	468b      	mov	fp, r1
 800cf80:	e78f      	b.n	800cea2 <_strtod_l+0xac2>
 800cf82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800cf86:	e7dd      	b.n	800cf44 <_strtod_l+0xb64>
 800cf88:	a311      	add	r3, pc, #68	; (adr r3, 800cfd0 <_strtod_l+0xbf0>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 fdbd 	bl	8000b0c <__aeabi_dcmplt>
 800cf92:	e7b4      	b.n	800cefe <_strtod_l+0xb1e>
 800cf94:	2300      	movs	r3, #0
 800cf96:	930e      	str	r3, [sp, #56]	; 0x38
 800cf98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	f7ff ba65 	b.w	800c46c <_strtod_l+0x8c>
 800cfa2:	2b65      	cmp	r3, #101	; 0x65
 800cfa4:	f43f ab5d 	beq.w	800c662 <_strtod_l+0x282>
 800cfa8:	2b45      	cmp	r3, #69	; 0x45
 800cfaa:	f43f ab5a 	beq.w	800c662 <_strtod_l+0x282>
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f7ff bb92 	b.w	800c6d8 <_strtod_l+0x2f8>
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	94a03595 	.word	0x94a03595
 800cfbc:	3fdfffff 	.word	0x3fdfffff
 800cfc0:	35afe535 	.word	0x35afe535
 800cfc4:	3fe00000 	.word	0x3fe00000
 800cfc8:	ffc00000 	.word	0xffc00000
 800cfcc:	41dfffff 	.word	0x41dfffff
 800cfd0:	94a03595 	.word	0x94a03595
 800cfd4:	3fcfffff 	.word	0x3fcfffff
 800cfd8:	3ff00000 	.word	0x3ff00000
 800cfdc:	7ff00000 	.word	0x7ff00000
 800cfe0:	7fe00000 	.word	0x7fe00000
 800cfe4:	7c9fffff 	.word	0x7c9fffff
 800cfe8:	3fe00000 	.word	0x3fe00000
 800cfec:	bff00000 	.word	0xbff00000
 800cff0:	7fefffff 	.word	0x7fefffff

0800cff4 <strtof>:
 800cff4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800cff8:	4e26      	ldr	r6, [pc, #152]	; (800d094 <strtof+0xa0>)
 800cffa:	4b27      	ldr	r3, [pc, #156]	; (800d098 <strtof+0xa4>)
 800cffc:	460a      	mov	r2, r1
 800cffe:	ed2d 8b02 	vpush	{d8}
 800d002:	4601      	mov	r1, r0
 800d004:	6830      	ldr	r0, [r6, #0]
 800d006:	f7ff f9eb 	bl	800c3e0 <_strtod_l>
 800d00a:	ec55 4b10 	vmov	r4, r5, d0
 800d00e:	ee10 2a10 	vmov	r2, s0
 800d012:	ee10 0a10 	vmov	r0, s0
 800d016:	462b      	mov	r3, r5
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 fd9f 	bl	8000b5c <__aeabi_dcmpun>
 800d01e:	b190      	cbz	r0, 800d046 <strtof+0x52>
 800d020:	2d00      	cmp	r5, #0
 800d022:	481e      	ldr	r0, [pc, #120]	; (800d09c <strtof+0xa8>)
 800d024:	da09      	bge.n	800d03a <strtof+0x46>
 800d026:	f001 fc7b 	bl	800e920 <nanf>
 800d02a:	eeb1 8a40 	vneg.f32	s16, s0
 800d02e:	eeb0 0a48 	vmov.f32	s0, s16
 800d032:	ecbd 8b02 	vpop	{d8}
 800d036:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d03a:	ecbd 8b02 	vpop	{d8}
 800d03e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800d042:	f001 bc6d 	b.w	800e920 <nanf>
 800d046:	4620      	mov	r0, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	f7f3 fdbd 	bl	8000bc8 <__aeabi_d2f>
 800d04e:	ee08 0a10 	vmov	s16, r0
 800d052:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d0a0 <strtof+0xac>
 800d056:	eeb0 7ac8 	vabs.f32	s14, s16
 800d05a:	eeb4 7a67 	vcmp.f32	s14, s15
 800d05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d062:	dde4      	ble.n	800d02e <strtof+0x3a>
 800d064:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800d068:	4b0e      	ldr	r3, [pc, #56]	; (800d0a4 <strtof+0xb0>)
 800d06a:	f04f 32ff 	mov.w	r2, #4294967295
 800d06e:	4620      	mov	r0, r4
 800d070:	4649      	mov	r1, r9
 800d072:	f7f3 fd73 	bl	8000b5c <__aeabi_dcmpun>
 800d076:	b940      	cbnz	r0, 800d08a <strtof+0x96>
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <strtof+0xb0>)
 800d07a:	f04f 32ff 	mov.w	r2, #4294967295
 800d07e:	4620      	mov	r0, r4
 800d080:	4649      	mov	r1, r9
 800d082:	f7f3 fd4d 	bl	8000b20 <__aeabi_dcmple>
 800d086:	2800      	cmp	r0, #0
 800d088:	d0d1      	beq.n	800d02e <strtof+0x3a>
 800d08a:	6833      	ldr	r3, [r6, #0]
 800d08c:	2222      	movs	r2, #34	; 0x22
 800d08e:	601a      	str	r2, [r3, #0]
 800d090:	e7cd      	b.n	800d02e <strtof+0x3a>
 800d092:	bf00      	nop
 800d094:	200001f0 	.word	0x200001f0
 800d098:	20000258 	.word	0x20000258
 800d09c:	0800fe72 	.word	0x0800fe72
 800d0a0:	7f7fffff 	.word	0x7f7fffff
 800d0a4:	7fefffff 	.word	0x7fefffff

0800d0a8 <__strtok_r>:
 800d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0aa:	b908      	cbnz	r0, 800d0b0 <__strtok_r+0x8>
 800d0ac:	6810      	ldr	r0, [r2, #0]
 800d0ae:	b188      	cbz	r0, 800d0d4 <__strtok_r+0x2c>
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d0b8:	460f      	mov	r7, r1
 800d0ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d0be:	b91e      	cbnz	r6, 800d0c8 <__strtok_r+0x20>
 800d0c0:	b965      	cbnz	r5, 800d0dc <__strtok_r+0x34>
 800d0c2:	6015      	str	r5, [r2, #0]
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	e005      	b.n	800d0d4 <__strtok_r+0x2c>
 800d0c8:	42b5      	cmp	r5, r6
 800d0ca:	d1f6      	bne.n	800d0ba <__strtok_r+0x12>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1f0      	bne.n	800d0b2 <__strtok_r+0xa>
 800d0d0:	6014      	str	r4, [r2, #0]
 800d0d2:	7003      	strb	r3, [r0, #0]
 800d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	e00c      	b.n	800d0f4 <__strtok_r+0x4c>
 800d0da:	b915      	cbnz	r5, 800d0e2 <__strtok_r+0x3a>
 800d0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0e0:	460e      	mov	r6, r1
 800d0e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d0e6:	42ab      	cmp	r3, r5
 800d0e8:	d1f7      	bne.n	800d0da <__strtok_r+0x32>
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0f3      	beq.n	800d0d6 <__strtok_r+0x2e>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d0f4:	6014      	str	r4, [r2, #0]
 800d0f6:	e7ed      	b.n	800d0d4 <__strtok_r+0x2c>

0800d0f8 <strtok_r>:
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f7ff bfd5 	b.w	800d0a8 <__strtok_r>
	...

0800d100 <_strtoul_l.isra.0>:
 800d100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d104:	4e3b      	ldr	r6, [pc, #236]	; (800d1f4 <_strtoul_l.isra.0+0xf4>)
 800d106:	4686      	mov	lr, r0
 800d108:	468c      	mov	ip, r1
 800d10a:	4660      	mov	r0, ip
 800d10c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d110:	5da5      	ldrb	r5, [r4, r6]
 800d112:	f015 0508 	ands.w	r5, r5, #8
 800d116:	d1f8      	bne.n	800d10a <_strtoul_l.isra.0+0xa>
 800d118:	2c2d      	cmp	r4, #45	; 0x2d
 800d11a:	d134      	bne.n	800d186 <_strtoul_l.isra.0+0x86>
 800d11c:	f89c 4000 	ldrb.w	r4, [ip]
 800d120:	f04f 0801 	mov.w	r8, #1
 800d124:	f100 0c02 	add.w	ip, r0, #2
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d05e      	beq.n	800d1ea <_strtoul_l.isra.0+0xea>
 800d12c:	2b10      	cmp	r3, #16
 800d12e:	d10c      	bne.n	800d14a <_strtoul_l.isra.0+0x4a>
 800d130:	2c30      	cmp	r4, #48	; 0x30
 800d132:	d10a      	bne.n	800d14a <_strtoul_l.isra.0+0x4a>
 800d134:	f89c 0000 	ldrb.w	r0, [ip]
 800d138:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d13c:	2858      	cmp	r0, #88	; 0x58
 800d13e:	d14f      	bne.n	800d1e0 <_strtoul_l.isra.0+0xe0>
 800d140:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d144:	2310      	movs	r3, #16
 800d146:	f10c 0c02 	add.w	ip, ip, #2
 800d14a:	f04f 37ff 	mov.w	r7, #4294967295
 800d14e:	2500      	movs	r5, #0
 800d150:	fbb7 f7f3 	udiv	r7, r7, r3
 800d154:	fb03 f907 	mul.w	r9, r3, r7
 800d158:	ea6f 0909 	mvn.w	r9, r9
 800d15c:	4628      	mov	r0, r5
 800d15e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d162:	2e09      	cmp	r6, #9
 800d164:	d818      	bhi.n	800d198 <_strtoul_l.isra.0+0x98>
 800d166:	4634      	mov	r4, r6
 800d168:	42a3      	cmp	r3, r4
 800d16a:	dd24      	ble.n	800d1b6 <_strtoul_l.isra.0+0xb6>
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	db1f      	blt.n	800d1b0 <_strtoul_l.isra.0+0xb0>
 800d170:	4287      	cmp	r7, r0
 800d172:	d31d      	bcc.n	800d1b0 <_strtoul_l.isra.0+0xb0>
 800d174:	d101      	bne.n	800d17a <_strtoul_l.isra.0+0x7a>
 800d176:	45a1      	cmp	r9, r4
 800d178:	db1a      	blt.n	800d1b0 <_strtoul_l.isra.0+0xb0>
 800d17a:	fb00 4003 	mla	r0, r0, r3, r4
 800d17e:	2501      	movs	r5, #1
 800d180:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d184:	e7eb      	b.n	800d15e <_strtoul_l.isra.0+0x5e>
 800d186:	2c2b      	cmp	r4, #43	; 0x2b
 800d188:	bf08      	it	eq
 800d18a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d18e:	46a8      	mov	r8, r5
 800d190:	bf08      	it	eq
 800d192:	f100 0c02 	addeq.w	ip, r0, #2
 800d196:	e7c7      	b.n	800d128 <_strtoul_l.isra.0+0x28>
 800d198:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d19c:	2e19      	cmp	r6, #25
 800d19e:	d801      	bhi.n	800d1a4 <_strtoul_l.isra.0+0xa4>
 800d1a0:	3c37      	subs	r4, #55	; 0x37
 800d1a2:	e7e1      	b.n	800d168 <_strtoul_l.isra.0+0x68>
 800d1a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d1a8:	2e19      	cmp	r6, #25
 800d1aa:	d804      	bhi.n	800d1b6 <_strtoul_l.isra.0+0xb6>
 800d1ac:	3c57      	subs	r4, #87	; 0x57
 800d1ae:	e7db      	b.n	800d168 <_strtoul_l.isra.0+0x68>
 800d1b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d1b4:	e7e4      	b.n	800d180 <_strtoul_l.isra.0+0x80>
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	da07      	bge.n	800d1ca <_strtoul_l.isra.0+0xca>
 800d1ba:	2322      	movs	r3, #34	; 0x22
 800d1bc:	f8ce 3000 	str.w	r3, [lr]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	b942      	cbnz	r2, 800d1d8 <_strtoul_l.isra.0+0xd8>
 800d1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ca:	f1b8 0f00 	cmp.w	r8, #0
 800d1ce:	d000      	beq.n	800d1d2 <_strtoul_l.isra.0+0xd2>
 800d1d0:	4240      	negs	r0, r0
 800d1d2:	2a00      	cmp	r2, #0
 800d1d4:	d0f7      	beq.n	800d1c6 <_strtoul_l.isra.0+0xc6>
 800d1d6:	b10d      	cbz	r5, 800d1dc <_strtoul_l.isra.0+0xdc>
 800d1d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d1dc:	6011      	str	r1, [r2, #0]
 800d1de:	e7f2      	b.n	800d1c6 <_strtoul_l.isra.0+0xc6>
 800d1e0:	2430      	movs	r4, #48	; 0x30
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1b1      	bne.n	800d14a <_strtoul_l.isra.0+0x4a>
 800d1e6:	2308      	movs	r3, #8
 800d1e8:	e7af      	b.n	800d14a <_strtoul_l.isra.0+0x4a>
 800d1ea:	2c30      	cmp	r4, #48	; 0x30
 800d1ec:	d0a2      	beq.n	800d134 <_strtoul_l.isra.0+0x34>
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	e7ab      	b.n	800d14a <_strtoul_l.isra.0+0x4a>
 800d1f2:	bf00      	nop
 800d1f4:	0800fb01 	.word	0x0800fb01

0800d1f8 <strtoul>:
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	460a      	mov	r2, r1
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	4802      	ldr	r0, [pc, #8]	; (800d208 <strtoul+0x10>)
 800d200:	6800      	ldr	r0, [r0, #0]
 800d202:	f7ff bf7d 	b.w	800d100 <_strtoul_l.isra.0>
 800d206:	bf00      	nop
 800d208:	200001f0 	.word	0x200001f0

0800d20c <_vsniprintf_r>:
 800d20c:	b530      	push	{r4, r5, lr}
 800d20e:	1e14      	subs	r4, r2, #0
 800d210:	4605      	mov	r5, r0
 800d212:	b09b      	sub	sp, #108	; 0x6c
 800d214:	4618      	mov	r0, r3
 800d216:	da05      	bge.n	800d224 <_vsniprintf_r+0x18>
 800d218:	238b      	movs	r3, #139	; 0x8b
 800d21a:	602b      	str	r3, [r5, #0]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	b01b      	add	sp, #108	; 0x6c
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d228:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d22c:	bf14      	ite	ne
 800d22e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d232:	4623      	moveq	r3, r4
 800d234:	9302      	str	r3, [sp, #8]
 800d236:	9305      	str	r3, [sp, #20]
 800d238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d23c:	9100      	str	r1, [sp, #0]
 800d23e:	9104      	str	r1, [sp, #16]
 800d240:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d244:	4602      	mov	r2, r0
 800d246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d248:	4669      	mov	r1, sp
 800d24a:	4628      	mov	r0, r5
 800d24c:	f001 f8cc 	bl	800e3e8 <_svfiprintf_r>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	bfbc      	itt	lt
 800d254:	238b      	movlt	r3, #139	; 0x8b
 800d256:	602b      	strlt	r3, [r5, #0]
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d0e1      	beq.n	800d220 <_vsniprintf_r+0x14>
 800d25c:	9b00      	ldr	r3, [sp, #0]
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
 800d262:	e7dd      	b.n	800d220 <_vsniprintf_r+0x14>

0800d264 <vsniprintf>:
 800d264:	b507      	push	{r0, r1, r2, lr}
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4613      	mov	r3, r2
 800d26a:	460a      	mov	r2, r1
 800d26c:	4601      	mov	r1, r0
 800d26e:	4803      	ldr	r0, [pc, #12]	; (800d27c <vsniprintf+0x18>)
 800d270:	6800      	ldr	r0, [r0, #0]
 800d272:	f7ff ffcb 	bl	800d20c <_vsniprintf_r>
 800d276:	b003      	add	sp, #12
 800d278:	f85d fb04 	ldr.w	pc, [sp], #4
 800d27c:	200001f0 	.word	0x200001f0

0800d280 <rshift>:
 800d280:	6903      	ldr	r3, [r0, #16]
 800d282:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d28a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d28e:	f100 0414 	add.w	r4, r0, #20
 800d292:	dd45      	ble.n	800d320 <rshift+0xa0>
 800d294:	f011 011f 	ands.w	r1, r1, #31
 800d298:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d29c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2a0:	d10c      	bne.n	800d2bc <rshift+0x3c>
 800d2a2:	f100 0710 	add.w	r7, r0, #16
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	42b1      	cmp	r1, r6
 800d2aa:	d334      	bcc.n	800d316 <rshift+0x96>
 800d2ac:	1a9b      	subs	r3, r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	1eea      	subs	r2, r5, #3
 800d2b2:	4296      	cmp	r6, r2
 800d2b4:	bf38      	it	cc
 800d2b6:	2300      	movcc	r3, #0
 800d2b8:	4423      	add	r3, r4
 800d2ba:	e015      	b.n	800d2e8 <rshift+0x68>
 800d2bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2c0:	f1c1 0820 	rsb	r8, r1, #32
 800d2c4:	40cf      	lsrs	r7, r1
 800d2c6:	f105 0e04 	add.w	lr, r5, #4
 800d2ca:	46a1      	mov	r9, r4
 800d2cc:	4576      	cmp	r6, lr
 800d2ce:	46f4      	mov	ip, lr
 800d2d0:	d815      	bhi.n	800d2fe <rshift+0x7e>
 800d2d2:	1a9b      	subs	r3, r3, r2
 800d2d4:	009a      	lsls	r2, r3, #2
 800d2d6:	3a04      	subs	r2, #4
 800d2d8:	3501      	adds	r5, #1
 800d2da:	42ae      	cmp	r6, r5
 800d2dc:	bf38      	it	cc
 800d2de:	2200      	movcc	r2, #0
 800d2e0:	18a3      	adds	r3, r4, r2
 800d2e2:	50a7      	str	r7, [r4, r2]
 800d2e4:	b107      	cbz	r7, 800d2e8 <rshift+0x68>
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	1b1a      	subs	r2, r3, r4
 800d2ea:	42a3      	cmp	r3, r4
 800d2ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2f0:	bf08      	it	eq
 800d2f2:	2300      	moveq	r3, #0
 800d2f4:	6102      	str	r2, [r0, #16]
 800d2f6:	bf08      	it	eq
 800d2f8:	6143      	streq	r3, [r0, #20]
 800d2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2fe:	f8dc c000 	ldr.w	ip, [ip]
 800d302:	fa0c fc08 	lsl.w	ip, ip, r8
 800d306:	ea4c 0707 	orr.w	r7, ip, r7
 800d30a:	f849 7b04 	str.w	r7, [r9], #4
 800d30e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d312:	40cf      	lsrs	r7, r1
 800d314:	e7da      	b.n	800d2cc <rshift+0x4c>
 800d316:	f851 cb04 	ldr.w	ip, [r1], #4
 800d31a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d31e:	e7c3      	b.n	800d2a8 <rshift+0x28>
 800d320:	4623      	mov	r3, r4
 800d322:	e7e1      	b.n	800d2e8 <rshift+0x68>

0800d324 <__hexdig_fun>:
 800d324:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d328:	2b09      	cmp	r3, #9
 800d32a:	d802      	bhi.n	800d332 <__hexdig_fun+0xe>
 800d32c:	3820      	subs	r0, #32
 800d32e:	b2c0      	uxtb	r0, r0
 800d330:	4770      	bx	lr
 800d332:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d336:	2b05      	cmp	r3, #5
 800d338:	d801      	bhi.n	800d33e <__hexdig_fun+0x1a>
 800d33a:	3847      	subs	r0, #71	; 0x47
 800d33c:	e7f7      	b.n	800d32e <__hexdig_fun+0xa>
 800d33e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d342:	2b05      	cmp	r3, #5
 800d344:	d801      	bhi.n	800d34a <__hexdig_fun+0x26>
 800d346:	3827      	subs	r0, #39	; 0x27
 800d348:	e7f1      	b.n	800d32e <__hexdig_fun+0xa>
 800d34a:	2000      	movs	r0, #0
 800d34c:	4770      	bx	lr
	...

0800d350 <__gethex>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	ed2d 8b02 	vpush	{d8}
 800d358:	b089      	sub	sp, #36	; 0x24
 800d35a:	ee08 0a10 	vmov	s16, r0
 800d35e:	9304      	str	r3, [sp, #16]
 800d360:	4bbc      	ldr	r3, [pc, #752]	; (800d654 <__gethex+0x304>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	4618      	mov	r0, r3
 800d368:	468b      	mov	fp, r1
 800d36a:	4690      	mov	r8, r2
 800d36c:	f7f2 ff42 	bl	80001f4 <strlen>
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	f8db 2000 	ldr.w	r2, [fp]
 800d376:	4403      	add	r3, r0
 800d378:	4682      	mov	sl, r0
 800d37a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d37e:	9305      	str	r3, [sp, #20]
 800d380:	1c93      	adds	r3, r2, #2
 800d382:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d386:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d38a:	32fe      	adds	r2, #254	; 0xfe
 800d38c:	18d1      	adds	r1, r2, r3
 800d38e:	461f      	mov	r7, r3
 800d390:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d394:	9100      	str	r1, [sp, #0]
 800d396:	2830      	cmp	r0, #48	; 0x30
 800d398:	d0f8      	beq.n	800d38c <__gethex+0x3c>
 800d39a:	f7ff ffc3 	bl	800d324 <__hexdig_fun>
 800d39e:	4604      	mov	r4, r0
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d13a      	bne.n	800d41a <__gethex+0xca>
 800d3a4:	9901      	ldr	r1, [sp, #4]
 800d3a6:	4652      	mov	r2, sl
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f001 fabf 	bl	800e92c <strncmp>
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d168      	bne.n	800d486 <__gethex+0x136>
 800d3b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3b8:	eb07 060a 	add.w	r6, r7, sl
 800d3bc:	f7ff ffb2 	bl	800d324 <__hexdig_fun>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d062      	beq.n	800d48a <__gethex+0x13a>
 800d3c4:	4633      	mov	r3, r6
 800d3c6:	7818      	ldrb	r0, [r3, #0]
 800d3c8:	2830      	cmp	r0, #48	; 0x30
 800d3ca:	461f      	mov	r7, r3
 800d3cc:	f103 0301 	add.w	r3, r3, #1
 800d3d0:	d0f9      	beq.n	800d3c6 <__gethex+0x76>
 800d3d2:	f7ff ffa7 	bl	800d324 <__hexdig_fun>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	fab0 f480 	clz	r4, r0
 800d3dc:	0964      	lsrs	r4, r4, #5
 800d3de:	4635      	mov	r5, r6
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	463a      	mov	r2, r7
 800d3e4:	4616      	mov	r6, r2
 800d3e6:	3201      	adds	r2, #1
 800d3e8:	7830      	ldrb	r0, [r6, #0]
 800d3ea:	f7ff ff9b 	bl	800d324 <__hexdig_fun>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d1f8      	bne.n	800d3e4 <__gethex+0x94>
 800d3f2:	9901      	ldr	r1, [sp, #4]
 800d3f4:	4652      	mov	r2, sl
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f001 fa98 	bl	800e92c <strncmp>
 800d3fc:	b980      	cbnz	r0, 800d420 <__gethex+0xd0>
 800d3fe:	b94d      	cbnz	r5, 800d414 <__gethex+0xc4>
 800d400:	eb06 050a 	add.w	r5, r6, sl
 800d404:	462a      	mov	r2, r5
 800d406:	4616      	mov	r6, r2
 800d408:	3201      	adds	r2, #1
 800d40a:	7830      	ldrb	r0, [r6, #0]
 800d40c:	f7ff ff8a 	bl	800d324 <__hexdig_fun>
 800d410:	2800      	cmp	r0, #0
 800d412:	d1f8      	bne.n	800d406 <__gethex+0xb6>
 800d414:	1bad      	subs	r5, r5, r6
 800d416:	00ad      	lsls	r5, r5, #2
 800d418:	e004      	b.n	800d424 <__gethex+0xd4>
 800d41a:	2400      	movs	r4, #0
 800d41c:	4625      	mov	r5, r4
 800d41e:	e7e0      	b.n	800d3e2 <__gethex+0x92>
 800d420:	2d00      	cmp	r5, #0
 800d422:	d1f7      	bne.n	800d414 <__gethex+0xc4>
 800d424:	7833      	ldrb	r3, [r6, #0]
 800d426:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d42a:	2b50      	cmp	r3, #80	; 0x50
 800d42c:	d13b      	bne.n	800d4a6 <__gethex+0x156>
 800d42e:	7873      	ldrb	r3, [r6, #1]
 800d430:	2b2b      	cmp	r3, #43	; 0x2b
 800d432:	d02c      	beq.n	800d48e <__gethex+0x13e>
 800d434:	2b2d      	cmp	r3, #45	; 0x2d
 800d436:	d02e      	beq.n	800d496 <__gethex+0x146>
 800d438:	1c71      	adds	r1, r6, #1
 800d43a:	f04f 0900 	mov.w	r9, #0
 800d43e:	7808      	ldrb	r0, [r1, #0]
 800d440:	f7ff ff70 	bl	800d324 <__hexdig_fun>
 800d444:	1e43      	subs	r3, r0, #1
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b18      	cmp	r3, #24
 800d44a:	d82c      	bhi.n	800d4a6 <__gethex+0x156>
 800d44c:	f1a0 0210 	sub.w	r2, r0, #16
 800d450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d454:	f7ff ff66 	bl	800d324 <__hexdig_fun>
 800d458:	1e43      	subs	r3, r0, #1
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b18      	cmp	r3, #24
 800d45e:	d91d      	bls.n	800d49c <__gethex+0x14c>
 800d460:	f1b9 0f00 	cmp.w	r9, #0
 800d464:	d000      	beq.n	800d468 <__gethex+0x118>
 800d466:	4252      	negs	r2, r2
 800d468:	4415      	add	r5, r2
 800d46a:	f8cb 1000 	str.w	r1, [fp]
 800d46e:	b1e4      	cbz	r4, 800d4aa <__gethex+0x15a>
 800d470:	9b00      	ldr	r3, [sp, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	bf14      	ite	ne
 800d476:	2700      	movne	r7, #0
 800d478:	2706      	moveq	r7, #6
 800d47a:	4638      	mov	r0, r7
 800d47c:	b009      	add	sp, #36	; 0x24
 800d47e:	ecbd 8b02 	vpop	{d8}
 800d482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	463e      	mov	r6, r7
 800d488:	4625      	mov	r5, r4
 800d48a:	2401      	movs	r4, #1
 800d48c:	e7ca      	b.n	800d424 <__gethex+0xd4>
 800d48e:	f04f 0900 	mov.w	r9, #0
 800d492:	1cb1      	adds	r1, r6, #2
 800d494:	e7d3      	b.n	800d43e <__gethex+0xee>
 800d496:	f04f 0901 	mov.w	r9, #1
 800d49a:	e7fa      	b.n	800d492 <__gethex+0x142>
 800d49c:	230a      	movs	r3, #10
 800d49e:	fb03 0202 	mla	r2, r3, r2, r0
 800d4a2:	3a10      	subs	r2, #16
 800d4a4:	e7d4      	b.n	800d450 <__gethex+0x100>
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	e7df      	b.n	800d46a <__gethex+0x11a>
 800d4aa:	1bf3      	subs	r3, r6, r7
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	2b07      	cmp	r3, #7
 800d4b2:	dc0b      	bgt.n	800d4cc <__gethex+0x17c>
 800d4b4:	ee18 0a10 	vmov	r0, s16
 800d4b8:	f000 fa70 	bl	800d99c <_Balloc>
 800d4bc:	4604      	mov	r4, r0
 800d4be:	b940      	cbnz	r0, 800d4d2 <__gethex+0x182>
 800d4c0:	4b65      	ldr	r3, [pc, #404]	; (800d658 <__gethex+0x308>)
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	21de      	movs	r1, #222	; 0xde
 800d4c6:	4865      	ldr	r0, [pc, #404]	; (800d65c <__gethex+0x30c>)
 800d4c8:	f001 fa50 	bl	800e96c <__assert_func>
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	105b      	asrs	r3, r3, #1
 800d4d0:	e7ee      	b.n	800d4b0 <__gethex+0x160>
 800d4d2:	f100 0914 	add.w	r9, r0, #20
 800d4d6:	f04f 0b00 	mov.w	fp, #0
 800d4da:	f1ca 0301 	rsb	r3, sl, #1
 800d4de:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4e2:	f8cd b000 	str.w	fp, [sp]
 800d4e6:	9306      	str	r3, [sp, #24]
 800d4e8:	42b7      	cmp	r7, r6
 800d4ea:	d340      	bcc.n	800d56e <__gethex+0x21e>
 800d4ec:	9802      	ldr	r0, [sp, #8]
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	f840 3b04 	str.w	r3, [r0], #4
 800d4f4:	eba0 0009 	sub.w	r0, r0, r9
 800d4f8:	1080      	asrs	r0, r0, #2
 800d4fa:	0146      	lsls	r6, r0, #5
 800d4fc:	6120      	str	r0, [r4, #16]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 fb42 	bl	800db88 <__hi0bits>
 800d504:	1a30      	subs	r0, r6, r0
 800d506:	f8d8 6000 	ldr.w	r6, [r8]
 800d50a:	42b0      	cmp	r0, r6
 800d50c:	dd63      	ble.n	800d5d6 <__gethex+0x286>
 800d50e:	1b87      	subs	r7, r0, r6
 800d510:	4639      	mov	r1, r7
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fedc 	bl	800e2d0 <__any_on>
 800d518:	4682      	mov	sl, r0
 800d51a:	b1a8      	cbz	r0, 800d548 <__gethex+0x1f8>
 800d51c:	1e7b      	subs	r3, r7, #1
 800d51e:	1159      	asrs	r1, r3, #5
 800d520:	f003 021f 	and.w	r2, r3, #31
 800d524:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d528:	f04f 0a01 	mov.w	sl, #1
 800d52c:	fa0a f202 	lsl.w	r2, sl, r2
 800d530:	420a      	tst	r2, r1
 800d532:	d009      	beq.n	800d548 <__gethex+0x1f8>
 800d534:	4553      	cmp	r3, sl
 800d536:	dd05      	ble.n	800d544 <__gethex+0x1f4>
 800d538:	1eb9      	subs	r1, r7, #2
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fec8 	bl	800e2d0 <__any_on>
 800d540:	2800      	cmp	r0, #0
 800d542:	d145      	bne.n	800d5d0 <__gethex+0x280>
 800d544:	f04f 0a02 	mov.w	sl, #2
 800d548:	4639      	mov	r1, r7
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff fe98 	bl	800d280 <rshift>
 800d550:	443d      	add	r5, r7
 800d552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d556:	42ab      	cmp	r3, r5
 800d558:	da4c      	bge.n	800d5f4 <__gethex+0x2a4>
 800d55a:	ee18 0a10 	vmov	r0, s16
 800d55e:	4621      	mov	r1, r4
 800d560:	f000 fa5c 	bl	800da1c <_Bfree>
 800d564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d566:	2300      	movs	r3, #0
 800d568:	6013      	str	r3, [r2, #0]
 800d56a:	27a3      	movs	r7, #163	; 0xa3
 800d56c:	e785      	b.n	800d47a <__gethex+0x12a>
 800d56e:	1e73      	subs	r3, r6, #1
 800d570:	9a05      	ldr	r2, [sp, #20]
 800d572:	9303      	str	r3, [sp, #12]
 800d574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d578:	4293      	cmp	r3, r2
 800d57a:	d019      	beq.n	800d5b0 <__gethex+0x260>
 800d57c:	f1bb 0f20 	cmp.w	fp, #32
 800d580:	d107      	bne.n	800d592 <__gethex+0x242>
 800d582:	9b02      	ldr	r3, [sp, #8]
 800d584:	9a00      	ldr	r2, [sp, #0]
 800d586:	f843 2b04 	str.w	r2, [r3], #4
 800d58a:	9302      	str	r3, [sp, #8]
 800d58c:	2300      	movs	r3, #0
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	469b      	mov	fp, r3
 800d592:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d596:	f7ff fec5 	bl	800d324 <__hexdig_fun>
 800d59a:	9b00      	ldr	r3, [sp, #0]
 800d59c:	f000 000f 	and.w	r0, r0, #15
 800d5a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5a4:	4303      	orrs	r3, r0
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	f10b 0b04 	add.w	fp, fp, #4
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	e00d      	b.n	800d5cc <__gethex+0x27c>
 800d5b0:	9b03      	ldr	r3, [sp, #12]
 800d5b2:	9a06      	ldr	r2, [sp, #24]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	42bb      	cmp	r3, r7
 800d5b8:	d3e0      	bcc.n	800d57c <__gethex+0x22c>
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	9901      	ldr	r1, [sp, #4]
 800d5be:	9307      	str	r3, [sp, #28]
 800d5c0:	4652      	mov	r2, sl
 800d5c2:	f001 f9b3 	bl	800e92c <strncmp>
 800d5c6:	9b07      	ldr	r3, [sp, #28]
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d1d7      	bne.n	800d57c <__gethex+0x22c>
 800d5cc:	461e      	mov	r6, r3
 800d5ce:	e78b      	b.n	800d4e8 <__gethex+0x198>
 800d5d0:	f04f 0a03 	mov.w	sl, #3
 800d5d4:	e7b8      	b.n	800d548 <__gethex+0x1f8>
 800d5d6:	da0a      	bge.n	800d5ee <__gethex+0x29e>
 800d5d8:	1a37      	subs	r7, r6, r0
 800d5da:	4621      	mov	r1, r4
 800d5dc:	ee18 0a10 	vmov	r0, s16
 800d5e0:	463a      	mov	r2, r7
 800d5e2:	f000 fc37 	bl	800de54 <__lshift>
 800d5e6:	1bed      	subs	r5, r5, r7
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	f100 0914 	add.w	r9, r0, #20
 800d5ee:	f04f 0a00 	mov.w	sl, #0
 800d5f2:	e7ae      	b.n	800d552 <__gethex+0x202>
 800d5f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d5f8:	42a8      	cmp	r0, r5
 800d5fa:	dd72      	ble.n	800d6e2 <__gethex+0x392>
 800d5fc:	1b45      	subs	r5, r0, r5
 800d5fe:	42ae      	cmp	r6, r5
 800d600:	dc36      	bgt.n	800d670 <__gethex+0x320>
 800d602:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d606:	2b02      	cmp	r3, #2
 800d608:	d02a      	beq.n	800d660 <__gethex+0x310>
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d02c      	beq.n	800d668 <__gethex+0x318>
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d115      	bne.n	800d63e <__gethex+0x2ee>
 800d612:	42ae      	cmp	r6, r5
 800d614:	d113      	bne.n	800d63e <__gethex+0x2ee>
 800d616:	2e01      	cmp	r6, #1
 800d618:	d10b      	bne.n	800d632 <__gethex+0x2e2>
 800d61a:	9a04      	ldr	r2, [sp, #16]
 800d61c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d620:	6013      	str	r3, [r2, #0]
 800d622:	2301      	movs	r3, #1
 800d624:	6123      	str	r3, [r4, #16]
 800d626:	f8c9 3000 	str.w	r3, [r9]
 800d62a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d62c:	2762      	movs	r7, #98	; 0x62
 800d62e:	601c      	str	r4, [r3, #0]
 800d630:	e723      	b.n	800d47a <__gethex+0x12a>
 800d632:	1e71      	subs	r1, r6, #1
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fe4b 	bl	800e2d0 <__any_on>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d1ed      	bne.n	800d61a <__gethex+0x2ca>
 800d63e:	ee18 0a10 	vmov	r0, s16
 800d642:	4621      	mov	r1, r4
 800d644:	f000 f9ea 	bl	800da1c <_Bfree>
 800d648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d64a:	2300      	movs	r3, #0
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	2750      	movs	r7, #80	; 0x50
 800d650:	e713      	b.n	800d47a <__gethex+0x12a>
 800d652:	bf00      	nop
 800d654:	0800fc7c 	.word	0x0800fc7c
 800d658:	0800fc01 	.word	0x0800fc01
 800d65c:	0800fc12 	.word	0x0800fc12
 800d660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1eb      	bne.n	800d63e <__gethex+0x2ee>
 800d666:	e7d8      	b.n	800d61a <__gethex+0x2ca>
 800d668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1d5      	bne.n	800d61a <__gethex+0x2ca>
 800d66e:	e7e6      	b.n	800d63e <__gethex+0x2ee>
 800d670:	1e6f      	subs	r7, r5, #1
 800d672:	f1ba 0f00 	cmp.w	sl, #0
 800d676:	d131      	bne.n	800d6dc <__gethex+0x38c>
 800d678:	b127      	cbz	r7, 800d684 <__gethex+0x334>
 800d67a:	4639      	mov	r1, r7
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 fe27 	bl	800e2d0 <__any_on>
 800d682:	4682      	mov	sl, r0
 800d684:	117b      	asrs	r3, r7, #5
 800d686:	2101      	movs	r1, #1
 800d688:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d68c:	f007 071f 	and.w	r7, r7, #31
 800d690:	fa01 f707 	lsl.w	r7, r1, r7
 800d694:	421f      	tst	r7, r3
 800d696:	4629      	mov	r1, r5
 800d698:	4620      	mov	r0, r4
 800d69a:	bf18      	it	ne
 800d69c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6a0:	1b76      	subs	r6, r6, r5
 800d6a2:	f7ff fded 	bl	800d280 <rshift>
 800d6a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6aa:	2702      	movs	r7, #2
 800d6ac:	f1ba 0f00 	cmp.w	sl, #0
 800d6b0:	d048      	beq.n	800d744 <__gethex+0x3f4>
 800d6b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d015      	beq.n	800d6e6 <__gethex+0x396>
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d017      	beq.n	800d6ee <__gethex+0x39e>
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d109      	bne.n	800d6d6 <__gethex+0x386>
 800d6c2:	f01a 0f02 	tst.w	sl, #2
 800d6c6:	d006      	beq.n	800d6d6 <__gethex+0x386>
 800d6c8:	f8d9 0000 	ldr.w	r0, [r9]
 800d6cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6d0:	f01a 0f01 	tst.w	sl, #1
 800d6d4:	d10e      	bne.n	800d6f4 <__gethex+0x3a4>
 800d6d6:	f047 0710 	orr.w	r7, r7, #16
 800d6da:	e033      	b.n	800d744 <__gethex+0x3f4>
 800d6dc:	f04f 0a01 	mov.w	sl, #1
 800d6e0:	e7d0      	b.n	800d684 <__gethex+0x334>
 800d6e2:	2701      	movs	r7, #1
 800d6e4:	e7e2      	b.n	800d6ac <__gethex+0x35c>
 800d6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6e8:	f1c3 0301 	rsb	r3, r3, #1
 800d6ec:	9315      	str	r3, [sp, #84]	; 0x54
 800d6ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0f0      	beq.n	800d6d6 <__gethex+0x386>
 800d6f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6f8:	f104 0314 	add.w	r3, r4, #20
 800d6fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d700:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d704:	f04f 0c00 	mov.w	ip, #0
 800d708:	4618      	mov	r0, r3
 800d70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d70e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d712:	d01c      	beq.n	800d74e <__gethex+0x3fe>
 800d714:	3201      	adds	r2, #1
 800d716:	6002      	str	r2, [r0, #0]
 800d718:	2f02      	cmp	r7, #2
 800d71a:	f104 0314 	add.w	r3, r4, #20
 800d71e:	d13f      	bne.n	800d7a0 <__gethex+0x450>
 800d720:	f8d8 2000 	ldr.w	r2, [r8]
 800d724:	3a01      	subs	r2, #1
 800d726:	42b2      	cmp	r2, r6
 800d728:	d10a      	bne.n	800d740 <__gethex+0x3f0>
 800d72a:	1171      	asrs	r1, r6, #5
 800d72c:	2201      	movs	r2, #1
 800d72e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d732:	f006 061f 	and.w	r6, r6, #31
 800d736:	fa02 f606 	lsl.w	r6, r2, r6
 800d73a:	421e      	tst	r6, r3
 800d73c:	bf18      	it	ne
 800d73e:	4617      	movne	r7, r2
 800d740:	f047 0720 	orr.w	r7, r7, #32
 800d744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d746:	601c      	str	r4, [r3, #0]
 800d748:	9b04      	ldr	r3, [sp, #16]
 800d74a:	601d      	str	r5, [r3, #0]
 800d74c:	e695      	b.n	800d47a <__gethex+0x12a>
 800d74e:	4299      	cmp	r1, r3
 800d750:	f843 cc04 	str.w	ip, [r3, #-4]
 800d754:	d8d8      	bhi.n	800d708 <__gethex+0x3b8>
 800d756:	68a3      	ldr	r3, [r4, #8]
 800d758:	459b      	cmp	fp, r3
 800d75a:	db19      	blt.n	800d790 <__gethex+0x440>
 800d75c:	6861      	ldr	r1, [r4, #4]
 800d75e:	ee18 0a10 	vmov	r0, s16
 800d762:	3101      	adds	r1, #1
 800d764:	f000 f91a 	bl	800d99c <_Balloc>
 800d768:	4681      	mov	r9, r0
 800d76a:	b918      	cbnz	r0, 800d774 <__gethex+0x424>
 800d76c:	4b1a      	ldr	r3, [pc, #104]	; (800d7d8 <__gethex+0x488>)
 800d76e:	4602      	mov	r2, r0
 800d770:	2184      	movs	r1, #132	; 0x84
 800d772:	e6a8      	b.n	800d4c6 <__gethex+0x176>
 800d774:	6922      	ldr	r2, [r4, #16]
 800d776:	3202      	adds	r2, #2
 800d778:	f104 010c 	add.w	r1, r4, #12
 800d77c:	0092      	lsls	r2, r2, #2
 800d77e:	300c      	adds	r0, #12
 800d780:	f7fe fd06 	bl	800c190 <memcpy>
 800d784:	4621      	mov	r1, r4
 800d786:	ee18 0a10 	vmov	r0, s16
 800d78a:	f000 f947 	bl	800da1c <_Bfree>
 800d78e:	464c      	mov	r4, r9
 800d790:	6923      	ldr	r3, [r4, #16]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d798:	6122      	str	r2, [r4, #16]
 800d79a:	2201      	movs	r2, #1
 800d79c:	615a      	str	r2, [r3, #20]
 800d79e:	e7bb      	b.n	800d718 <__gethex+0x3c8>
 800d7a0:	6922      	ldr	r2, [r4, #16]
 800d7a2:	455a      	cmp	r2, fp
 800d7a4:	dd0b      	ble.n	800d7be <__gethex+0x46e>
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f7ff fd69 	bl	800d280 <rshift>
 800d7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7b2:	3501      	adds	r5, #1
 800d7b4:	42ab      	cmp	r3, r5
 800d7b6:	f6ff aed0 	blt.w	800d55a <__gethex+0x20a>
 800d7ba:	2701      	movs	r7, #1
 800d7bc:	e7c0      	b.n	800d740 <__gethex+0x3f0>
 800d7be:	f016 061f 	ands.w	r6, r6, #31
 800d7c2:	d0fa      	beq.n	800d7ba <__gethex+0x46a>
 800d7c4:	449a      	add	sl, r3
 800d7c6:	f1c6 0620 	rsb	r6, r6, #32
 800d7ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d7ce:	f000 f9db 	bl	800db88 <__hi0bits>
 800d7d2:	42b0      	cmp	r0, r6
 800d7d4:	dbe7      	blt.n	800d7a6 <__gethex+0x456>
 800d7d6:	e7f0      	b.n	800d7ba <__gethex+0x46a>
 800d7d8:	0800fc01 	.word	0x0800fc01

0800d7dc <L_shift>:
 800d7dc:	f1c2 0208 	rsb	r2, r2, #8
 800d7e0:	0092      	lsls	r2, r2, #2
 800d7e2:	b570      	push	{r4, r5, r6, lr}
 800d7e4:	f1c2 0620 	rsb	r6, r2, #32
 800d7e8:	6843      	ldr	r3, [r0, #4]
 800d7ea:	6804      	ldr	r4, [r0, #0]
 800d7ec:	fa03 f506 	lsl.w	r5, r3, r6
 800d7f0:	432c      	orrs	r4, r5
 800d7f2:	40d3      	lsrs	r3, r2
 800d7f4:	6004      	str	r4, [r0, #0]
 800d7f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7fa:	4288      	cmp	r0, r1
 800d7fc:	d3f4      	bcc.n	800d7e8 <L_shift+0xc>
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}

0800d800 <__match>:
 800d800:	b530      	push	{r4, r5, lr}
 800d802:	6803      	ldr	r3, [r0, #0]
 800d804:	3301      	adds	r3, #1
 800d806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d80a:	b914      	cbnz	r4, 800d812 <__match+0x12>
 800d80c:	6003      	str	r3, [r0, #0]
 800d80e:	2001      	movs	r0, #1
 800d810:	bd30      	pop	{r4, r5, pc}
 800d812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d81a:	2d19      	cmp	r5, #25
 800d81c:	bf98      	it	ls
 800d81e:	3220      	addls	r2, #32
 800d820:	42a2      	cmp	r2, r4
 800d822:	d0f0      	beq.n	800d806 <__match+0x6>
 800d824:	2000      	movs	r0, #0
 800d826:	e7f3      	b.n	800d810 <__match+0x10>

0800d828 <__hexnan>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	680b      	ldr	r3, [r1, #0]
 800d82e:	6801      	ldr	r1, [r0, #0]
 800d830:	115e      	asrs	r6, r3, #5
 800d832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d836:	f013 031f 	ands.w	r3, r3, #31
 800d83a:	b087      	sub	sp, #28
 800d83c:	bf18      	it	ne
 800d83e:	3604      	addne	r6, #4
 800d840:	2500      	movs	r5, #0
 800d842:	1f37      	subs	r7, r6, #4
 800d844:	4682      	mov	sl, r0
 800d846:	4690      	mov	r8, r2
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d84e:	46b9      	mov	r9, r7
 800d850:	463c      	mov	r4, r7
 800d852:	9502      	str	r5, [sp, #8]
 800d854:	46ab      	mov	fp, r5
 800d856:	784a      	ldrb	r2, [r1, #1]
 800d858:	1c4b      	adds	r3, r1, #1
 800d85a:	9303      	str	r3, [sp, #12]
 800d85c:	b342      	cbz	r2, 800d8b0 <__hexnan+0x88>
 800d85e:	4610      	mov	r0, r2
 800d860:	9105      	str	r1, [sp, #20]
 800d862:	9204      	str	r2, [sp, #16]
 800d864:	f7ff fd5e 	bl	800d324 <__hexdig_fun>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d14f      	bne.n	800d90c <__hexnan+0xe4>
 800d86c:	9a04      	ldr	r2, [sp, #16]
 800d86e:	9905      	ldr	r1, [sp, #20]
 800d870:	2a20      	cmp	r2, #32
 800d872:	d818      	bhi.n	800d8a6 <__hexnan+0x7e>
 800d874:	9b02      	ldr	r3, [sp, #8]
 800d876:	459b      	cmp	fp, r3
 800d878:	dd13      	ble.n	800d8a2 <__hexnan+0x7a>
 800d87a:	454c      	cmp	r4, r9
 800d87c:	d206      	bcs.n	800d88c <__hexnan+0x64>
 800d87e:	2d07      	cmp	r5, #7
 800d880:	dc04      	bgt.n	800d88c <__hexnan+0x64>
 800d882:	462a      	mov	r2, r5
 800d884:	4649      	mov	r1, r9
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff ffa8 	bl	800d7dc <L_shift>
 800d88c:	4544      	cmp	r4, r8
 800d88e:	d950      	bls.n	800d932 <__hexnan+0x10a>
 800d890:	2300      	movs	r3, #0
 800d892:	f1a4 0904 	sub.w	r9, r4, #4
 800d896:	f844 3c04 	str.w	r3, [r4, #-4]
 800d89a:	f8cd b008 	str.w	fp, [sp, #8]
 800d89e:	464c      	mov	r4, r9
 800d8a0:	461d      	mov	r5, r3
 800d8a2:	9903      	ldr	r1, [sp, #12]
 800d8a4:	e7d7      	b.n	800d856 <__hexnan+0x2e>
 800d8a6:	2a29      	cmp	r2, #41	; 0x29
 800d8a8:	d156      	bne.n	800d958 <__hexnan+0x130>
 800d8aa:	3102      	adds	r1, #2
 800d8ac:	f8ca 1000 	str.w	r1, [sl]
 800d8b0:	f1bb 0f00 	cmp.w	fp, #0
 800d8b4:	d050      	beq.n	800d958 <__hexnan+0x130>
 800d8b6:	454c      	cmp	r4, r9
 800d8b8:	d206      	bcs.n	800d8c8 <__hexnan+0xa0>
 800d8ba:	2d07      	cmp	r5, #7
 800d8bc:	dc04      	bgt.n	800d8c8 <__hexnan+0xa0>
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4649      	mov	r1, r9
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7ff ff8a 	bl	800d7dc <L_shift>
 800d8c8:	4544      	cmp	r4, r8
 800d8ca:	d934      	bls.n	800d936 <__hexnan+0x10e>
 800d8cc:	f1a8 0204 	sub.w	r2, r8, #4
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8da:	429f      	cmp	r7, r3
 800d8dc:	d2f9      	bcs.n	800d8d2 <__hexnan+0xaa>
 800d8de:	1b3b      	subs	r3, r7, r4
 800d8e0:	f023 0303 	bic.w	r3, r3, #3
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	3401      	adds	r4, #1
 800d8e8:	3e03      	subs	r6, #3
 800d8ea:	42b4      	cmp	r4, r6
 800d8ec:	bf88      	it	hi
 800d8ee:	2304      	movhi	r3, #4
 800d8f0:	4443      	add	r3, r8
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f843 2b04 	str.w	r2, [r3], #4
 800d8f8:	429f      	cmp	r7, r3
 800d8fa:	d2fb      	bcs.n	800d8f4 <__hexnan+0xcc>
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	b91b      	cbnz	r3, 800d908 <__hexnan+0xe0>
 800d900:	4547      	cmp	r7, r8
 800d902:	d127      	bne.n	800d954 <__hexnan+0x12c>
 800d904:	2301      	movs	r3, #1
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	2005      	movs	r0, #5
 800d90a:	e026      	b.n	800d95a <__hexnan+0x132>
 800d90c:	3501      	adds	r5, #1
 800d90e:	2d08      	cmp	r5, #8
 800d910:	f10b 0b01 	add.w	fp, fp, #1
 800d914:	dd06      	ble.n	800d924 <__hexnan+0xfc>
 800d916:	4544      	cmp	r4, r8
 800d918:	d9c3      	bls.n	800d8a2 <__hexnan+0x7a>
 800d91a:	2300      	movs	r3, #0
 800d91c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d920:	2501      	movs	r5, #1
 800d922:	3c04      	subs	r4, #4
 800d924:	6822      	ldr	r2, [r4, #0]
 800d926:	f000 000f 	and.w	r0, r0, #15
 800d92a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d92e:	6022      	str	r2, [r4, #0]
 800d930:	e7b7      	b.n	800d8a2 <__hexnan+0x7a>
 800d932:	2508      	movs	r5, #8
 800d934:	e7b5      	b.n	800d8a2 <__hexnan+0x7a>
 800d936:	9b01      	ldr	r3, [sp, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0df      	beq.n	800d8fc <__hexnan+0xd4>
 800d93c:	f04f 32ff 	mov.w	r2, #4294967295
 800d940:	f1c3 0320 	rsb	r3, r3, #32
 800d944:	fa22 f303 	lsr.w	r3, r2, r3
 800d948:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d94c:	401a      	ands	r2, r3
 800d94e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d952:	e7d3      	b.n	800d8fc <__hexnan+0xd4>
 800d954:	3f04      	subs	r7, #4
 800d956:	e7d1      	b.n	800d8fc <__hexnan+0xd4>
 800d958:	2004      	movs	r0, #4
 800d95a:	b007      	add	sp, #28
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d960 <__ascii_mbtowc>:
 800d960:	b082      	sub	sp, #8
 800d962:	b901      	cbnz	r1, 800d966 <__ascii_mbtowc+0x6>
 800d964:	a901      	add	r1, sp, #4
 800d966:	b142      	cbz	r2, 800d97a <__ascii_mbtowc+0x1a>
 800d968:	b14b      	cbz	r3, 800d97e <__ascii_mbtowc+0x1e>
 800d96a:	7813      	ldrb	r3, [r2, #0]
 800d96c:	600b      	str	r3, [r1, #0]
 800d96e:	7812      	ldrb	r2, [r2, #0]
 800d970:	1e10      	subs	r0, r2, #0
 800d972:	bf18      	it	ne
 800d974:	2001      	movne	r0, #1
 800d976:	b002      	add	sp, #8
 800d978:	4770      	bx	lr
 800d97a:	4610      	mov	r0, r2
 800d97c:	e7fb      	b.n	800d976 <__ascii_mbtowc+0x16>
 800d97e:	f06f 0001 	mvn.w	r0, #1
 800d982:	e7f8      	b.n	800d976 <__ascii_mbtowc+0x16>

0800d984 <__malloc_lock>:
 800d984:	4801      	ldr	r0, [pc, #4]	; (800d98c <__malloc_lock+0x8>)
 800d986:	f001 b822 	b.w	800e9ce <__retarget_lock_acquire_recursive>
 800d98a:	bf00      	nop
 800d98c:	20002d28 	.word	0x20002d28

0800d990 <__malloc_unlock>:
 800d990:	4801      	ldr	r0, [pc, #4]	; (800d998 <__malloc_unlock+0x8>)
 800d992:	f001 b81d 	b.w	800e9d0 <__retarget_lock_release_recursive>
 800d996:	bf00      	nop
 800d998:	20002d28 	.word	0x20002d28

0800d99c <_Balloc>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	460d      	mov	r5, r1
 800d9a4:	b976      	cbnz	r6, 800d9c4 <_Balloc+0x28>
 800d9a6:	2010      	movs	r0, #16
 800d9a8:	f7fe fbe2 	bl	800c170 <malloc>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	6260      	str	r0, [r4, #36]	; 0x24
 800d9b0:	b920      	cbnz	r0, 800d9bc <_Balloc+0x20>
 800d9b2:	4b18      	ldr	r3, [pc, #96]	; (800da14 <_Balloc+0x78>)
 800d9b4:	4818      	ldr	r0, [pc, #96]	; (800da18 <_Balloc+0x7c>)
 800d9b6:	2166      	movs	r1, #102	; 0x66
 800d9b8:	f000 ffd8 	bl	800e96c <__assert_func>
 800d9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9c0:	6006      	str	r6, [r0, #0]
 800d9c2:	60c6      	str	r6, [r0, #12]
 800d9c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9c6:	68f3      	ldr	r3, [r6, #12]
 800d9c8:	b183      	cbz	r3, 800d9ec <_Balloc+0x50>
 800d9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9d2:	b9b8      	cbnz	r0, 800da04 <_Balloc+0x68>
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d9da:	1d72      	adds	r2, r6, #5
 800d9dc:	0092      	lsls	r2, r2, #2
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 fc97 	bl	800e312 <_calloc_r>
 800d9e4:	b160      	cbz	r0, 800da00 <_Balloc+0x64>
 800d9e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9ea:	e00e      	b.n	800da0a <_Balloc+0x6e>
 800d9ec:	2221      	movs	r2, #33	; 0x21
 800d9ee:	2104      	movs	r1, #4
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fc8e 	bl	800e312 <_calloc_r>
 800d9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9f8:	60f0      	str	r0, [r6, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e4      	bne.n	800d9ca <_Balloc+0x2e>
 800da00:	2000      	movs	r0, #0
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	6802      	ldr	r2, [r0, #0]
 800da06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da0a:	2300      	movs	r3, #0
 800da0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da10:	e7f7      	b.n	800da02 <_Balloc+0x66>
 800da12:	bf00      	nop
 800da14:	0800fc90 	.word	0x0800fc90
 800da18:	0800fca7 	.word	0x0800fca7

0800da1c <_Bfree>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da20:	4605      	mov	r5, r0
 800da22:	460c      	mov	r4, r1
 800da24:	b976      	cbnz	r6, 800da44 <_Bfree+0x28>
 800da26:	2010      	movs	r0, #16
 800da28:	f7fe fba2 	bl	800c170 <malloc>
 800da2c:	4602      	mov	r2, r0
 800da2e:	6268      	str	r0, [r5, #36]	; 0x24
 800da30:	b920      	cbnz	r0, 800da3c <_Bfree+0x20>
 800da32:	4b09      	ldr	r3, [pc, #36]	; (800da58 <_Bfree+0x3c>)
 800da34:	4809      	ldr	r0, [pc, #36]	; (800da5c <_Bfree+0x40>)
 800da36:	218a      	movs	r1, #138	; 0x8a
 800da38:	f000 ff98 	bl	800e96c <__assert_func>
 800da3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da40:	6006      	str	r6, [r0, #0]
 800da42:	60c6      	str	r6, [r0, #12]
 800da44:	b13c      	cbz	r4, 800da56 <_Bfree+0x3a>
 800da46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da48:	6862      	ldr	r2, [r4, #4]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da50:	6021      	str	r1, [r4, #0]
 800da52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	0800fc90 	.word	0x0800fc90
 800da5c:	0800fca7 	.word	0x0800fca7

0800da60 <__multadd>:
 800da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da64:	690e      	ldr	r6, [r1, #16]
 800da66:	4607      	mov	r7, r0
 800da68:	4698      	mov	r8, r3
 800da6a:	460c      	mov	r4, r1
 800da6c:	f101 0014 	add.w	r0, r1, #20
 800da70:	2300      	movs	r3, #0
 800da72:	6805      	ldr	r5, [r0, #0]
 800da74:	b2a9      	uxth	r1, r5
 800da76:	fb02 8101 	mla	r1, r2, r1, r8
 800da7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800da7e:	0c2d      	lsrs	r5, r5, #16
 800da80:	fb02 c505 	mla	r5, r2, r5, ip
 800da84:	b289      	uxth	r1, r1
 800da86:	3301      	adds	r3, #1
 800da88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800da8c:	429e      	cmp	r6, r3
 800da8e:	f840 1b04 	str.w	r1, [r0], #4
 800da92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800da96:	dcec      	bgt.n	800da72 <__multadd+0x12>
 800da98:	f1b8 0f00 	cmp.w	r8, #0
 800da9c:	d022      	beq.n	800dae4 <__multadd+0x84>
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	dc19      	bgt.n	800dad8 <__multadd+0x78>
 800daa4:	6861      	ldr	r1, [r4, #4]
 800daa6:	4638      	mov	r0, r7
 800daa8:	3101      	adds	r1, #1
 800daaa:	f7ff ff77 	bl	800d99c <_Balloc>
 800daae:	4605      	mov	r5, r0
 800dab0:	b928      	cbnz	r0, 800dabe <__multadd+0x5e>
 800dab2:	4602      	mov	r2, r0
 800dab4:	4b0d      	ldr	r3, [pc, #52]	; (800daec <__multadd+0x8c>)
 800dab6:	480e      	ldr	r0, [pc, #56]	; (800daf0 <__multadd+0x90>)
 800dab8:	21b5      	movs	r1, #181	; 0xb5
 800daba:	f000 ff57 	bl	800e96c <__assert_func>
 800dabe:	6922      	ldr	r2, [r4, #16]
 800dac0:	3202      	adds	r2, #2
 800dac2:	f104 010c 	add.w	r1, r4, #12
 800dac6:	0092      	lsls	r2, r2, #2
 800dac8:	300c      	adds	r0, #12
 800daca:	f7fe fb61 	bl	800c190 <memcpy>
 800dace:	4621      	mov	r1, r4
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7ff ffa3 	bl	800da1c <_Bfree>
 800dad6:	462c      	mov	r4, r5
 800dad8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dadc:	3601      	adds	r6, #1
 800dade:	f8c3 8014 	str.w	r8, [r3, #20]
 800dae2:	6126      	str	r6, [r4, #16]
 800dae4:	4620      	mov	r0, r4
 800dae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daea:	bf00      	nop
 800daec:	0800fc01 	.word	0x0800fc01
 800daf0:	0800fca7 	.word	0x0800fca7

0800daf4 <__s2b>:
 800daf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf8:	460c      	mov	r4, r1
 800dafa:	4615      	mov	r5, r2
 800dafc:	461f      	mov	r7, r3
 800dafe:	2209      	movs	r2, #9
 800db00:	3308      	adds	r3, #8
 800db02:	4606      	mov	r6, r0
 800db04:	fb93 f3f2 	sdiv	r3, r3, r2
 800db08:	2100      	movs	r1, #0
 800db0a:	2201      	movs	r2, #1
 800db0c:	429a      	cmp	r2, r3
 800db0e:	db09      	blt.n	800db24 <__s2b+0x30>
 800db10:	4630      	mov	r0, r6
 800db12:	f7ff ff43 	bl	800d99c <_Balloc>
 800db16:	b940      	cbnz	r0, 800db2a <__s2b+0x36>
 800db18:	4602      	mov	r2, r0
 800db1a:	4b19      	ldr	r3, [pc, #100]	; (800db80 <__s2b+0x8c>)
 800db1c:	4819      	ldr	r0, [pc, #100]	; (800db84 <__s2b+0x90>)
 800db1e:	21ce      	movs	r1, #206	; 0xce
 800db20:	f000 ff24 	bl	800e96c <__assert_func>
 800db24:	0052      	lsls	r2, r2, #1
 800db26:	3101      	adds	r1, #1
 800db28:	e7f0      	b.n	800db0c <__s2b+0x18>
 800db2a:	9b08      	ldr	r3, [sp, #32]
 800db2c:	6143      	str	r3, [r0, #20]
 800db2e:	2d09      	cmp	r5, #9
 800db30:	f04f 0301 	mov.w	r3, #1
 800db34:	6103      	str	r3, [r0, #16]
 800db36:	dd16      	ble.n	800db66 <__s2b+0x72>
 800db38:	f104 0909 	add.w	r9, r4, #9
 800db3c:	46c8      	mov	r8, r9
 800db3e:	442c      	add	r4, r5
 800db40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db44:	4601      	mov	r1, r0
 800db46:	3b30      	subs	r3, #48	; 0x30
 800db48:	220a      	movs	r2, #10
 800db4a:	4630      	mov	r0, r6
 800db4c:	f7ff ff88 	bl	800da60 <__multadd>
 800db50:	45a0      	cmp	r8, r4
 800db52:	d1f5      	bne.n	800db40 <__s2b+0x4c>
 800db54:	f1a5 0408 	sub.w	r4, r5, #8
 800db58:	444c      	add	r4, r9
 800db5a:	1b2d      	subs	r5, r5, r4
 800db5c:	1963      	adds	r3, r4, r5
 800db5e:	42bb      	cmp	r3, r7
 800db60:	db04      	blt.n	800db6c <__s2b+0x78>
 800db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db66:	340a      	adds	r4, #10
 800db68:	2509      	movs	r5, #9
 800db6a:	e7f6      	b.n	800db5a <__s2b+0x66>
 800db6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db70:	4601      	mov	r1, r0
 800db72:	3b30      	subs	r3, #48	; 0x30
 800db74:	220a      	movs	r2, #10
 800db76:	4630      	mov	r0, r6
 800db78:	f7ff ff72 	bl	800da60 <__multadd>
 800db7c:	e7ee      	b.n	800db5c <__s2b+0x68>
 800db7e:	bf00      	nop
 800db80:	0800fc01 	.word	0x0800fc01
 800db84:	0800fca7 	.word	0x0800fca7

0800db88 <__hi0bits>:
 800db88:	0c03      	lsrs	r3, r0, #16
 800db8a:	041b      	lsls	r3, r3, #16
 800db8c:	b9d3      	cbnz	r3, 800dbc4 <__hi0bits+0x3c>
 800db8e:	0400      	lsls	r0, r0, #16
 800db90:	2310      	movs	r3, #16
 800db92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db96:	bf04      	itt	eq
 800db98:	0200      	lsleq	r0, r0, #8
 800db9a:	3308      	addeq	r3, #8
 800db9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dba0:	bf04      	itt	eq
 800dba2:	0100      	lsleq	r0, r0, #4
 800dba4:	3304      	addeq	r3, #4
 800dba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbaa:	bf04      	itt	eq
 800dbac:	0080      	lsleq	r0, r0, #2
 800dbae:	3302      	addeq	r3, #2
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	db05      	blt.n	800dbc0 <__hi0bits+0x38>
 800dbb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbb8:	f103 0301 	add.w	r3, r3, #1
 800dbbc:	bf08      	it	eq
 800dbbe:	2320      	moveq	r3, #32
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	4770      	bx	lr
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	e7e4      	b.n	800db92 <__hi0bits+0xa>

0800dbc8 <__lo0bits>:
 800dbc8:	6803      	ldr	r3, [r0, #0]
 800dbca:	f013 0207 	ands.w	r2, r3, #7
 800dbce:	4601      	mov	r1, r0
 800dbd0:	d00b      	beq.n	800dbea <__lo0bits+0x22>
 800dbd2:	07da      	lsls	r2, r3, #31
 800dbd4:	d424      	bmi.n	800dc20 <__lo0bits+0x58>
 800dbd6:	0798      	lsls	r0, r3, #30
 800dbd8:	bf49      	itett	mi
 800dbda:	085b      	lsrmi	r3, r3, #1
 800dbdc:	089b      	lsrpl	r3, r3, #2
 800dbde:	2001      	movmi	r0, #1
 800dbe0:	600b      	strmi	r3, [r1, #0]
 800dbe2:	bf5c      	itt	pl
 800dbe4:	600b      	strpl	r3, [r1, #0]
 800dbe6:	2002      	movpl	r0, #2
 800dbe8:	4770      	bx	lr
 800dbea:	b298      	uxth	r0, r3
 800dbec:	b9b0      	cbnz	r0, 800dc1c <__lo0bits+0x54>
 800dbee:	0c1b      	lsrs	r3, r3, #16
 800dbf0:	2010      	movs	r0, #16
 800dbf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dbf6:	bf04      	itt	eq
 800dbf8:	0a1b      	lsreq	r3, r3, #8
 800dbfa:	3008      	addeq	r0, #8
 800dbfc:	071a      	lsls	r2, r3, #28
 800dbfe:	bf04      	itt	eq
 800dc00:	091b      	lsreq	r3, r3, #4
 800dc02:	3004      	addeq	r0, #4
 800dc04:	079a      	lsls	r2, r3, #30
 800dc06:	bf04      	itt	eq
 800dc08:	089b      	lsreq	r3, r3, #2
 800dc0a:	3002      	addeq	r0, #2
 800dc0c:	07da      	lsls	r2, r3, #31
 800dc0e:	d403      	bmi.n	800dc18 <__lo0bits+0x50>
 800dc10:	085b      	lsrs	r3, r3, #1
 800dc12:	f100 0001 	add.w	r0, r0, #1
 800dc16:	d005      	beq.n	800dc24 <__lo0bits+0x5c>
 800dc18:	600b      	str	r3, [r1, #0]
 800dc1a:	4770      	bx	lr
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	e7e8      	b.n	800dbf2 <__lo0bits+0x2a>
 800dc20:	2000      	movs	r0, #0
 800dc22:	4770      	bx	lr
 800dc24:	2020      	movs	r0, #32
 800dc26:	4770      	bx	lr

0800dc28 <__i2b>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	f7ff feb5 	bl	800d99c <_Balloc>
 800dc32:	4602      	mov	r2, r0
 800dc34:	b928      	cbnz	r0, 800dc42 <__i2b+0x1a>
 800dc36:	4b05      	ldr	r3, [pc, #20]	; (800dc4c <__i2b+0x24>)
 800dc38:	4805      	ldr	r0, [pc, #20]	; (800dc50 <__i2b+0x28>)
 800dc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc3e:	f000 fe95 	bl	800e96c <__assert_func>
 800dc42:	2301      	movs	r3, #1
 800dc44:	6144      	str	r4, [r0, #20]
 800dc46:	6103      	str	r3, [r0, #16]
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	bf00      	nop
 800dc4c:	0800fc01 	.word	0x0800fc01
 800dc50:	0800fca7 	.word	0x0800fca7

0800dc54 <__multiply>:
 800dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc58:	4614      	mov	r4, r2
 800dc5a:	690a      	ldr	r2, [r1, #16]
 800dc5c:	6923      	ldr	r3, [r4, #16]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	bfb8      	it	lt
 800dc62:	460b      	movlt	r3, r1
 800dc64:	460d      	mov	r5, r1
 800dc66:	bfbc      	itt	lt
 800dc68:	4625      	movlt	r5, r4
 800dc6a:	461c      	movlt	r4, r3
 800dc6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dc70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc74:	68ab      	ldr	r3, [r5, #8]
 800dc76:	6869      	ldr	r1, [r5, #4]
 800dc78:	eb0a 0709 	add.w	r7, sl, r9
 800dc7c:	42bb      	cmp	r3, r7
 800dc7e:	b085      	sub	sp, #20
 800dc80:	bfb8      	it	lt
 800dc82:	3101      	addlt	r1, #1
 800dc84:	f7ff fe8a 	bl	800d99c <_Balloc>
 800dc88:	b930      	cbnz	r0, 800dc98 <__multiply+0x44>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4b42      	ldr	r3, [pc, #264]	; (800dd98 <__multiply+0x144>)
 800dc8e:	4843      	ldr	r0, [pc, #268]	; (800dd9c <__multiply+0x148>)
 800dc90:	f240 115d 	movw	r1, #349	; 0x15d
 800dc94:	f000 fe6a 	bl	800e96c <__assert_func>
 800dc98:	f100 0614 	add.w	r6, r0, #20
 800dc9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dca0:	4633      	mov	r3, r6
 800dca2:	2200      	movs	r2, #0
 800dca4:	4543      	cmp	r3, r8
 800dca6:	d31e      	bcc.n	800dce6 <__multiply+0x92>
 800dca8:	f105 0c14 	add.w	ip, r5, #20
 800dcac:	f104 0314 	add.w	r3, r4, #20
 800dcb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dcb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dcb8:	9202      	str	r2, [sp, #8]
 800dcba:	ebac 0205 	sub.w	r2, ip, r5
 800dcbe:	3a15      	subs	r2, #21
 800dcc0:	f022 0203 	bic.w	r2, r2, #3
 800dcc4:	3204      	adds	r2, #4
 800dcc6:	f105 0115 	add.w	r1, r5, #21
 800dcca:	458c      	cmp	ip, r1
 800dccc:	bf38      	it	cc
 800dcce:	2204      	movcc	r2, #4
 800dcd0:	9201      	str	r2, [sp, #4]
 800dcd2:	9a02      	ldr	r2, [sp, #8]
 800dcd4:	9303      	str	r3, [sp, #12]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d808      	bhi.n	800dcec <__multiply+0x98>
 800dcda:	2f00      	cmp	r7, #0
 800dcdc:	dc55      	bgt.n	800dd8a <__multiply+0x136>
 800dcde:	6107      	str	r7, [r0, #16]
 800dce0:	b005      	add	sp, #20
 800dce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce6:	f843 2b04 	str.w	r2, [r3], #4
 800dcea:	e7db      	b.n	800dca4 <__multiply+0x50>
 800dcec:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcf0:	f1ba 0f00 	cmp.w	sl, #0
 800dcf4:	d020      	beq.n	800dd38 <__multiply+0xe4>
 800dcf6:	f105 0e14 	add.w	lr, r5, #20
 800dcfa:	46b1      	mov	r9, r6
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800dd02:	f8d9 b000 	ldr.w	fp, [r9]
 800dd06:	b2a1      	uxth	r1, r4
 800dd08:	fa1f fb8b 	uxth.w	fp, fp
 800dd0c:	fb0a b101 	mla	r1, sl, r1, fp
 800dd10:	4411      	add	r1, r2
 800dd12:	f8d9 2000 	ldr.w	r2, [r9]
 800dd16:	0c24      	lsrs	r4, r4, #16
 800dd18:	0c12      	lsrs	r2, r2, #16
 800dd1a:	fb0a 2404 	mla	r4, sl, r4, r2
 800dd1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dd22:	b289      	uxth	r1, r1
 800dd24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dd28:	45f4      	cmp	ip, lr
 800dd2a:	f849 1b04 	str.w	r1, [r9], #4
 800dd2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dd32:	d8e4      	bhi.n	800dcfe <__multiply+0xaa>
 800dd34:	9901      	ldr	r1, [sp, #4]
 800dd36:	5072      	str	r2, [r6, r1]
 800dd38:	9a03      	ldr	r2, [sp, #12]
 800dd3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	f1b9 0f00 	cmp.w	r9, #0
 800dd44:	d01f      	beq.n	800dd86 <__multiply+0x132>
 800dd46:	6834      	ldr	r4, [r6, #0]
 800dd48:	f105 0114 	add.w	r1, r5, #20
 800dd4c:	46b6      	mov	lr, r6
 800dd4e:	f04f 0a00 	mov.w	sl, #0
 800dd52:	880a      	ldrh	r2, [r1, #0]
 800dd54:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dd58:	fb09 b202 	mla	r2, r9, r2, fp
 800dd5c:	4492      	add	sl, r2
 800dd5e:	b2a4      	uxth	r4, r4
 800dd60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dd64:	f84e 4b04 	str.w	r4, [lr], #4
 800dd68:	f851 4b04 	ldr.w	r4, [r1], #4
 800dd6c:	f8be 2000 	ldrh.w	r2, [lr]
 800dd70:	0c24      	lsrs	r4, r4, #16
 800dd72:	fb09 2404 	mla	r4, r9, r4, r2
 800dd76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dd7a:	458c      	cmp	ip, r1
 800dd7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd80:	d8e7      	bhi.n	800dd52 <__multiply+0xfe>
 800dd82:	9a01      	ldr	r2, [sp, #4]
 800dd84:	50b4      	str	r4, [r6, r2]
 800dd86:	3604      	adds	r6, #4
 800dd88:	e7a3      	b.n	800dcd2 <__multiply+0x7e>
 800dd8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1a5      	bne.n	800dcde <__multiply+0x8a>
 800dd92:	3f01      	subs	r7, #1
 800dd94:	e7a1      	b.n	800dcda <__multiply+0x86>
 800dd96:	bf00      	nop
 800dd98:	0800fc01 	.word	0x0800fc01
 800dd9c:	0800fca7 	.word	0x0800fca7

0800dda0 <__pow5mult>:
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	4615      	mov	r5, r2
 800dda6:	f012 0203 	ands.w	r2, r2, #3
 800ddaa:	4606      	mov	r6, r0
 800ddac:	460f      	mov	r7, r1
 800ddae:	d007      	beq.n	800ddc0 <__pow5mult+0x20>
 800ddb0:	4c25      	ldr	r4, [pc, #148]	; (800de48 <__pow5mult+0xa8>)
 800ddb2:	3a01      	subs	r2, #1
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddba:	f7ff fe51 	bl	800da60 <__multadd>
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	10ad      	asrs	r5, r5, #2
 800ddc2:	d03d      	beq.n	800de40 <__pow5mult+0xa0>
 800ddc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddc6:	b97c      	cbnz	r4, 800dde8 <__pow5mult+0x48>
 800ddc8:	2010      	movs	r0, #16
 800ddca:	f7fe f9d1 	bl	800c170 <malloc>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	6270      	str	r0, [r6, #36]	; 0x24
 800ddd2:	b928      	cbnz	r0, 800dde0 <__pow5mult+0x40>
 800ddd4:	4b1d      	ldr	r3, [pc, #116]	; (800de4c <__pow5mult+0xac>)
 800ddd6:	481e      	ldr	r0, [pc, #120]	; (800de50 <__pow5mult+0xb0>)
 800ddd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dddc:	f000 fdc6 	bl	800e96c <__assert_func>
 800dde0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dde4:	6004      	str	r4, [r0, #0]
 800dde6:	60c4      	str	r4, [r0, #12]
 800dde8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddf0:	b94c      	cbnz	r4, 800de06 <__pow5mult+0x66>
 800ddf2:	f240 2171 	movw	r1, #625	; 0x271
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f7ff ff16 	bl	800dc28 <__i2b>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800de02:	4604      	mov	r4, r0
 800de04:	6003      	str	r3, [r0, #0]
 800de06:	f04f 0900 	mov.w	r9, #0
 800de0a:	07eb      	lsls	r3, r5, #31
 800de0c:	d50a      	bpl.n	800de24 <__pow5mult+0x84>
 800de0e:	4639      	mov	r1, r7
 800de10:	4622      	mov	r2, r4
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff ff1e 	bl	800dc54 <__multiply>
 800de18:	4639      	mov	r1, r7
 800de1a:	4680      	mov	r8, r0
 800de1c:	4630      	mov	r0, r6
 800de1e:	f7ff fdfd 	bl	800da1c <_Bfree>
 800de22:	4647      	mov	r7, r8
 800de24:	106d      	asrs	r5, r5, #1
 800de26:	d00b      	beq.n	800de40 <__pow5mult+0xa0>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	b938      	cbnz	r0, 800de3c <__pow5mult+0x9c>
 800de2c:	4622      	mov	r2, r4
 800de2e:	4621      	mov	r1, r4
 800de30:	4630      	mov	r0, r6
 800de32:	f7ff ff0f 	bl	800dc54 <__multiply>
 800de36:	6020      	str	r0, [r4, #0]
 800de38:	f8c0 9000 	str.w	r9, [r0]
 800de3c:	4604      	mov	r4, r0
 800de3e:	e7e4      	b.n	800de0a <__pow5mult+0x6a>
 800de40:	4638      	mov	r0, r7
 800de42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de46:	bf00      	nop
 800de48:	0800fdf8 	.word	0x0800fdf8
 800de4c:	0800fc90 	.word	0x0800fc90
 800de50:	0800fca7 	.word	0x0800fca7

0800de54 <__lshift>:
 800de54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de58:	460c      	mov	r4, r1
 800de5a:	6849      	ldr	r1, [r1, #4]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de62:	68a3      	ldr	r3, [r4, #8]
 800de64:	4607      	mov	r7, r0
 800de66:	4691      	mov	r9, r2
 800de68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de6c:	f108 0601 	add.w	r6, r8, #1
 800de70:	42b3      	cmp	r3, r6
 800de72:	db0b      	blt.n	800de8c <__lshift+0x38>
 800de74:	4638      	mov	r0, r7
 800de76:	f7ff fd91 	bl	800d99c <_Balloc>
 800de7a:	4605      	mov	r5, r0
 800de7c:	b948      	cbnz	r0, 800de92 <__lshift+0x3e>
 800de7e:	4602      	mov	r2, r0
 800de80:	4b28      	ldr	r3, [pc, #160]	; (800df24 <__lshift+0xd0>)
 800de82:	4829      	ldr	r0, [pc, #164]	; (800df28 <__lshift+0xd4>)
 800de84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de88:	f000 fd70 	bl	800e96c <__assert_func>
 800de8c:	3101      	adds	r1, #1
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	e7ee      	b.n	800de70 <__lshift+0x1c>
 800de92:	2300      	movs	r3, #0
 800de94:	f100 0114 	add.w	r1, r0, #20
 800de98:	f100 0210 	add.w	r2, r0, #16
 800de9c:	4618      	mov	r0, r3
 800de9e:	4553      	cmp	r3, sl
 800dea0:	db33      	blt.n	800df0a <__lshift+0xb6>
 800dea2:	6920      	ldr	r0, [r4, #16]
 800dea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dea8:	f104 0314 	add.w	r3, r4, #20
 800deac:	f019 091f 	ands.w	r9, r9, #31
 800deb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800deb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800deb8:	d02b      	beq.n	800df12 <__lshift+0xbe>
 800deba:	f1c9 0e20 	rsb	lr, r9, #32
 800debe:	468a      	mov	sl, r1
 800dec0:	2200      	movs	r2, #0
 800dec2:	6818      	ldr	r0, [r3, #0]
 800dec4:	fa00 f009 	lsl.w	r0, r0, r9
 800dec8:	4302      	orrs	r2, r0
 800deca:	f84a 2b04 	str.w	r2, [sl], #4
 800dece:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded2:	459c      	cmp	ip, r3
 800ded4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ded8:	d8f3      	bhi.n	800dec2 <__lshift+0x6e>
 800deda:	ebac 0304 	sub.w	r3, ip, r4
 800dede:	3b15      	subs	r3, #21
 800dee0:	f023 0303 	bic.w	r3, r3, #3
 800dee4:	3304      	adds	r3, #4
 800dee6:	f104 0015 	add.w	r0, r4, #21
 800deea:	4584      	cmp	ip, r0
 800deec:	bf38      	it	cc
 800deee:	2304      	movcc	r3, #4
 800def0:	50ca      	str	r2, [r1, r3]
 800def2:	b10a      	cbz	r2, 800def8 <__lshift+0xa4>
 800def4:	f108 0602 	add.w	r6, r8, #2
 800def8:	3e01      	subs	r6, #1
 800defa:	4638      	mov	r0, r7
 800defc:	612e      	str	r6, [r5, #16]
 800defe:	4621      	mov	r1, r4
 800df00:	f7ff fd8c 	bl	800da1c <_Bfree>
 800df04:	4628      	mov	r0, r5
 800df06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df0e:	3301      	adds	r3, #1
 800df10:	e7c5      	b.n	800de9e <__lshift+0x4a>
 800df12:	3904      	subs	r1, #4
 800df14:	f853 2b04 	ldr.w	r2, [r3], #4
 800df18:	f841 2f04 	str.w	r2, [r1, #4]!
 800df1c:	459c      	cmp	ip, r3
 800df1e:	d8f9      	bhi.n	800df14 <__lshift+0xc0>
 800df20:	e7ea      	b.n	800def8 <__lshift+0xa4>
 800df22:	bf00      	nop
 800df24:	0800fc01 	.word	0x0800fc01
 800df28:	0800fca7 	.word	0x0800fca7

0800df2c <__mcmp>:
 800df2c:	b530      	push	{r4, r5, lr}
 800df2e:	6902      	ldr	r2, [r0, #16]
 800df30:	690c      	ldr	r4, [r1, #16]
 800df32:	1b12      	subs	r2, r2, r4
 800df34:	d10e      	bne.n	800df54 <__mcmp+0x28>
 800df36:	f100 0314 	add.w	r3, r0, #20
 800df3a:	3114      	adds	r1, #20
 800df3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df4c:	42a5      	cmp	r5, r4
 800df4e:	d003      	beq.n	800df58 <__mcmp+0x2c>
 800df50:	d305      	bcc.n	800df5e <__mcmp+0x32>
 800df52:	2201      	movs	r2, #1
 800df54:	4610      	mov	r0, r2
 800df56:	bd30      	pop	{r4, r5, pc}
 800df58:	4283      	cmp	r3, r0
 800df5a:	d3f3      	bcc.n	800df44 <__mcmp+0x18>
 800df5c:	e7fa      	b.n	800df54 <__mcmp+0x28>
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295
 800df62:	e7f7      	b.n	800df54 <__mcmp+0x28>

0800df64 <__mdiff>:
 800df64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	460c      	mov	r4, r1
 800df6a:	4606      	mov	r6, r0
 800df6c:	4611      	mov	r1, r2
 800df6e:	4620      	mov	r0, r4
 800df70:	4617      	mov	r7, r2
 800df72:	f7ff ffdb 	bl	800df2c <__mcmp>
 800df76:	1e05      	subs	r5, r0, #0
 800df78:	d110      	bne.n	800df9c <__mdiff+0x38>
 800df7a:	4629      	mov	r1, r5
 800df7c:	4630      	mov	r0, r6
 800df7e:	f7ff fd0d 	bl	800d99c <_Balloc>
 800df82:	b930      	cbnz	r0, 800df92 <__mdiff+0x2e>
 800df84:	4b39      	ldr	r3, [pc, #228]	; (800e06c <__mdiff+0x108>)
 800df86:	4602      	mov	r2, r0
 800df88:	f240 2132 	movw	r1, #562	; 0x232
 800df8c:	4838      	ldr	r0, [pc, #224]	; (800e070 <__mdiff+0x10c>)
 800df8e:	f000 fced 	bl	800e96c <__assert_func>
 800df92:	2301      	movs	r3, #1
 800df94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	bfa4      	itt	ge
 800df9e:	463b      	movge	r3, r7
 800dfa0:	4627      	movge	r7, r4
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	bfa6      	itte	ge
 800dfa8:	461c      	movge	r4, r3
 800dfaa:	2500      	movge	r5, #0
 800dfac:	2501      	movlt	r5, #1
 800dfae:	f7ff fcf5 	bl	800d99c <_Balloc>
 800dfb2:	b920      	cbnz	r0, 800dfbe <__mdiff+0x5a>
 800dfb4:	4b2d      	ldr	r3, [pc, #180]	; (800e06c <__mdiff+0x108>)
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfbc:	e7e6      	b.n	800df8c <__mdiff+0x28>
 800dfbe:	693e      	ldr	r6, [r7, #16]
 800dfc0:	60c5      	str	r5, [r0, #12]
 800dfc2:	6925      	ldr	r5, [r4, #16]
 800dfc4:	f107 0114 	add.w	r1, r7, #20
 800dfc8:	f104 0914 	add.w	r9, r4, #20
 800dfcc:	f100 0e14 	add.w	lr, r0, #20
 800dfd0:	f107 0210 	add.w	r2, r7, #16
 800dfd4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dfd8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dfdc:	46f2      	mov	sl, lr
 800dfde:	2700      	movs	r7, #0
 800dfe0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfe4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfe8:	fa1f f883 	uxth.w	r8, r3
 800dfec:	fa17 f78b 	uxtah	r7, r7, fp
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	eba7 0808 	sub.w	r8, r7, r8
 800dff6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dffa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dffe:	fa1f f888 	uxth.w	r8, r8
 800e002:	141f      	asrs	r7, r3, #16
 800e004:	454d      	cmp	r5, r9
 800e006:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e00a:	f84a 3b04 	str.w	r3, [sl], #4
 800e00e:	d8e7      	bhi.n	800dfe0 <__mdiff+0x7c>
 800e010:	1b2b      	subs	r3, r5, r4
 800e012:	3b15      	subs	r3, #21
 800e014:	f023 0303 	bic.w	r3, r3, #3
 800e018:	3304      	adds	r3, #4
 800e01a:	3415      	adds	r4, #21
 800e01c:	42a5      	cmp	r5, r4
 800e01e:	bf38      	it	cc
 800e020:	2304      	movcc	r3, #4
 800e022:	4419      	add	r1, r3
 800e024:	4473      	add	r3, lr
 800e026:	469e      	mov	lr, r3
 800e028:	460d      	mov	r5, r1
 800e02a:	4565      	cmp	r5, ip
 800e02c:	d30e      	bcc.n	800e04c <__mdiff+0xe8>
 800e02e:	f10c 0203 	add.w	r2, ip, #3
 800e032:	1a52      	subs	r2, r2, r1
 800e034:	f022 0203 	bic.w	r2, r2, #3
 800e038:	3903      	subs	r1, #3
 800e03a:	458c      	cmp	ip, r1
 800e03c:	bf38      	it	cc
 800e03e:	2200      	movcc	r2, #0
 800e040:	441a      	add	r2, r3
 800e042:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e046:	b17b      	cbz	r3, 800e068 <__mdiff+0x104>
 800e048:	6106      	str	r6, [r0, #16]
 800e04a:	e7a5      	b.n	800df98 <__mdiff+0x34>
 800e04c:	f855 8b04 	ldr.w	r8, [r5], #4
 800e050:	fa17 f488 	uxtah	r4, r7, r8
 800e054:	1422      	asrs	r2, r4, #16
 800e056:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e05a:	b2a4      	uxth	r4, r4
 800e05c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e060:	f84e 4b04 	str.w	r4, [lr], #4
 800e064:	1417      	asrs	r7, r2, #16
 800e066:	e7e0      	b.n	800e02a <__mdiff+0xc6>
 800e068:	3e01      	subs	r6, #1
 800e06a:	e7ea      	b.n	800e042 <__mdiff+0xde>
 800e06c:	0800fc01 	.word	0x0800fc01
 800e070:	0800fca7 	.word	0x0800fca7

0800e074 <__ulp>:
 800e074:	b082      	sub	sp, #8
 800e076:	ed8d 0b00 	vstr	d0, [sp]
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	4912      	ldr	r1, [pc, #72]	; (800e0c8 <__ulp+0x54>)
 800e07e:	4019      	ands	r1, r3
 800e080:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e084:	2900      	cmp	r1, #0
 800e086:	dd05      	ble.n	800e094 <__ulp+0x20>
 800e088:	2200      	movs	r2, #0
 800e08a:	460b      	mov	r3, r1
 800e08c:	ec43 2b10 	vmov	d0, r2, r3
 800e090:	b002      	add	sp, #8
 800e092:	4770      	bx	lr
 800e094:	4249      	negs	r1, r1
 800e096:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e09a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	f04f 0300 	mov.w	r3, #0
 800e0a6:	da04      	bge.n	800e0b2 <__ulp+0x3e>
 800e0a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e0ac:	fa41 f300 	asr.w	r3, r1, r0
 800e0b0:	e7ec      	b.n	800e08c <__ulp+0x18>
 800e0b2:	f1a0 0114 	sub.w	r1, r0, #20
 800e0b6:	291e      	cmp	r1, #30
 800e0b8:	bfda      	itte	le
 800e0ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e0be:	fa20 f101 	lsrle.w	r1, r0, r1
 800e0c2:	2101      	movgt	r1, #1
 800e0c4:	460a      	mov	r2, r1
 800e0c6:	e7e1      	b.n	800e08c <__ulp+0x18>
 800e0c8:	7ff00000 	.word	0x7ff00000

0800e0cc <__b2d>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	6905      	ldr	r5, [r0, #16]
 800e0d0:	f100 0714 	add.w	r7, r0, #20
 800e0d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0d8:	1f2e      	subs	r6, r5, #4
 800e0da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7ff fd52 	bl	800db88 <__hi0bits>
 800e0e4:	f1c0 0320 	rsb	r3, r0, #32
 800e0e8:	280a      	cmp	r0, #10
 800e0ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e168 <__b2d+0x9c>
 800e0ee:	600b      	str	r3, [r1, #0]
 800e0f0:	dc14      	bgt.n	800e11c <__b2d+0x50>
 800e0f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0fa:	42b7      	cmp	r7, r6
 800e0fc:	ea41 030c 	orr.w	r3, r1, ip
 800e100:	bf34      	ite	cc
 800e102:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e106:	2100      	movcs	r1, #0
 800e108:	3015      	adds	r0, #21
 800e10a:	fa04 f000 	lsl.w	r0, r4, r0
 800e10e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e112:	ea40 0201 	orr.w	r2, r0, r1
 800e116:	ec43 2b10 	vmov	d0, r2, r3
 800e11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11c:	42b7      	cmp	r7, r6
 800e11e:	bf3a      	itte	cc
 800e120:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e124:	f1a5 0608 	subcc.w	r6, r5, #8
 800e128:	2100      	movcs	r1, #0
 800e12a:	380b      	subs	r0, #11
 800e12c:	d017      	beq.n	800e15e <__b2d+0x92>
 800e12e:	f1c0 0c20 	rsb	ip, r0, #32
 800e132:	fa04 f500 	lsl.w	r5, r4, r0
 800e136:	42be      	cmp	r6, r7
 800e138:	fa21 f40c 	lsr.w	r4, r1, ip
 800e13c:	ea45 0504 	orr.w	r5, r5, r4
 800e140:	bf8c      	ite	hi
 800e142:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e146:	2400      	movls	r4, #0
 800e148:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e14c:	fa01 f000 	lsl.w	r0, r1, r0
 800e150:	fa24 f40c 	lsr.w	r4, r4, ip
 800e154:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e158:	ea40 0204 	orr.w	r2, r0, r4
 800e15c:	e7db      	b.n	800e116 <__b2d+0x4a>
 800e15e:	ea44 030c 	orr.w	r3, r4, ip
 800e162:	460a      	mov	r2, r1
 800e164:	e7d7      	b.n	800e116 <__b2d+0x4a>
 800e166:	bf00      	nop
 800e168:	3ff00000 	.word	0x3ff00000

0800e16c <__d2b>:
 800e16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e170:	4689      	mov	r9, r1
 800e172:	2101      	movs	r1, #1
 800e174:	ec57 6b10 	vmov	r6, r7, d0
 800e178:	4690      	mov	r8, r2
 800e17a:	f7ff fc0f 	bl	800d99c <_Balloc>
 800e17e:	4604      	mov	r4, r0
 800e180:	b930      	cbnz	r0, 800e190 <__d2b+0x24>
 800e182:	4602      	mov	r2, r0
 800e184:	4b25      	ldr	r3, [pc, #148]	; (800e21c <__d2b+0xb0>)
 800e186:	4826      	ldr	r0, [pc, #152]	; (800e220 <__d2b+0xb4>)
 800e188:	f240 310a 	movw	r1, #778	; 0x30a
 800e18c:	f000 fbee 	bl	800e96c <__assert_func>
 800e190:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e194:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e198:	bb35      	cbnz	r5, 800e1e8 <__d2b+0x7c>
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	d028      	beq.n	800e1f2 <__d2b+0x86>
 800e1a0:	4668      	mov	r0, sp
 800e1a2:	9600      	str	r6, [sp, #0]
 800e1a4:	f7ff fd10 	bl	800dbc8 <__lo0bits>
 800e1a8:	9900      	ldr	r1, [sp, #0]
 800e1aa:	b300      	cbz	r0, 800e1ee <__d2b+0x82>
 800e1ac:	9a01      	ldr	r2, [sp, #4]
 800e1ae:	f1c0 0320 	rsb	r3, r0, #32
 800e1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	40c2      	lsrs	r2, r0
 800e1ba:	6163      	str	r3, [r4, #20]
 800e1bc:	9201      	str	r2, [sp, #4]
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	61a3      	str	r3, [r4, #24]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bf14      	ite	ne
 800e1c6:	2202      	movne	r2, #2
 800e1c8:	2201      	moveq	r2, #1
 800e1ca:	6122      	str	r2, [r4, #16]
 800e1cc:	b1d5      	cbz	r5, 800e204 <__d2b+0x98>
 800e1ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1d2:	4405      	add	r5, r0
 800e1d4:	f8c9 5000 	str.w	r5, [r9]
 800e1d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1dc:	f8c8 0000 	str.w	r0, [r8]
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	b003      	add	sp, #12
 800e1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1ec:	e7d5      	b.n	800e19a <__d2b+0x2e>
 800e1ee:	6161      	str	r1, [r4, #20]
 800e1f0:	e7e5      	b.n	800e1be <__d2b+0x52>
 800e1f2:	a801      	add	r0, sp, #4
 800e1f4:	f7ff fce8 	bl	800dbc8 <__lo0bits>
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	6163      	str	r3, [r4, #20]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	6122      	str	r2, [r4, #16]
 800e200:	3020      	adds	r0, #32
 800e202:	e7e3      	b.n	800e1cc <__d2b+0x60>
 800e204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e20c:	f8c9 0000 	str.w	r0, [r9]
 800e210:	6918      	ldr	r0, [r3, #16]
 800e212:	f7ff fcb9 	bl	800db88 <__hi0bits>
 800e216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e21a:	e7df      	b.n	800e1dc <__d2b+0x70>
 800e21c:	0800fc01 	.word	0x0800fc01
 800e220:	0800fca7 	.word	0x0800fca7

0800e224 <__ratio>:
 800e224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e228:	4688      	mov	r8, r1
 800e22a:	4669      	mov	r1, sp
 800e22c:	4681      	mov	r9, r0
 800e22e:	f7ff ff4d 	bl	800e0cc <__b2d>
 800e232:	a901      	add	r1, sp, #4
 800e234:	4640      	mov	r0, r8
 800e236:	ec55 4b10 	vmov	r4, r5, d0
 800e23a:	f7ff ff47 	bl	800e0cc <__b2d>
 800e23e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e242:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e246:	eba3 0c02 	sub.w	ip, r3, r2
 800e24a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e24e:	1a9b      	subs	r3, r3, r2
 800e250:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e254:	ec51 0b10 	vmov	r0, r1, d0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bfd6      	itet	le
 800e25c:	460a      	movle	r2, r1
 800e25e:	462a      	movgt	r2, r5
 800e260:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e264:	468b      	mov	fp, r1
 800e266:	462f      	mov	r7, r5
 800e268:	bfd4      	ite	le
 800e26a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e26e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e272:	4620      	mov	r0, r4
 800e274:	ee10 2a10 	vmov	r2, s0
 800e278:	465b      	mov	r3, fp
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 fafe 	bl	800087c <__aeabi_ddiv>
 800e280:	ec41 0b10 	vmov	d0, r0, r1
 800e284:	b003      	add	sp, #12
 800e286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e28a <__copybits>:
 800e28a:	3901      	subs	r1, #1
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	1149      	asrs	r1, r1, #5
 800e290:	6914      	ldr	r4, [r2, #16]
 800e292:	3101      	adds	r1, #1
 800e294:	f102 0314 	add.w	r3, r2, #20
 800e298:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e29c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2a0:	1f05      	subs	r5, r0, #4
 800e2a2:	42a3      	cmp	r3, r4
 800e2a4:	d30c      	bcc.n	800e2c0 <__copybits+0x36>
 800e2a6:	1aa3      	subs	r3, r4, r2
 800e2a8:	3b11      	subs	r3, #17
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	3211      	adds	r2, #17
 800e2b0:	42a2      	cmp	r2, r4
 800e2b2:	bf88      	it	hi
 800e2b4:	2300      	movhi	r3, #0
 800e2b6:	4418      	add	r0, r3
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4288      	cmp	r0, r1
 800e2bc:	d305      	bcc.n	800e2ca <__copybits+0x40>
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2c8:	e7eb      	b.n	800e2a2 <__copybits+0x18>
 800e2ca:	f840 3b04 	str.w	r3, [r0], #4
 800e2ce:	e7f4      	b.n	800e2ba <__copybits+0x30>

0800e2d0 <__any_on>:
 800e2d0:	f100 0214 	add.w	r2, r0, #20
 800e2d4:	6900      	ldr	r0, [r0, #16]
 800e2d6:	114b      	asrs	r3, r1, #5
 800e2d8:	4298      	cmp	r0, r3
 800e2da:	b510      	push	{r4, lr}
 800e2dc:	db11      	blt.n	800e302 <__any_on+0x32>
 800e2de:	dd0a      	ble.n	800e2f6 <__any_on+0x26>
 800e2e0:	f011 011f 	ands.w	r1, r1, #31
 800e2e4:	d007      	beq.n	800e2f6 <__any_on+0x26>
 800e2e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2ea:	fa24 f001 	lsr.w	r0, r4, r1
 800e2ee:	fa00 f101 	lsl.w	r1, r0, r1
 800e2f2:	428c      	cmp	r4, r1
 800e2f4:	d10b      	bne.n	800e30e <__any_on+0x3e>
 800e2f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d803      	bhi.n	800e306 <__any_on+0x36>
 800e2fe:	2000      	movs	r0, #0
 800e300:	bd10      	pop	{r4, pc}
 800e302:	4603      	mov	r3, r0
 800e304:	e7f7      	b.n	800e2f6 <__any_on+0x26>
 800e306:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e30a:	2900      	cmp	r1, #0
 800e30c:	d0f5      	beq.n	800e2fa <__any_on+0x2a>
 800e30e:	2001      	movs	r0, #1
 800e310:	e7f6      	b.n	800e300 <__any_on+0x30>

0800e312 <_calloc_r>:
 800e312:	b513      	push	{r0, r1, r4, lr}
 800e314:	434a      	muls	r2, r1
 800e316:	4611      	mov	r1, r2
 800e318:	9201      	str	r2, [sp, #4]
 800e31a:	f7fd ff9f 	bl	800c25c <_malloc_r>
 800e31e:	4604      	mov	r4, r0
 800e320:	b118      	cbz	r0, 800e32a <_calloc_r+0x18>
 800e322:	9a01      	ldr	r2, [sp, #4]
 800e324:	2100      	movs	r1, #0
 800e326:	f7fd ff41 	bl	800c1ac <memset>
 800e32a:	4620      	mov	r0, r4
 800e32c:	b002      	add	sp, #8
 800e32e:	bd10      	pop	{r4, pc}

0800e330 <__ssputs_r>:
 800e330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e334:	688e      	ldr	r6, [r1, #8]
 800e336:	429e      	cmp	r6, r3
 800e338:	4682      	mov	sl, r0
 800e33a:	460c      	mov	r4, r1
 800e33c:	4690      	mov	r8, r2
 800e33e:	461f      	mov	r7, r3
 800e340:	d838      	bhi.n	800e3b4 <__ssputs_r+0x84>
 800e342:	898a      	ldrh	r2, [r1, #12]
 800e344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e348:	d032      	beq.n	800e3b0 <__ssputs_r+0x80>
 800e34a:	6825      	ldr	r5, [r4, #0]
 800e34c:	6909      	ldr	r1, [r1, #16]
 800e34e:	eba5 0901 	sub.w	r9, r5, r1
 800e352:	6965      	ldr	r5, [r4, #20]
 800e354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e35c:	3301      	adds	r3, #1
 800e35e:	444b      	add	r3, r9
 800e360:	106d      	asrs	r5, r5, #1
 800e362:	429d      	cmp	r5, r3
 800e364:	bf38      	it	cc
 800e366:	461d      	movcc	r5, r3
 800e368:	0553      	lsls	r3, r2, #21
 800e36a:	d531      	bpl.n	800e3d0 <__ssputs_r+0xa0>
 800e36c:	4629      	mov	r1, r5
 800e36e:	f7fd ff75 	bl	800c25c <_malloc_r>
 800e372:	4606      	mov	r6, r0
 800e374:	b950      	cbnz	r0, 800e38c <__ssputs_r+0x5c>
 800e376:	230c      	movs	r3, #12
 800e378:	f8ca 3000 	str.w	r3, [sl]
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38c:	6921      	ldr	r1, [r4, #16]
 800e38e:	464a      	mov	r2, r9
 800e390:	f7fd fefe 	bl	800c190 <memcpy>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	6126      	str	r6, [r4, #16]
 800e3a2:	6165      	str	r5, [r4, #20]
 800e3a4:	444e      	add	r6, r9
 800e3a6:	eba5 0509 	sub.w	r5, r5, r9
 800e3aa:	6026      	str	r6, [r4, #0]
 800e3ac:	60a5      	str	r5, [r4, #8]
 800e3ae:	463e      	mov	r6, r7
 800e3b0:	42be      	cmp	r6, r7
 800e3b2:	d900      	bls.n	800e3b6 <__ssputs_r+0x86>
 800e3b4:	463e      	mov	r6, r7
 800e3b6:	4632      	mov	r2, r6
 800e3b8:	6820      	ldr	r0, [r4, #0]
 800e3ba:	4641      	mov	r1, r8
 800e3bc:	f000 fb09 	bl	800e9d2 <memmove>
 800e3c0:	68a3      	ldr	r3, [r4, #8]
 800e3c2:	6822      	ldr	r2, [r4, #0]
 800e3c4:	1b9b      	subs	r3, r3, r6
 800e3c6:	4432      	add	r2, r6
 800e3c8:	60a3      	str	r3, [r4, #8]
 800e3ca:	6022      	str	r2, [r4, #0]
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	e7db      	b.n	800e388 <__ssputs_r+0x58>
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	f000 fb18 	bl	800ea06 <_realloc_r>
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d1e1      	bne.n	800e3a0 <__ssputs_r+0x70>
 800e3dc:	6921      	ldr	r1, [r4, #16]
 800e3de:	4650      	mov	r0, sl
 800e3e0:	f7fd feec 	bl	800c1bc <_free_r>
 800e3e4:	e7c7      	b.n	800e376 <__ssputs_r+0x46>
	...

0800e3e8 <_svfiprintf_r>:
 800e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ec:	4698      	mov	r8, r3
 800e3ee:	898b      	ldrh	r3, [r1, #12]
 800e3f0:	061b      	lsls	r3, r3, #24
 800e3f2:	b09d      	sub	sp, #116	; 0x74
 800e3f4:	4607      	mov	r7, r0
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	d50e      	bpl.n	800e41a <_svfiprintf_r+0x32>
 800e3fc:	690b      	ldr	r3, [r1, #16]
 800e3fe:	b963      	cbnz	r3, 800e41a <_svfiprintf_r+0x32>
 800e400:	2140      	movs	r1, #64	; 0x40
 800e402:	f7fd ff2b 	bl	800c25c <_malloc_r>
 800e406:	6028      	str	r0, [r5, #0]
 800e408:	6128      	str	r0, [r5, #16]
 800e40a:	b920      	cbnz	r0, 800e416 <_svfiprintf_r+0x2e>
 800e40c:	230c      	movs	r3, #12
 800e40e:	603b      	str	r3, [r7, #0]
 800e410:	f04f 30ff 	mov.w	r0, #4294967295
 800e414:	e0d1      	b.n	800e5ba <_svfiprintf_r+0x1d2>
 800e416:	2340      	movs	r3, #64	; 0x40
 800e418:	616b      	str	r3, [r5, #20]
 800e41a:	2300      	movs	r3, #0
 800e41c:	9309      	str	r3, [sp, #36]	; 0x24
 800e41e:	2320      	movs	r3, #32
 800e420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e424:	f8cd 800c 	str.w	r8, [sp, #12]
 800e428:	2330      	movs	r3, #48	; 0x30
 800e42a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e5d4 <_svfiprintf_r+0x1ec>
 800e42e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e432:	f04f 0901 	mov.w	r9, #1
 800e436:	4623      	mov	r3, r4
 800e438:	469a      	mov	sl, r3
 800e43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e43e:	b10a      	cbz	r2, 800e444 <_svfiprintf_r+0x5c>
 800e440:	2a25      	cmp	r2, #37	; 0x25
 800e442:	d1f9      	bne.n	800e438 <_svfiprintf_r+0x50>
 800e444:	ebba 0b04 	subs.w	fp, sl, r4
 800e448:	d00b      	beq.n	800e462 <_svfiprintf_r+0x7a>
 800e44a:	465b      	mov	r3, fp
 800e44c:	4622      	mov	r2, r4
 800e44e:	4629      	mov	r1, r5
 800e450:	4638      	mov	r0, r7
 800e452:	f7ff ff6d 	bl	800e330 <__ssputs_r>
 800e456:	3001      	adds	r0, #1
 800e458:	f000 80aa 	beq.w	800e5b0 <_svfiprintf_r+0x1c8>
 800e45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e45e:	445a      	add	r2, fp
 800e460:	9209      	str	r2, [sp, #36]	; 0x24
 800e462:	f89a 3000 	ldrb.w	r3, [sl]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f000 80a2 	beq.w	800e5b0 <_svfiprintf_r+0x1c8>
 800e46c:	2300      	movs	r3, #0
 800e46e:	f04f 32ff 	mov.w	r2, #4294967295
 800e472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e476:	f10a 0a01 	add.w	sl, sl, #1
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	9307      	str	r3, [sp, #28]
 800e47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e482:	931a      	str	r3, [sp, #104]	; 0x68
 800e484:	4654      	mov	r4, sl
 800e486:	2205      	movs	r2, #5
 800e488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e48c:	4851      	ldr	r0, [pc, #324]	; (800e5d4 <_svfiprintf_r+0x1ec>)
 800e48e:	f7f1 febf 	bl	8000210 <memchr>
 800e492:	9a04      	ldr	r2, [sp, #16]
 800e494:	b9d8      	cbnz	r0, 800e4ce <_svfiprintf_r+0xe6>
 800e496:	06d0      	lsls	r0, r2, #27
 800e498:	bf44      	itt	mi
 800e49a:	2320      	movmi	r3, #32
 800e49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4a0:	0711      	lsls	r1, r2, #28
 800e4a2:	bf44      	itt	mi
 800e4a4:	232b      	movmi	r3, #43	; 0x2b
 800e4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b0:	d015      	beq.n	800e4de <_svfiprintf_r+0xf6>
 800e4b2:	9a07      	ldr	r2, [sp, #28]
 800e4b4:	4654      	mov	r4, sl
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	f04f 0c0a 	mov.w	ip, #10
 800e4bc:	4621      	mov	r1, r4
 800e4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4c2:	3b30      	subs	r3, #48	; 0x30
 800e4c4:	2b09      	cmp	r3, #9
 800e4c6:	d94e      	bls.n	800e566 <_svfiprintf_r+0x17e>
 800e4c8:	b1b0      	cbz	r0, 800e4f8 <_svfiprintf_r+0x110>
 800e4ca:	9207      	str	r2, [sp, #28]
 800e4cc:	e014      	b.n	800e4f8 <_svfiprintf_r+0x110>
 800e4ce:	eba0 0308 	sub.w	r3, r0, r8
 800e4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	9304      	str	r3, [sp, #16]
 800e4da:	46a2      	mov	sl, r4
 800e4dc:	e7d2      	b.n	800e484 <_svfiprintf_r+0x9c>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	1d19      	adds	r1, r3, #4
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	9103      	str	r1, [sp, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	bfbb      	ittet	lt
 800e4ea:	425b      	neglt	r3, r3
 800e4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f0:	9307      	strge	r3, [sp, #28]
 800e4f2:	9307      	strlt	r3, [sp, #28]
 800e4f4:	bfb8      	it	lt
 800e4f6:	9204      	strlt	r2, [sp, #16]
 800e4f8:	7823      	ldrb	r3, [r4, #0]
 800e4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e4fc:	d10c      	bne.n	800e518 <_svfiprintf_r+0x130>
 800e4fe:	7863      	ldrb	r3, [r4, #1]
 800e500:	2b2a      	cmp	r3, #42	; 0x2a
 800e502:	d135      	bne.n	800e570 <_svfiprintf_r+0x188>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	1d1a      	adds	r2, r3, #4
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	9203      	str	r2, [sp, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	bfb8      	it	lt
 800e510:	f04f 33ff 	movlt.w	r3, #4294967295
 800e514:	3402      	adds	r4, #2
 800e516:	9305      	str	r3, [sp, #20]
 800e518:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5e4 <_svfiprintf_r+0x1fc>
 800e51c:	7821      	ldrb	r1, [r4, #0]
 800e51e:	2203      	movs	r2, #3
 800e520:	4650      	mov	r0, sl
 800e522:	f7f1 fe75 	bl	8000210 <memchr>
 800e526:	b140      	cbz	r0, 800e53a <_svfiprintf_r+0x152>
 800e528:	2340      	movs	r3, #64	; 0x40
 800e52a:	eba0 000a 	sub.w	r0, r0, sl
 800e52e:	fa03 f000 	lsl.w	r0, r3, r0
 800e532:	9b04      	ldr	r3, [sp, #16]
 800e534:	4303      	orrs	r3, r0
 800e536:	3401      	adds	r4, #1
 800e538:	9304      	str	r3, [sp, #16]
 800e53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53e:	4826      	ldr	r0, [pc, #152]	; (800e5d8 <_svfiprintf_r+0x1f0>)
 800e540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e544:	2206      	movs	r2, #6
 800e546:	f7f1 fe63 	bl	8000210 <memchr>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d038      	beq.n	800e5c0 <_svfiprintf_r+0x1d8>
 800e54e:	4b23      	ldr	r3, [pc, #140]	; (800e5dc <_svfiprintf_r+0x1f4>)
 800e550:	bb1b      	cbnz	r3, 800e59a <_svfiprintf_r+0x1b2>
 800e552:	9b03      	ldr	r3, [sp, #12]
 800e554:	3307      	adds	r3, #7
 800e556:	f023 0307 	bic.w	r3, r3, #7
 800e55a:	3308      	adds	r3, #8
 800e55c:	9303      	str	r3, [sp, #12]
 800e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e560:	4433      	add	r3, r6
 800e562:	9309      	str	r3, [sp, #36]	; 0x24
 800e564:	e767      	b.n	800e436 <_svfiprintf_r+0x4e>
 800e566:	fb0c 3202 	mla	r2, ip, r2, r3
 800e56a:	460c      	mov	r4, r1
 800e56c:	2001      	movs	r0, #1
 800e56e:	e7a5      	b.n	800e4bc <_svfiprintf_r+0xd4>
 800e570:	2300      	movs	r3, #0
 800e572:	3401      	adds	r4, #1
 800e574:	9305      	str	r3, [sp, #20]
 800e576:	4619      	mov	r1, r3
 800e578:	f04f 0c0a 	mov.w	ip, #10
 800e57c:	4620      	mov	r0, r4
 800e57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e582:	3a30      	subs	r2, #48	; 0x30
 800e584:	2a09      	cmp	r2, #9
 800e586:	d903      	bls.n	800e590 <_svfiprintf_r+0x1a8>
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d0c5      	beq.n	800e518 <_svfiprintf_r+0x130>
 800e58c:	9105      	str	r1, [sp, #20]
 800e58e:	e7c3      	b.n	800e518 <_svfiprintf_r+0x130>
 800e590:	fb0c 2101 	mla	r1, ip, r1, r2
 800e594:	4604      	mov	r4, r0
 800e596:	2301      	movs	r3, #1
 800e598:	e7f0      	b.n	800e57c <_svfiprintf_r+0x194>
 800e59a:	ab03      	add	r3, sp, #12
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	462a      	mov	r2, r5
 800e5a0:	4b0f      	ldr	r3, [pc, #60]	; (800e5e0 <_svfiprintf_r+0x1f8>)
 800e5a2:	a904      	add	r1, sp, #16
 800e5a4:	4638      	mov	r0, r7
 800e5a6:	f3af 8000 	nop.w
 800e5aa:	1c42      	adds	r2, r0, #1
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	d1d6      	bne.n	800e55e <_svfiprintf_r+0x176>
 800e5b0:	89ab      	ldrh	r3, [r5, #12]
 800e5b2:	065b      	lsls	r3, r3, #25
 800e5b4:	f53f af2c 	bmi.w	800e410 <_svfiprintf_r+0x28>
 800e5b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5ba:	b01d      	add	sp, #116	; 0x74
 800e5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c0:	ab03      	add	r3, sp, #12
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	462a      	mov	r2, r5
 800e5c6:	4b06      	ldr	r3, [pc, #24]	; (800e5e0 <_svfiprintf_r+0x1f8>)
 800e5c8:	a904      	add	r1, sp, #16
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f000 f87a 	bl	800e6c4 <_printf_i>
 800e5d0:	e7eb      	b.n	800e5aa <_svfiprintf_r+0x1c2>
 800e5d2:	bf00      	nop
 800e5d4:	0800fe04 	.word	0x0800fe04
 800e5d8:	0800fe0e 	.word	0x0800fe0e
 800e5dc:	00000000 	.word	0x00000000
 800e5e0:	0800e331 	.word	0x0800e331
 800e5e4:	0800fe0a 	.word	0x0800fe0a

0800e5e8 <_printf_common>:
 800e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ec:	4616      	mov	r6, r2
 800e5ee:	4699      	mov	r9, r3
 800e5f0:	688a      	ldr	r2, [r1, #8]
 800e5f2:	690b      	ldr	r3, [r1, #16]
 800e5f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	bfb8      	it	lt
 800e5fc:	4613      	movlt	r3, r2
 800e5fe:	6033      	str	r3, [r6, #0]
 800e600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e604:	4607      	mov	r7, r0
 800e606:	460c      	mov	r4, r1
 800e608:	b10a      	cbz	r2, 800e60e <_printf_common+0x26>
 800e60a:	3301      	adds	r3, #1
 800e60c:	6033      	str	r3, [r6, #0]
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	0699      	lsls	r1, r3, #26
 800e612:	bf42      	ittt	mi
 800e614:	6833      	ldrmi	r3, [r6, #0]
 800e616:	3302      	addmi	r3, #2
 800e618:	6033      	strmi	r3, [r6, #0]
 800e61a:	6825      	ldr	r5, [r4, #0]
 800e61c:	f015 0506 	ands.w	r5, r5, #6
 800e620:	d106      	bne.n	800e630 <_printf_common+0x48>
 800e622:	f104 0a19 	add.w	sl, r4, #25
 800e626:	68e3      	ldr	r3, [r4, #12]
 800e628:	6832      	ldr	r2, [r6, #0]
 800e62a:	1a9b      	subs	r3, r3, r2
 800e62c:	42ab      	cmp	r3, r5
 800e62e:	dc26      	bgt.n	800e67e <_printf_common+0x96>
 800e630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e634:	1e13      	subs	r3, r2, #0
 800e636:	6822      	ldr	r2, [r4, #0]
 800e638:	bf18      	it	ne
 800e63a:	2301      	movne	r3, #1
 800e63c:	0692      	lsls	r2, r2, #26
 800e63e:	d42b      	bmi.n	800e698 <_printf_common+0xb0>
 800e640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e644:	4649      	mov	r1, r9
 800e646:	4638      	mov	r0, r7
 800e648:	47c0      	blx	r8
 800e64a:	3001      	adds	r0, #1
 800e64c:	d01e      	beq.n	800e68c <_printf_common+0xa4>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	68e5      	ldr	r5, [r4, #12]
 800e652:	6832      	ldr	r2, [r6, #0]
 800e654:	f003 0306 	and.w	r3, r3, #6
 800e658:	2b04      	cmp	r3, #4
 800e65a:	bf08      	it	eq
 800e65c:	1aad      	subeq	r5, r5, r2
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	bf0c      	ite	eq
 800e664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e668:	2500      	movne	r5, #0
 800e66a:	4293      	cmp	r3, r2
 800e66c:	bfc4      	itt	gt
 800e66e:	1a9b      	subgt	r3, r3, r2
 800e670:	18ed      	addgt	r5, r5, r3
 800e672:	2600      	movs	r6, #0
 800e674:	341a      	adds	r4, #26
 800e676:	42b5      	cmp	r5, r6
 800e678:	d11a      	bne.n	800e6b0 <_printf_common+0xc8>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e008      	b.n	800e690 <_printf_common+0xa8>
 800e67e:	2301      	movs	r3, #1
 800e680:	4652      	mov	r2, sl
 800e682:	4649      	mov	r1, r9
 800e684:	4638      	mov	r0, r7
 800e686:	47c0      	blx	r8
 800e688:	3001      	adds	r0, #1
 800e68a:	d103      	bne.n	800e694 <_printf_common+0xac>
 800e68c:	f04f 30ff 	mov.w	r0, #4294967295
 800e690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e694:	3501      	adds	r5, #1
 800e696:	e7c6      	b.n	800e626 <_printf_common+0x3e>
 800e698:	18e1      	adds	r1, r4, r3
 800e69a:	1c5a      	adds	r2, r3, #1
 800e69c:	2030      	movs	r0, #48	; 0x30
 800e69e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6a2:	4422      	add	r2, r4
 800e6a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6ac:	3302      	adds	r3, #2
 800e6ae:	e7c7      	b.n	800e640 <_printf_common+0x58>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	47c0      	blx	r8
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d0e6      	beq.n	800e68c <_printf_common+0xa4>
 800e6be:	3601      	adds	r6, #1
 800e6c0:	e7d9      	b.n	800e676 <_printf_common+0x8e>
	...

0800e6c4 <_printf_i>:
 800e6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	4691      	mov	r9, r2
 800e6cc:	7e27      	ldrb	r7, [r4, #24]
 800e6ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6d0:	2f78      	cmp	r7, #120	; 0x78
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	469a      	mov	sl, r3
 800e6d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6da:	d807      	bhi.n	800e6ec <_printf_i+0x28>
 800e6dc:	2f62      	cmp	r7, #98	; 0x62
 800e6de:	d80a      	bhi.n	800e6f6 <_printf_i+0x32>
 800e6e0:	2f00      	cmp	r7, #0
 800e6e2:	f000 80d8 	beq.w	800e896 <_printf_i+0x1d2>
 800e6e6:	2f58      	cmp	r7, #88	; 0x58
 800e6e8:	f000 80a3 	beq.w	800e832 <_printf_i+0x16e>
 800e6ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6f4:	e03a      	b.n	800e76c <_printf_i+0xa8>
 800e6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6fa:	2b15      	cmp	r3, #21
 800e6fc:	d8f6      	bhi.n	800e6ec <_printf_i+0x28>
 800e6fe:	a001      	add	r0, pc, #4	; (adr r0, 800e704 <_printf_i+0x40>)
 800e700:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e704:	0800e75d 	.word	0x0800e75d
 800e708:	0800e771 	.word	0x0800e771
 800e70c:	0800e6ed 	.word	0x0800e6ed
 800e710:	0800e6ed 	.word	0x0800e6ed
 800e714:	0800e6ed 	.word	0x0800e6ed
 800e718:	0800e6ed 	.word	0x0800e6ed
 800e71c:	0800e771 	.word	0x0800e771
 800e720:	0800e6ed 	.word	0x0800e6ed
 800e724:	0800e6ed 	.word	0x0800e6ed
 800e728:	0800e6ed 	.word	0x0800e6ed
 800e72c:	0800e6ed 	.word	0x0800e6ed
 800e730:	0800e87d 	.word	0x0800e87d
 800e734:	0800e7a1 	.word	0x0800e7a1
 800e738:	0800e85f 	.word	0x0800e85f
 800e73c:	0800e6ed 	.word	0x0800e6ed
 800e740:	0800e6ed 	.word	0x0800e6ed
 800e744:	0800e89f 	.word	0x0800e89f
 800e748:	0800e6ed 	.word	0x0800e6ed
 800e74c:	0800e7a1 	.word	0x0800e7a1
 800e750:	0800e6ed 	.word	0x0800e6ed
 800e754:	0800e6ed 	.word	0x0800e6ed
 800e758:	0800e867 	.word	0x0800e867
 800e75c:	680b      	ldr	r3, [r1, #0]
 800e75e:	1d1a      	adds	r2, r3, #4
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	600a      	str	r2, [r1, #0]
 800e764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e76c:	2301      	movs	r3, #1
 800e76e:	e0a3      	b.n	800e8b8 <_printf_i+0x1f4>
 800e770:	6825      	ldr	r5, [r4, #0]
 800e772:	6808      	ldr	r0, [r1, #0]
 800e774:	062e      	lsls	r6, r5, #24
 800e776:	f100 0304 	add.w	r3, r0, #4
 800e77a:	d50a      	bpl.n	800e792 <_printf_i+0xce>
 800e77c:	6805      	ldr	r5, [r0, #0]
 800e77e:	600b      	str	r3, [r1, #0]
 800e780:	2d00      	cmp	r5, #0
 800e782:	da03      	bge.n	800e78c <_printf_i+0xc8>
 800e784:	232d      	movs	r3, #45	; 0x2d
 800e786:	426d      	negs	r5, r5
 800e788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e78c:	485e      	ldr	r0, [pc, #376]	; (800e908 <_printf_i+0x244>)
 800e78e:	230a      	movs	r3, #10
 800e790:	e019      	b.n	800e7c6 <_printf_i+0x102>
 800e792:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e796:	6805      	ldr	r5, [r0, #0]
 800e798:	600b      	str	r3, [r1, #0]
 800e79a:	bf18      	it	ne
 800e79c:	b22d      	sxthne	r5, r5
 800e79e:	e7ef      	b.n	800e780 <_printf_i+0xbc>
 800e7a0:	680b      	ldr	r3, [r1, #0]
 800e7a2:	6825      	ldr	r5, [r4, #0]
 800e7a4:	1d18      	adds	r0, r3, #4
 800e7a6:	6008      	str	r0, [r1, #0]
 800e7a8:	0628      	lsls	r0, r5, #24
 800e7aa:	d501      	bpl.n	800e7b0 <_printf_i+0xec>
 800e7ac:	681d      	ldr	r5, [r3, #0]
 800e7ae:	e002      	b.n	800e7b6 <_printf_i+0xf2>
 800e7b0:	0669      	lsls	r1, r5, #25
 800e7b2:	d5fb      	bpl.n	800e7ac <_printf_i+0xe8>
 800e7b4:	881d      	ldrh	r5, [r3, #0]
 800e7b6:	4854      	ldr	r0, [pc, #336]	; (800e908 <_printf_i+0x244>)
 800e7b8:	2f6f      	cmp	r7, #111	; 0x6f
 800e7ba:	bf0c      	ite	eq
 800e7bc:	2308      	moveq	r3, #8
 800e7be:	230a      	movne	r3, #10
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7c6:	6866      	ldr	r6, [r4, #4]
 800e7c8:	60a6      	str	r6, [r4, #8]
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	bfa2      	ittt	ge
 800e7ce:	6821      	ldrge	r1, [r4, #0]
 800e7d0:	f021 0104 	bicge.w	r1, r1, #4
 800e7d4:	6021      	strge	r1, [r4, #0]
 800e7d6:	b90d      	cbnz	r5, 800e7dc <_printf_i+0x118>
 800e7d8:	2e00      	cmp	r6, #0
 800e7da:	d04d      	beq.n	800e878 <_printf_i+0x1b4>
 800e7dc:	4616      	mov	r6, r2
 800e7de:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7e2:	fb03 5711 	mls	r7, r3, r1, r5
 800e7e6:	5dc7      	ldrb	r7, [r0, r7]
 800e7e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7ec:	462f      	mov	r7, r5
 800e7ee:	42bb      	cmp	r3, r7
 800e7f0:	460d      	mov	r5, r1
 800e7f2:	d9f4      	bls.n	800e7de <_printf_i+0x11a>
 800e7f4:	2b08      	cmp	r3, #8
 800e7f6:	d10b      	bne.n	800e810 <_printf_i+0x14c>
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	07df      	lsls	r7, r3, #31
 800e7fc:	d508      	bpl.n	800e810 <_printf_i+0x14c>
 800e7fe:	6923      	ldr	r3, [r4, #16]
 800e800:	6861      	ldr	r1, [r4, #4]
 800e802:	4299      	cmp	r1, r3
 800e804:	bfde      	ittt	le
 800e806:	2330      	movle	r3, #48	; 0x30
 800e808:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e80c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e810:	1b92      	subs	r2, r2, r6
 800e812:	6122      	str	r2, [r4, #16]
 800e814:	f8cd a000 	str.w	sl, [sp]
 800e818:	464b      	mov	r3, r9
 800e81a:	aa03      	add	r2, sp, #12
 800e81c:	4621      	mov	r1, r4
 800e81e:	4640      	mov	r0, r8
 800e820:	f7ff fee2 	bl	800e5e8 <_printf_common>
 800e824:	3001      	adds	r0, #1
 800e826:	d14c      	bne.n	800e8c2 <_printf_i+0x1fe>
 800e828:	f04f 30ff 	mov.w	r0, #4294967295
 800e82c:	b004      	add	sp, #16
 800e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e832:	4835      	ldr	r0, [pc, #212]	; (800e908 <_printf_i+0x244>)
 800e834:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	680e      	ldr	r6, [r1, #0]
 800e83c:	061f      	lsls	r7, r3, #24
 800e83e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e842:	600e      	str	r6, [r1, #0]
 800e844:	d514      	bpl.n	800e870 <_printf_i+0x1ac>
 800e846:	07d9      	lsls	r1, r3, #31
 800e848:	bf44      	itt	mi
 800e84a:	f043 0320 	orrmi.w	r3, r3, #32
 800e84e:	6023      	strmi	r3, [r4, #0]
 800e850:	b91d      	cbnz	r5, 800e85a <_printf_i+0x196>
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	f023 0320 	bic.w	r3, r3, #32
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	2310      	movs	r3, #16
 800e85c:	e7b0      	b.n	800e7c0 <_printf_i+0xfc>
 800e85e:	6823      	ldr	r3, [r4, #0]
 800e860:	f043 0320 	orr.w	r3, r3, #32
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	2378      	movs	r3, #120	; 0x78
 800e868:	4828      	ldr	r0, [pc, #160]	; (800e90c <_printf_i+0x248>)
 800e86a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e86e:	e7e3      	b.n	800e838 <_printf_i+0x174>
 800e870:	065e      	lsls	r6, r3, #25
 800e872:	bf48      	it	mi
 800e874:	b2ad      	uxthmi	r5, r5
 800e876:	e7e6      	b.n	800e846 <_printf_i+0x182>
 800e878:	4616      	mov	r6, r2
 800e87a:	e7bb      	b.n	800e7f4 <_printf_i+0x130>
 800e87c:	680b      	ldr	r3, [r1, #0]
 800e87e:	6826      	ldr	r6, [r4, #0]
 800e880:	6960      	ldr	r0, [r4, #20]
 800e882:	1d1d      	adds	r5, r3, #4
 800e884:	600d      	str	r5, [r1, #0]
 800e886:	0635      	lsls	r5, r6, #24
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	d501      	bpl.n	800e890 <_printf_i+0x1cc>
 800e88c:	6018      	str	r0, [r3, #0]
 800e88e:	e002      	b.n	800e896 <_printf_i+0x1d2>
 800e890:	0671      	lsls	r1, r6, #25
 800e892:	d5fb      	bpl.n	800e88c <_printf_i+0x1c8>
 800e894:	8018      	strh	r0, [r3, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	6123      	str	r3, [r4, #16]
 800e89a:	4616      	mov	r6, r2
 800e89c:	e7ba      	b.n	800e814 <_printf_i+0x150>
 800e89e:	680b      	ldr	r3, [r1, #0]
 800e8a0:	1d1a      	adds	r2, r3, #4
 800e8a2:	600a      	str	r2, [r1, #0]
 800e8a4:	681e      	ldr	r6, [r3, #0]
 800e8a6:	6862      	ldr	r2, [r4, #4]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f7f1 fcb0 	bl	8000210 <memchr>
 800e8b0:	b108      	cbz	r0, 800e8b6 <_printf_i+0x1f2>
 800e8b2:	1b80      	subs	r0, r0, r6
 800e8b4:	6060      	str	r0, [r4, #4]
 800e8b6:	6863      	ldr	r3, [r4, #4]
 800e8b8:	6123      	str	r3, [r4, #16]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8c0:	e7a8      	b.n	800e814 <_printf_i+0x150>
 800e8c2:	6923      	ldr	r3, [r4, #16]
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	4649      	mov	r1, r9
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	47d0      	blx	sl
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d0ab      	beq.n	800e828 <_printf_i+0x164>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	079b      	lsls	r3, r3, #30
 800e8d4:	d413      	bmi.n	800e8fe <_printf_i+0x23a>
 800e8d6:	68e0      	ldr	r0, [r4, #12]
 800e8d8:	9b03      	ldr	r3, [sp, #12]
 800e8da:	4298      	cmp	r0, r3
 800e8dc:	bfb8      	it	lt
 800e8de:	4618      	movlt	r0, r3
 800e8e0:	e7a4      	b.n	800e82c <_printf_i+0x168>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4632      	mov	r2, r6
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	47d0      	blx	sl
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	d09b      	beq.n	800e828 <_printf_i+0x164>
 800e8f0:	3501      	adds	r5, #1
 800e8f2:	68e3      	ldr	r3, [r4, #12]
 800e8f4:	9903      	ldr	r1, [sp, #12]
 800e8f6:	1a5b      	subs	r3, r3, r1
 800e8f8:	42ab      	cmp	r3, r5
 800e8fa:	dcf2      	bgt.n	800e8e2 <_printf_i+0x21e>
 800e8fc:	e7eb      	b.n	800e8d6 <_printf_i+0x212>
 800e8fe:	2500      	movs	r5, #0
 800e900:	f104 0619 	add.w	r6, r4, #25
 800e904:	e7f5      	b.n	800e8f2 <_printf_i+0x22e>
 800e906:	bf00      	nop
 800e908:	0800fe15 	.word	0x0800fe15
 800e90c:	0800fe26 	.word	0x0800fe26

0800e910 <nan>:
 800e910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e918 <nan+0x8>
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	00000000 	.word	0x00000000
 800e91c:	7ff80000 	.word	0x7ff80000

0800e920 <nanf>:
 800e920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e928 <nanf+0x8>
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	7fc00000 	.word	0x7fc00000

0800e92c <strncmp>:
 800e92c:	b510      	push	{r4, lr}
 800e92e:	b16a      	cbz	r2, 800e94c <strncmp+0x20>
 800e930:	3901      	subs	r1, #1
 800e932:	1884      	adds	r4, r0, r2
 800e934:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e938:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d103      	bne.n	800e948 <strncmp+0x1c>
 800e940:	42a0      	cmp	r0, r4
 800e942:	d001      	beq.n	800e948 <strncmp+0x1c>
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1f5      	bne.n	800e934 <strncmp+0x8>
 800e948:	1a98      	subs	r0, r3, r2
 800e94a:	bd10      	pop	{r4, pc}
 800e94c:	4610      	mov	r0, r2
 800e94e:	e7fc      	b.n	800e94a <strncmp+0x1e>

0800e950 <__ascii_wctomb>:
 800e950:	b149      	cbz	r1, 800e966 <__ascii_wctomb+0x16>
 800e952:	2aff      	cmp	r2, #255	; 0xff
 800e954:	bf85      	ittet	hi
 800e956:	238a      	movhi	r3, #138	; 0x8a
 800e958:	6003      	strhi	r3, [r0, #0]
 800e95a:	700a      	strbls	r2, [r1, #0]
 800e95c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e960:	bf98      	it	ls
 800e962:	2001      	movls	r0, #1
 800e964:	4770      	bx	lr
 800e966:	4608      	mov	r0, r1
 800e968:	4770      	bx	lr
	...

0800e96c <__assert_func>:
 800e96c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e96e:	4614      	mov	r4, r2
 800e970:	461a      	mov	r2, r3
 800e972:	4b09      	ldr	r3, [pc, #36]	; (800e998 <__assert_func+0x2c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4605      	mov	r5, r0
 800e978:	68d8      	ldr	r0, [r3, #12]
 800e97a:	b14c      	cbz	r4, 800e990 <__assert_func+0x24>
 800e97c:	4b07      	ldr	r3, [pc, #28]	; (800e99c <__assert_func+0x30>)
 800e97e:	9100      	str	r1, [sp, #0]
 800e980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e984:	4906      	ldr	r1, [pc, #24]	; (800e9a0 <__assert_func+0x34>)
 800e986:	462b      	mov	r3, r5
 800e988:	f000 f80e 	bl	800e9a8 <fiprintf>
 800e98c:	f000 fa7a 	bl	800ee84 <abort>
 800e990:	4b04      	ldr	r3, [pc, #16]	; (800e9a4 <__assert_func+0x38>)
 800e992:	461c      	mov	r4, r3
 800e994:	e7f3      	b.n	800e97e <__assert_func+0x12>
 800e996:	bf00      	nop
 800e998:	200001f0 	.word	0x200001f0
 800e99c:	0800fe37 	.word	0x0800fe37
 800e9a0:	0800fe44 	.word	0x0800fe44
 800e9a4:	0800fe72 	.word	0x0800fe72

0800e9a8 <fiprintf>:
 800e9a8:	b40e      	push	{r1, r2, r3}
 800e9aa:	b503      	push	{r0, r1, lr}
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	ab03      	add	r3, sp, #12
 800e9b0:	4805      	ldr	r0, [pc, #20]	; (800e9c8 <fiprintf+0x20>)
 800e9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b6:	6800      	ldr	r0, [r0, #0]
 800e9b8:	9301      	str	r3, [sp, #4]
 800e9ba:	f000 f873 	bl	800eaa4 <_vfiprintf_r>
 800e9be:	b002      	add	sp, #8
 800e9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9c4:	b003      	add	sp, #12
 800e9c6:	4770      	bx	lr
 800e9c8:	200001f0 	.word	0x200001f0

0800e9cc <__retarget_lock_init_recursive>:
 800e9cc:	4770      	bx	lr

0800e9ce <__retarget_lock_acquire_recursive>:
 800e9ce:	4770      	bx	lr

0800e9d0 <__retarget_lock_release_recursive>:
 800e9d0:	4770      	bx	lr

0800e9d2 <memmove>:
 800e9d2:	4288      	cmp	r0, r1
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	eb01 0402 	add.w	r4, r1, r2
 800e9da:	d902      	bls.n	800e9e2 <memmove+0x10>
 800e9dc:	4284      	cmp	r4, r0
 800e9de:	4623      	mov	r3, r4
 800e9e0:	d807      	bhi.n	800e9f2 <memmove+0x20>
 800e9e2:	1e43      	subs	r3, r0, #1
 800e9e4:	42a1      	cmp	r1, r4
 800e9e6:	d008      	beq.n	800e9fa <memmove+0x28>
 800e9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9f0:	e7f8      	b.n	800e9e4 <memmove+0x12>
 800e9f2:	4402      	add	r2, r0
 800e9f4:	4601      	mov	r1, r0
 800e9f6:	428a      	cmp	r2, r1
 800e9f8:	d100      	bne.n	800e9fc <memmove+0x2a>
 800e9fa:	bd10      	pop	{r4, pc}
 800e9fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea04:	e7f7      	b.n	800e9f6 <memmove+0x24>

0800ea06 <_realloc_r>:
 800ea06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea08:	4607      	mov	r7, r0
 800ea0a:	4614      	mov	r4, r2
 800ea0c:	460e      	mov	r6, r1
 800ea0e:	b921      	cbnz	r1, 800ea1a <_realloc_r+0x14>
 800ea10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ea14:	4611      	mov	r1, r2
 800ea16:	f7fd bc21 	b.w	800c25c <_malloc_r>
 800ea1a:	b922      	cbnz	r2, 800ea26 <_realloc_r+0x20>
 800ea1c:	f7fd fbce 	bl	800c1bc <_free_r>
 800ea20:	4625      	mov	r5, r4
 800ea22:	4628      	mov	r0, r5
 800ea24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea26:	f000 fc51 	bl	800f2cc <_malloc_usable_size_r>
 800ea2a:	42a0      	cmp	r0, r4
 800ea2c:	d20f      	bcs.n	800ea4e <_realloc_r+0x48>
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4638      	mov	r0, r7
 800ea32:	f7fd fc13 	bl	800c25c <_malloc_r>
 800ea36:	4605      	mov	r5, r0
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d0f2      	beq.n	800ea22 <_realloc_r+0x1c>
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4622      	mov	r2, r4
 800ea40:	f7fd fba6 	bl	800c190 <memcpy>
 800ea44:	4631      	mov	r1, r6
 800ea46:	4638      	mov	r0, r7
 800ea48:	f7fd fbb8 	bl	800c1bc <_free_r>
 800ea4c:	e7e9      	b.n	800ea22 <_realloc_r+0x1c>
 800ea4e:	4635      	mov	r5, r6
 800ea50:	e7e7      	b.n	800ea22 <_realloc_r+0x1c>

0800ea52 <__sfputc_r>:
 800ea52:	6893      	ldr	r3, [r2, #8]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	b410      	push	{r4}
 800ea5a:	6093      	str	r3, [r2, #8]
 800ea5c:	da08      	bge.n	800ea70 <__sfputc_r+0x1e>
 800ea5e:	6994      	ldr	r4, [r2, #24]
 800ea60:	42a3      	cmp	r3, r4
 800ea62:	db01      	blt.n	800ea68 <__sfputc_r+0x16>
 800ea64:	290a      	cmp	r1, #10
 800ea66:	d103      	bne.n	800ea70 <__sfputc_r+0x1e>
 800ea68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea6c:	f000 b94a 	b.w	800ed04 <__swbuf_r>
 800ea70:	6813      	ldr	r3, [r2, #0]
 800ea72:	1c58      	adds	r0, r3, #1
 800ea74:	6010      	str	r0, [r2, #0]
 800ea76:	7019      	strb	r1, [r3, #0]
 800ea78:	4608      	mov	r0, r1
 800ea7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <__sfputs_r>:
 800ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea82:	4606      	mov	r6, r0
 800ea84:	460f      	mov	r7, r1
 800ea86:	4614      	mov	r4, r2
 800ea88:	18d5      	adds	r5, r2, r3
 800ea8a:	42ac      	cmp	r4, r5
 800ea8c:	d101      	bne.n	800ea92 <__sfputs_r+0x12>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	e007      	b.n	800eaa2 <__sfputs_r+0x22>
 800ea92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea96:	463a      	mov	r2, r7
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7ff ffda 	bl	800ea52 <__sfputc_r>
 800ea9e:	1c43      	adds	r3, r0, #1
 800eaa0:	d1f3      	bne.n	800ea8a <__sfputs_r+0xa>
 800eaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eaa4 <_vfiprintf_r>:
 800eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	b09d      	sub	sp, #116	; 0x74
 800eaac:	4614      	mov	r4, r2
 800eaae:	4698      	mov	r8, r3
 800eab0:	4606      	mov	r6, r0
 800eab2:	b118      	cbz	r0, 800eabc <_vfiprintf_r+0x18>
 800eab4:	6983      	ldr	r3, [r0, #24]
 800eab6:	b90b      	cbnz	r3, 800eabc <_vfiprintf_r+0x18>
 800eab8:	f000 fb06 	bl	800f0c8 <__sinit>
 800eabc:	4b89      	ldr	r3, [pc, #548]	; (800ece4 <_vfiprintf_r+0x240>)
 800eabe:	429d      	cmp	r5, r3
 800eac0:	d11b      	bne.n	800eafa <_vfiprintf_r+0x56>
 800eac2:	6875      	ldr	r5, [r6, #4]
 800eac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eac6:	07d9      	lsls	r1, r3, #31
 800eac8:	d405      	bmi.n	800ead6 <_vfiprintf_r+0x32>
 800eaca:	89ab      	ldrh	r3, [r5, #12]
 800eacc:	059a      	lsls	r2, r3, #22
 800eace:	d402      	bmi.n	800ead6 <_vfiprintf_r+0x32>
 800ead0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ead2:	f7ff ff7c 	bl	800e9ce <__retarget_lock_acquire_recursive>
 800ead6:	89ab      	ldrh	r3, [r5, #12]
 800ead8:	071b      	lsls	r3, r3, #28
 800eada:	d501      	bpl.n	800eae0 <_vfiprintf_r+0x3c>
 800eadc:	692b      	ldr	r3, [r5, #16]
 800eade:	b9eb      	cbnz	r3, 800eb1c <_vfiprintf_r+0x78>
 800eae0:	4629      	mov	r1, r5
 800eae2:	4630      	mov	r0, r6
 800eae4:	f000 f960 	bl	800eda8 <__swsetup_r>
 800eae8:	b1c0      	cbz	r0, 800eb1c <_vfiprintf_r+0x78>
 800eaea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaec:	07dc      	lsls	r4, r3, #31
 800eaee:	d50e      	bpl.n	800eb0e <_vfiprintf_r+0x6a>
 800eaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf4:	b01d      	add	sp, #116	; 0x74
 800eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafa:	4b7b      	ldr	r3, [pc, #492]	; (800ece8 <_vfiprintf_r+0x244>)
 800eafc:	429d      	cmp	r5, r3
 800eafe:	d101      	bne.n	800eb04 <_vfiprintf_r+0x60>
 800eb00:	68b5      	ldr	r5, [r6, #8]
 800eb02:	e7df      	b.n	800eac4 <_vfiprintf_r+0x20>
 800eb04:	4b79      	ldr	r3, [pc, #484]	; (800ecec <_vfiprintf_r+0x248>)
 800eb06:	429d      	cmp	r5, r3
 800eb08:	bf08      	it	eq
 800eb0a:	68f5      	ldreq	r5, [r6, #12]
 800eb0c:	e7da      	b.n	800eac4 <_vfiprintf_r+0x20>
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	0598      	lsls	r0, r3, #22
 800eb12:	d4ed      	bmi.n	800eaf0 <_vfiprintf_r+0x4c>
 800eb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb16:	f7ff ff5b 	bl	800e9d0 <__retarget_lock_release_recursive>
 800eb1a:	e7e9      	b.n	800eaf0 <_vfiprintf_r+0x4c>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb20:	2320      	movs	r3, #32
 800eb22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb26:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb2a:	2330      	movs	r3, #48	; 0x30
 800eb2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ecf0 <_vfiprintf_r+0x24c>
 800eb30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb34:	f04f 0901 	mov.w	r9, #1
 800eb38:	4623      	mov	r3, r4
 800eb3a:	469a      	mov	sl, r3
 800eb3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb40:	b10a      	cbz	r2, 800eb46 <_vfiprintf_r+0xa2>
 800eb42:	2a25      	cmp	r2, #37	; 0x25
 800eb44:	d1f9      	bne.n	800eb3a <_vfiprintf_r+0x96>
 800eb46:	ebba 0b04 	subs.w	fp, sl, r4
 800eb4a:	d00b      	beq.n	800eb64 <_vfiprintf_r+0xc0>
 800eb4c:	465b      	mov	r3, fp
 800eb4e:	4622      	mov	r2, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7ff ff94 	bl	800ea80 <__sfputs_r>
 800eb58:	3001      	adds	r0, #1
 800eb5a:	f000 80aa 	beq.w	800ecb2 <_vfiprintf_r+0x20e>
 800eb5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb60:	445a      	add	r2, fp
 800eb62:	9209      	str	r2, [sp, #36]	; 0x24
 800eb64:	f89a 3000 	ldrb.w	r3, [sl]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 80a2 	beq.w	800ecb2 <_vfiprintf_r+0x20e>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f04f 32ff 	mov.w	r2, #4294967295
 800eb74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb78:	f10a 0a01 	add.w	sl, sl, #1
 800eb7c:	9304      	str	r3, [sp, #16]
 800eb7e:	9307      	str	r3, [sp, #28]
 800eb80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb84:	931a      	str	r3, [sp, #104]	; 0x68
 800eb86:	4654      	mov	r4, sl
 800eb88:	2205      	movs	r2, #5
 800eb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb8e:	4858      	ldr	r0, [pc, #352]	; (800ecf0 <_vfiprintf_r+0x24c>)
 800eb90:	f7f1 fb3e 	bl	8000210 <memchr>
 800eb94:	9a04      	ldr	r2, [sp, #16]
 800eb96:	b9d8      	cbnz	r0, 800ebd0 <_vfiprintf_r+0x12c>
 800eb98:	06d1      	lsls	r1, r2, #27
 800eb9a:	bf44      	itt	mi
 800eb9c:	2320      	movmi	r3, #32
 800eb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eba2:	0713      	lsls	r3, r2, #28
 800eba4:	bf44      	itt	mi
 800eba6:	232b      	movmi	r3, #43	; 0x2b
 800eba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebac:	f89a 3000 	ldrb.w	r3, [sl]
 800ebb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb2:	d015      	beq.n	800ebe0 <_vfiprintf_r+0x13c>
 800ebb4:	9a07      	ldr	r2, [sp, #28]
 800ebb6:	4654      	mov	r4, sl
 800ebb8:	2000      	movs	r0, #0
 800ebba:	f04f 0c0a 	mov.w	ip, #10
 800ebbe:	4621      	mov	r1, r4
 800ebc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebc4:	3b30      	subs	r3, #48	; 0x30
 800ebc6:	2b09      	cmp	r3, #9
 800ebc8:	d94e      	bls.n	800ec68 <_vfiprintf_r+0x1c4>
 800ebca:	b1b0      	cbz	r0, 800ebfa <_vfiprintf_r+0x156>
 800ebcc:	9207      	str	r2, [sp, #28]
 800ebce:	e014      	b.n	800ebfa <_vfiprintf_r+0x156>
 800ebd0:	eba0 0308 	sub.w	r3, r0, r8
 800ebd4:	fa09 f303 	lsl.w	r3, r9, r3
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	9304      	str	r3, [sp, #16]
 800ebdc:	46a2      	mov	sl, r4
 800ebde:	e7d2      	b.n	800eb86 <_vfiprintf_r+0xe2>
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	1d19      	adds	r1, r3, #4
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	9103      	str	r1, [sp, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	bfbb      	ittet	lt
 800ebec:	425b      	neglt	r3, r3
 800ebee:	f042 0202 	orrlt.w	r2, r2, #2
 800ebf2:	9307      	strge	r3, [sp, #28]
 800ebf4:	9307      	strlt	r3, [sp, #28]
 800ebf6:	bfb8      	it	lt
 800ebf8:	9204      	strlt	r2, [sp, #16]
 800ebfa:	7823      	ldrb	r3, [r4, #0]
 800ebfc:	2b2e      	cmp	r3, #46	; 0x2e
 800ebfe:	d10c      	bne.n	800ec1a <_vfiprintf_r+0x176>
 800ec00:	7863      	ldrb	r3, [r4, #1]
 800ec02:	2b2a      	cmp	r3, #42	; 0x2a
 800ec04:	d135      	bne.n	800ec72 <_vfiprintf_r+0x1ce>
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	1d1a      	adds	r2, r3, #4
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	9203      	str	r2, [sp, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	bfb8      	it	lt
 800ec12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec16:	3402      	adds	r4, #2
 800ec18:	9305      	str	r3, [sp, #20]
 800ec1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed00 <_vfiprintf_r+0x25c>
 800ec1e:	7821      	ldrb	r1, [r4, #0]
 800ec20:	2203      	movs	r2, #3
 800ec22:	4650      	mov	r0, sl
 800ec24:	f7f1 faf4 	bl	8000210 <memchr>
 800ec28:	b140      	cbz	r0, 800ec3c <_vfiprintf_r+0x198>
 800ec2a:	2340      	movs	r3, #64	; 0x40
 800ec2c:	eba0 000a 	sub.w	r0, r0, sl
 800ec30:	fa03 f000 	lsl.w	r0, r3, r0
 800ec34:	9b04      	ldr	r3, [sp, #16]
 800ec36:	4303      	orrs	r3, r0
 800ec38:	3401      	adds	r4, #1
 800ec3a:	9304      	str	r3, [sp, #16]
 800ec3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec40:	482c      	ldr	r0, [pc, #176]	; (800ecf4 <_vfiprintf_r+0x250>)
 800ec42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec46:	2206      	movs	r2, #6
 800ec48:	f7f1 fae2 	bl	8000210 <memchr>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d03f      	beq.n	800ecd0 <_vfiprintf_r+0x22c>
 800ec50:	4b29      	ldr	r3, [pc, #164]	; (800ecf8 <_vfiprintf_r+0x254>)
 800ec52:	bb1b      	cbnz	r3, 800ec9c <_vfiprintf_r+0x1f8>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	3307      	adds	r3, #7
 800ec58:	f023 0307 	bic.w	r3, r3, #7
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	9303      	str	r3, [sp, #12]
 800ec60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec62:	443b      	add	r3, r7
 800ec64:	9309      	str	r3, [sp, #36]	; 0x24
 800ec66:	e767      	b.n	800eb38 <_vfiprintf_r+0x94>
 800ec68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec6c:	460c      	mov	r4, r1
 800ec6e:	2001      	movs	r0, #1
 800ec70:	e7a5      	b.n	800ebbe <_vfiprintf_r+0x11a>
 800ec72:	2300      	movs	r3, #0
 800ec74:	3401      	adds	r4, #1
 800ec76:	9305      	str	r3, [sp, #20]
 800ec78:	4619      	mov	r1, r3
 800ec7a:	f04f 0c0a 	mov.w	ip, #10
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec84:	3a30      	subs	r2, #48	; 0x30
 800ec86:	2a09      	cmp	r2, #9
 800ec88:	d903      	bls.n	800ec92 <_vfiprintf_r+0x1ee>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0c5      	beq.n	800ec1a <_vfiprintf_r+0x176>
 800ec8e:	9105      	str	r1, [sp, #20]
 800ec90:	e7c3      	b.n	800ec1a <_vfiprintf_r+0x176>
 800ec92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec96:	4604      	mov	r4, r0
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e7f0      	b.n	800ec7e <_vfiprintf_r+0x1da>
 800ec9c:	ab03      	add	r3, sp, #12
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	462a      	mov	r2, r5
 800eca2:	4b16      	ldr	r3, [pc, #88]	; (800ecfc <_vfiprintf_r+0x258>)
 800eca4:	a904      	add	r1, sp, #16
 800eca6:	4630      	mov	r0, r6
 800eca8:	f3af 8000 	nop.w
 800ecac:	4607      	mov	r7, r0
 800ecae:	1c78      	adds	r0, r7, #1
 800ecb0:	d1d6      	bne.n	800ec60 <_vfiprintf_r+0x1bc>
 800ecb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecb4:	07d9      	lsls	r1, r3, #31
 800ecb6:	d405      	bmi.n	800ecc4 <_vfiprintf_r+0x220>
 800ecb8:	89ab      	ldrh	r3, [r5, #12]
 800ecba:	059a      	lsls	r2, r3, #22
 800ecbc:	d402      	bmi.n	800ecc4 <_vfiprintf_r+0x220>
 800ecbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecc0:	f7ff fe86 	bl	800e9d0 <__retarget_lock_release_recursive>
 800ecc4:	89ab      	ldrh	r3, [r5, #12]
 800ecc6:	065b      	lsls	r3, r3, #25
 800ecc8:	f53f af12 	bmi.w	800eaf0 <_vfiprintf_r+0x4c>
 800eccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecce:	e711      	b.n	800eaf4 <_vfiprintf_r+0x50>
 800ecd0:	ab03      	add	r3, sp, #12
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <_vfiprintf_r+0x258>)
 800ecd8:	a904      	add	r1, sp, #16
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f7ff fcf2 	bl	800e6c4 <_printf_i>
 800ece0:	e7e4      	b.n	800ecac <_vfiprintf_r+0x208>
 800ece2:	bf00      	nop
 800ece4:	0800fe94 	.word	0x0800fe94
 800ece8:	0800feb4 	.word	0x0800feb4
 800ecec:	0800fe74 	.word	0x0800fe74
 800ecf0:	0800fe04 	.word	0x0800fe04
 800ecf4:	0800fe0e 	.word	0x0800fe0e
 800ecf8:	00000000 	.word	0x00000000
 800ecfc:	0800ea81 	.word	0x0800ea81
 800ed00:	0800fe0a 	.word	0x0800fe0a

0800ed04 <__swbuf_r>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	460e      	mov	r6, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	4605      	mov	r5, r0
 800ed0c:	b118      	cbz	r0, 800ed16 <__swbuf_r+0x12>
 800ed0e:	6983      	ldr	r3, [r0, #24]
 800ed10:	b90b      	cbnz	r3, 800ed16 <__swbuf_r+0x12>
 800ed12:	f000 f9d9 	bl	800f0c8 <__sinit>
 800ed16:	4b21      	ldr	r3, [pc, #132]	; (800ed9c <__swbuf_r+0x98>)
 800ed18:	429c      	cmp	r4, r3
 800ed1a:	d12b      	bne.n	800ed74 <__swbuf_r+0x70>
 800ed1c:	686c      	ldr	r4, [r5, #4]
 800ed1e:	69a3      	ldr	r3, [r4, #24]
 800ed20:	60a3      	str	r3, [r4, #8]
 800ed22:	89a3      	ldrh	r3, [r4, #12]
 800ed24:	071a      	lsls	r2, r3, #28
 800ed26:	d52f      	bpl.n	800ed88 <__swbuf_r+0x84>
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	b36b      	cbz	r3, 800ed88 <__swbuf_r+0x84>
 800ed2c:	6923      	ldr	r3, [r4, #16]
 800ed2e:	6820      	ldr	r0, [r4, #0]
 800ed30:	1ac0      	subs	r0, r0, r3
 800ed32:	6963      	ldr	r3, [r4, #20]
 800ed34:	b2f6      	uxtb	r6, r6
 800ed36:	4283      	cmp	r3, r0
 800ed38:	4637      	mov	r7, r6
 800ed3a:	dc04      	bgt.n	800ed46 <__swbuf_r+0x42>
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f000 f92e 	bl	800efa0 <_fflush_r>
 800ed44:	bb30      	cbnz	r0, 800ed94 <__swbuf_r+0x90>
 800ed46:	68a3      	ldr	r3, [r4, #8]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	60a3      	str	r3, [r4, #8]
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	6022      	str	r2, [r4, #0]
 800ed52:	701e      	strb	r6, [r3, #0]
 800ed54:	6963      	ldr	r3, [r4, #20]
 800ed56:	3001      	adds	r0, #1
 800ed58:	4283      	cmp	r3, r0
 800ed5a:	d004      	beq.n	800ed66 <__swbuf_r+0x62>
 800ed5c:	89a3      	ldrh	r3, [r4, #12]
 800ed5e:	07db      	lsls	r3, r3, #31
 800ed60:	d506      	bpl.n	800ed70 <__swbuf_r+0x6c>
 800ed62:	2e0a      	cmp	r6, #10
 800ed64:	d104      	bne.n	800ed70 <__swbuf_r+0x6c>
 800ed66:	4621      	mov	r1, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f000 f919 	bl	800efa0 <_fflush_r>
 800ed6e:	b988      	cbnz	r0, 800ed94 <__swbuf_r+0x90>
 800ed70:	4638      	mov	r0, r7
 800ed72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed74:	4b0a      	ldr	r3, [pc, #40]	; (800eda0 <__swbuf_r+0x9c>)
 800ed76:	429c      	cmp	r4, r3
 800ed78:	d101      	bne.n	800ed7e <__swbuf_r+0x7a>
 800ed7a:	68ac      	ldr	r4, [r5, #8]
 800ed7c:	e7cf      	b.n	800ed1e <__swbuf_r+0x1a>
 800ed7e:	4b09      	ldr	r3, [pc, #36]	; (800eda4 <__swbuf_r+0xa0>)
 800ed80:	429c      	cmp	r4, r3
 800ed82:	bf08      	it	eq
 800ed84:	68ec      	ldreq	r4, [r5, #12]
 800ed86:	e7ca      	b.n	800ed1e <__swbuf_r+0x1a>
 800ed88:	4621      	mov	r1, r4
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f000 f80c 	bl	800eda8 <__swsetup_r>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d0cb      	beq.n	800ed2c <__swbuf_r+0x28>
 800ed94:	f04f 37ff 	mov.w	r7, #4294967295
 800ed98:	e7ea      	b.n	800ed70 <__swbuf_r+0x6c>
 800ed9a:	bf00      	nop
 800ed9c:	0800fe94 	.word	0x0800fe94
 800eda0:	0800feb4 	.word	0x0800feb4
 800eda4:	0800fe74 	.word	0x0800fe74

0800eda8 <__swsetup_r>:
 800eda8:	4b32      	ldr	r3, [pc, #200]	; (800ee74 <__swsetup_r+0xcc>)
 800edaa:	b570      	push	{r4, r5, r6, lr}
 800edac:	681d      	ldr	r5, [r3, #0]
 800edae:	4606      	mov	r6, r0
 800edb0:	460c      	mov	r4, r1
 800edb2:	b125      	cbz	r5, 800edbe <__swsetup_r+0x16>
 800edb4:	69ab      	ldr	r3, [r5, #24]
 800edb6:	b913      	cbnz	r3, 800edbe <__swsetup_r+0x16>
 800edb8:	4628      	mov	r0, r5
 800edba:	f000 f985 	bl	800f0c8 <__sinit>
 800edbe:	4b2e      	ldr	r3, [pc, #184]	; (800ee78 <__swsetup_r+0xd0>)
 800edc0:	429c      	cmp	r4, r3
 800edc2:	d10f      	bne.n	800ede4 <__swsetup_r+0x3c>
 800edc4:	686c      	ldr	r4, [r5, #4]
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edcc:	0719      	lsls	r1, r3, #28
 800edce:	d42c      	bmi.n	800ee2a <__swsetup_r+0x82>
 800edd0:	06dd      	lsls	r5, r3, #27
 800edd2:	d411      	bmi.n	800edf8 <__swsetup_r+0x50>
 800edd4:	2309      	movs	r3, #9
 800edd6:	6033      	str	r3, [r6, #0]
 800edd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eddc:	81a3      	strh	r3, [r4, #12]
 800edde:	f04f 30ff 	mov.w	r0, #4294967295
 800ede2:	e03e      	b.n	800ee62 <__swsetup_r+0xba>
 800ede4:	4b25      	ldr	r3, [pc, #148]	; (800ee7c <__swsetup_r+0xd4>)
 800ede6:	429c      	cmp	r4, r3
 800ede8:	d101      	bne.n	800edee <__swsetup_r+0x46>
 800edea:	68ac      	ldr	r4, [r5, #8]
 800edec:	e7eb      	b.n	800edc6 <__swsetup_r+0x1e>
 800edee:	4b24      	ldr	r3, [pc, #144]	; (800ee80 <__swsetup_r+0xd8>)
 800edf0:	429c      	cmp	r4, r3
 800edf2:	bf08      	it	eq
 800edf4:	68ec      	ldreq	r4, [r5, #12]
 800edf6:	e7e6      	b.n	800edc6 <__swsetup_r+0x1e>
 800edf8:	0758      	lsls	r0, r3, #29
 800edfa:	d512      	bpl.n	800ee22 <__swsetup_r+0x7a>
 800edfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edfe:	b141      	cbz	r1, 800ee12 <__swsetup_r+0x6a>
 800ee00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee04:	4299      	cmp	r1, r3
 800ee06:	d002      	beq.n	800ee0e <__swsetup_r+0x66>
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7fd f9d7 	bl	800c1bc <_free_r>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	6363      	str	r3, [r4, #52]	; 0x34
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	6063      	str	r3, [r4, #4]
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	6023      	str	r3, [r4, #0]
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	f043 0308 	orr.w	r3, r3, #8
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	b94b      	cbnz	r3, 800ee42 <__swsetup_r+0x9a>
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee38:	d003      	beq.n	800ee42 <__swsetup_r+0x9a>
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f000 fa05 	bl	800f24c <__smakebuf_r>
 800ee42:	89a0      	ldrh	r0, [r4, #12]
 800ee44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee48:	f010 0301 	ands.w	r3, r0, #1
 800ee4c:	d00a      	beq.n	800ee64 <__swsetup_r+0xbc>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60a3      	str	r3, [r4, #8]
 800ee52:	6963      	ldr	r3, [r4, #20]
 800ee54:	425b      	negs	r3, r3
 800ee56:	61a3      	str	r3, [r4, #24]
 800ee58:	6923      	ldr	r3, [r4, #16]
 800ee5a:	b943      	cbnz	r3, 800ee6e <__swsetup_r+0xc6>
 800ee5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee60:	d1ba      	bne.n	800edd8 <__swsetup_r+0x30>
 800ee62:	bd70      	pop	{r4, r5, r6, pc}
 800ee64:	0781      	lsls	r1, r0, #30
 800ee66:	bf58      	it	pl
 800ee68:	6963      	ldrpl	r3, [r4, #20]
 800ee6a:	60a3      	str	r3, [r4, #8]
 800ee6c:	e7f4      	b.n	800ee58 <__swsetup_r+0xb0>
 800ee6e:	2000      	movs	r0, #0
 800ee70:	e7f7      	b.n	800ee62 <__swsetup_r+0xba>
 800ee72:	bf00      	nop
 800ee74:	200001f0 	.word	0x200001f0
 800ee78:	0800fe94 	.word	0x0800fe94
 800ee7c:	0800feb4 	.word	0x0800feb4
 800ee80:	0800fe74 	.word	0x0800fe74

0800ee84 <abort>:
 800ee84:	b508      	push	{r3, lr}
 800ee86:	2006      	movs	r0, #6
 800ee88:	f000 fa50 	bl	800f32c <raise>
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	f7f2 fa3d 	bl	800130c <_exit>
	...

0800ee94 <__sflush_r>:
 800ee94:	898a      	ldrh	r2, [r1, #12]
 800ee96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	0710      	lsls	r0, r2, #28
 800ee9e:	460c      	mov	r4, r1
 800eea0:	d458      	bmi.n	800ef54 <__sflush_r+0xc0>
 800eea2:	684b      	ldr	r3, [r1, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dc05      	bgt.n	800eeb4 <__sflush_r+0x20>
 800eea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dc02      	bgt.n	800eeb4 <__sflush_r+0x20>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	d0f9      	beq.n	800eeae <__sflush_r+0x1a>
 800eeba:	2300      	movs	r3, #0
 800eebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eec0:	682f      	ldr	r7, [r5, #0]
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	d032      	beq.n	800ef2c <__sflush_r+0x98>
 800eec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	075a      	lsls	r2, r3, #29
 800eecc:	d505      	bpl.n	800eeda <__sflush_r+0x46>
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	1ac0      	subs	r0, r0, r3
 800eed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eed4:	b10b      	cbz	r3, 800eeda <__sflush_r+0x46>
 800eed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eed8:	1ac0      	subs	r0, r0, r3
 800eeda:	2300      	movs	r3, #0
 800eedc:	4602      	mov	r2, r0
 800eede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eee0:	6a21      	ldr	r1, [r4, #32]
 800eee2:	4628      	mov	r0, r5
 800eee4:	47b0      	blx	r6
 800eee6:	1c43      	adds	r3, r0, #1
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	d106      	bne.n	800eefa <__sflush_r+0x66>
 800eeec:	6829      	ldr	r1, [r5, #0]
 800eeee:	291d      	cmp	r1, #29
 800eef0:	d82c      	bhi.n	800ef4c <__sflush_r+0xb8>
 800eef2:	4a2a      	ldr	r2, [pc, #168]	; (800ef9c <__sflush_r+0x108>)
 800eef4:	40ca      	lsrs	r2, r1
 800eef6:	07d6      	lsls	r6, r2, #31
 800eef8:	d528      	bpl.n	800ef4c <__sflush_r+0xb8>
 800eefa:	2200      	movs	r2, #0
 800eefc:	6062      	str	r2, [r4, #4]
 800eefe:	04d9      	lsls	r1, r3, #19
 800ef00:	6922      	ldr	r2, [r4, #16]
 800ef02:	6022      	str	r2, [r4, #0]
 800ef04:	d504      	bpl.n	800ef10 <__sflush_r+0x7c>
 800ef06:	1c42      	adds	r2, r0, #1
 800ef08:	d101      	bne.n	800ef0e <__sflush_r+0x7a>
 800ef0a:	682b      	ldr	r3, [r5, #0]
 800ef0c:	b903      	cbnz	r3, 800ef10 <__sflush_r+0x7c>
 800ef0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef12:	602f      	str	r7, [r5, #0]
 800ef14:	2900      	cmp	r1, #0
 800ef16:	d0ca      	beq.n	800eeae <__sflush_r+0x1a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__sflush_r+0x92>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7fd f94b 	bl	800c1bc <_free_r>
 800ef26:	2000      	movs	r0, #0
 800ef28:	6360      	str	r0, [r4, #52]	; 0x34
 800ef2a:	e7c1      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef2c:	6a21      	ldr	r1, [r4, #32]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	4628      	mov	r0, r5
 800ef32:	47b0      	blx	r6
 800ef34:	1c41      	adds	r1, r0, #1
 800ef36:	d1c7      	bne.n	800eec8 <__sflush_r+0x34>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0c4      	beq.n	800eec8 <__sflush_r+0x34>
 800ef3e:	2b1d      	cmp	r3, #29
 800ef40:	d001      	beq.n	800ef46 <__sflush_r+0xb2>
 800ef42:	2b16      	cmp	r3, #22
 800ef44:	d101      	bne.n	800ef4a <__sflush_r+0xb6>
 800ef46:	602f      	str	r7, [r5, #0]
 800ef48:	e7b1      	b.n	800eeae <__sflush_r+0x1a>
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	e7ad      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef54:	690f      	ldr	r7, [r1, #16]
 800ef56:	2f00      	cmp	r7, #0
 800ef58:	d0a9      	beq.n	800eeae <__sflush_r+0x1a>
 800ef5a:	0793      	lsls	r3, r2, #30
 800ef5c:	680e      	ldr	r6, [r1, #0]
 800ef5e:	bf08      	it	eq
 800ef60:	694b      	ldreq	r3, [r1, #20]
 800ef62:	600f      	str	r7, [r1, #0]
 800ef64:	bf18      	it	ne
 800ef66:	2300      	movne	r3, #0
 800ef68:	eba6 0807 	sub.w	r8, r6, r7
 800ef6c:	608b      	str	r3, [r1, #8]
 800ef6e:	f1b8 0f00 	cmp.w	r8, #0
 800ef72:	dd9c      	ble.n	800eeae <__sflush_r+0x1a>
 800ef74:	6a21      	ldr	r1, [r4, #32]
 800ef76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef78:	4643      	mov	r3, r8
 800ef7a:	463a      	mov	r2, r7
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	47b0      	blx	r6
 800ef80:	2800      	cmp	r0, #0
 800ef82:	dc06      	bgt.n	800ef92 <__sflush_r+0xfe>
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef8a:	81a3      	strh	r3, [r4, #12]
 800ef8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef90:	e78e      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef92:	4407      	add	r7, r0
 800ef94:	eba8 0800 	sub.w	r8, r8, r0
 800ef98:	e7e9      	b.n	800ef6e <__sflush_r+0xda>
 800ef9a:	bf00      	nop
 800ef9c:	20400001 	.word	0x20400001

0800efa0 <_fflush_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	690b      	ldr	r3, [r1, #16]
 800efa4:	4605      	mov	r5, r0
 800efa6:	460c      	mov	r4, r1
 800efa8:	b913      	cbnz	r3, 800efb0 <_fflush_r+0x10>
 800efaa:	2500      	movs	r5, #0
 800efac:	4628      	mov	r0, r5
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	b118      	cbz	r0, 800efba <_fflush_r+0x1a>
 800efb2:	6983      	ldr	r3, [r0, #24]
 800efb4:	b90b      	cbnz	r3, 800efba <_fflush_r+0x1a>
 800efb6:	f000 f887 	bl	800f0c8 <__sinit>
 800efba:	4b14      	ldr	r3, [pc, #80]	; (800f00c <_fflush_r+0x6c>)
 800efbc:	429c      	cmp	r4, r3
 800efbe:	d11b      	bne.n	800eff8 <_fflush_r+0x58>
 800efc0:	686c      	ldr	r4, [r5, #4]
 800efc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d0ef      	beq.n	800efaa <_fflush_r+0xa>
 800efca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efcc:	07d0      	lsls	r0, r2, #31
 800efce:	d404      	bmi.n	800efda <_fflush_r+0x3a>
 800efd0:	0599      	lsls	r1, r3, #22
 800efd2:	d402      	bmi.n	800efda <_fflush_r+0x3a>
 800efd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd6:	f7ff fcfa 	bl	800e9ce <__retarget_lock_acquire_recursive>
 800efda:	4628      	mov	r0, r5
 800efdc:	4621      	mov	r1, r4
 800efde:	f7ff ff59 	bl	800ee94 <__sflush_r>
 800efe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efe4:	07da      	lsls	r2, r3, #31
 800efe6:	4605      	mov	r5, r0
 800efe8:	d4e0      	bmi.n	800efac <_fflush_r+0xc>
 800efea:	89a3      	ldrh	r3, [r4, #12]
 800efec:	059b      	lsls	r3, r3, #22
 800efee:	d4dd      	bmi.n	800efac <_fflush_r+0xc>
 800eff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eff2:	f7ff fced 	bl	800e9d0 <__retarget_lock_release_recursive>
 800eff6:	e7d9      	b.n	800efac <_fflush_r+0xc>
 800eff8:	4b05      	ldr	r3, [pc, #20]	; (800f010 <_fflush_r+0x70>)
 800effa:	429c      	cmp	r4, r3
 800effc:	d101      	bne.n	800f002 <_fflush_r+0x62>
 800effe:	68ac      	ldr	r4, [r5, #8]
 800f000:	e7df      	b.n	800efc2 <_fflush_r+0x22>
 800f002:	4b04      	ldr	r3, [pc, #16]	; (800f014 <_fflush_r+0x74>)
 800f004:	429c      	cmp	r4, r3
 800f006:	bf08      	it	eq
 800f008:	68ec      	ldreq	r4, [r5, #12]
 800f00a:	e7da      	b.n	800efc2 <_fflush_r+0x22>
 800f00c:	0800fe94 	.word	0x0800fe94
 800f010:	0800feb4 	.word	0x0800feb4
 800f014:	0800fe74 	.word	0x0800fe74

0800f018 <std>:
 800f018:	2300      	movs	r3, #0
 800f01a:	b510      	push	{r4, lr}
 800f01c:	4604      	mov	r4, r0
 800f01e:	e9c0 3300 	strd	r3, r3, [r0]
 800f022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f026:	6083      	str	r3, [r0, #8]
 800f028:	8181      	strh	r1, [r0, #12]
 800f02a:	6643      	str	r3, [r0, #100]	; 0x64
 800f02c:	81c2      	strh	r2, [r0, #14]
 800f02e:	6183      	str	r3, [r0, #24]
 800f030:	4619      	mov	r1, r3
 800f032:	2208      	movs	r2, #8
 800f034:	305c      	adds	r0, #92	; 0x5c
 800f036:	f7fd f8b9 	bl	800c1ac <memset>
 800f03a:	4b05      	ldr	r3, [pc, #20]	; (800f050 <std+0x38>)
 800f03c:	6263      	str	r3, [r4, #36]	; 0x24
 800f03e:	4b05      	ldr	r3, [pc, #20]	; (800f054 <std+0x3c>)
 800f040:	62a3      	str	r3, [r4, #40]	; 0x28
 800f042:	4b05      	ldr	r3, [pc, #20]	; (800f058 <std+0x40>)
 800f044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f046:	4b05      	ldr	r3, [pc, #20]	; (800f05c <std+0x44>)
 800f048:	6224      	str	r4, [r4, #32]
 800f04a:	6323      	str	r3, [r4, #48]	; 0x30
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop
 800f050:	0800f365 	.word	0x0800f365
 800f054:	0800f387 	.word	0x0800f387
 800f058:	0800f3bf 	.word	0x0800f3bf
 800f05c:	0800f3e3 	.word	0x0800f3e3

0800f060 <_cleanup_r>:
 800f060:	4901      	ldr	r1, [pc, #4]	; (800f068 <_cleanup_r+0x8>)
 800f062:	f000 b8af 	b.w	800f1c4 <_fwalk_reent>
 800f066:	bf00      	nop
 800f068:	0800efa1 	.word	0x0800efa1

0800f06c <__sfmoreglue>:
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	1e4a      	subs	r2, r1, #1
 800f070:	2568      	movs	r5, #104	; 0x68
 800f072:	4355      	muls	r5, r2
 800f074:	460e      	mov	r6, r1
 800f076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f07a:	f7fd f8ef 	bl	800c25c <_malloc_r>
 800f07e:	4604      	mov	r4, r0
 800f080:	b140      	cbz	r0, 800f094 <__sfmoreglue+0x28>
 800f082:	2100      	movs	r1, #0
 800f084:	e9c0 1600 	strd	r1, r6, [r0]
 800f088:	300c      	adds	r0, #12
 800f08a:	60a0      	str	r0, [r4, #8]
 800f08c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f090:	f7fd f88c 	bl	800c1ac <memset>
 800f094:	4620      	mov	r0, r4
 800f096:	bd70      	pop	{r4, r5, r6, pc}

0800f098 <__sfp_lock_acquire>:
 800f098:	4801      	ldr	r0, [pc, #4]	; (800f0a0 <__sfp_lock_acquire+0x8>)
 800f09a:	f7ff bc98 	b.w	800e9ce <__retarget_lock_acquire_recursive>
 800f09e:	bf00      	nop
 800f0a0:	20002d2c 	.word	0x20002d2c

0800f0a4 <__sfp_lock_release>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__sfp_lock_release+0x8>)
 800f0a6:	f7ff bc93 	b.w	800e9d0 <__retarget_lock_release_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	20002d2c 	.word	0x20002d2c

0800f0b0 <__sinit_lock_acquire>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__sinit_lock_acquire+0x8>)
 800f0b2:	f7ff bc8c 	b.w	800e9ce <__retarget_lock_acquire_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	20002d27 	.word	0x20002d27

0800f0bc <__sinit_lock_release>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	; (800f0c4 <__sinit_lock_release+0x8>)
 800f0be:	f7ff bc87 	b.w	800e9d0 <__retarget_lock_release_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	20002d27 	.word	0x20002d27

0800f0c8 <__sinit>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	f7ff fff0 	bl	800f0b0 <__sinit_lock_acquire>
 800f0d0:	69a3      	ldr	r3, [r4, #24]
 800f0d2:	b11b      	cbz	r3, 800f0dc <__sinit+0x14>
 800f0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0d8:	f7ff bff0 	b.w	800f0bc <__sinit_lock_release>
 800f0dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0e0:	6523      	str	r3, [r4, #80]	; 0x50
 800f0e2:	4b13      	ldr	r3, [pc, #76]	; (800f130 <__sinit+0x68>)
 800f0e4:	4a13      	ldr	r2, [pc, #76]	; (800f134 <__sinit+0x6c>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0ea:	42a3      	cmp	r3, r4
 800f0ec:	bf04      	itt	eq
 800f0ee:	2301      	moveq	r3, #1
 800f0f0:	61a3      	streq	r3, [r4, #24]
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 f820 	bl	800f138 <__sfp>
 800f0f8:	6060      	str	r0, [r4, #4]
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f000 f81c 	bl	800f138 <__sfp>
 800f100:	60a0      	str	r0, [r4, #8]
 800f102:	4620      	mov	r0, r4
 800f104:	f000 f818 	bl	800f138 <__sfp>
 800f108:	2200      	movs	r2, #0
 800f10a:	60e0      	str	r0, [r4, #12]
 800f10c:	2104      	movs	r1, #4
 800f10e:	6860      	ldr	r0, [r4, #4]
 800f110:	f7ff ff82 	bl	800f018 <std>
 800f114:	68a0      	ldr	r0, [r4, #8]
 800f116:	2201      	movs	r2, #1
 800f118:	2109      	movs	r1, #9
 800f11a:	f7ff ff7d 	bl	800f018 <std>
 800f11e:	68e0      	ldr	r0, [r4, #12]
 800f120:	2202      	movs	r2, #2
 800f122:	2112      	movs	r1, #18
 800f124:	f7ff ff78 	bl	800f018 <std>
 800f128:	2301      	movs	r3, #1
 800f12a:	61a3      	str	r3, [r4, #24]
 800f12c:	e7d2      	b.n	800f0d4 <__sinit+0xc>
 800f12e:	bf00      	nop
 800f130:	0800fa9c 	.word	0x0800fa9c
 800f134:	0800f061 	.word	0x0800f061

0800f138 <__sfp>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	4607      	mov	r7, r0
 800f13c:	f7ff ffac 	bl	800f098 <__sfp_lock_acquire>
 800f140:	4b1e      	ldr	r3, [pc, #120]	; (800f1bc <__sfp+0x84>)
 800f142:	681e      	ldr	r6, [r3, #0]
 800f144:	69b3      	ldr	r3, [r6, #24]
 800f146:	b913      	cbnz	r3, 800f14e <__sfp+0x16>
 800f148:	4630      	mov	r0, r6
 800f14a:	f7ff ffbd 	bl	800f0c8 <__sinit>
 800f14e:	3648      	adds	r6, #72	; 0x48
 800f150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f154:	3b01      	subs	r3, #1
 800f156:	d503      	bpl.n	800f160 <__sfp+0x28>
 800f158:	6833      	ldr	r3, [r6, #0]
 800f15a:	b30b      	cbz	r3, 800f1a0 <__sfp+0x68>
 800f15c:	6836      	ldr	r6, [r6, #0]
 800f15e:	e7f7      	b.n	800f150 <__sfp+0x18>
 800f160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f164:	b9d5      	cbnz	r5, 800f19c <__sfp+0x64>
 800f166:	4b16      	ldr	r3, [pc, #88]	; (800f1c0 <__sfp+0x88>)
 800f168:	60e3      	str	r3, [r4, #12]
 800f16a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f16e:	6665      	str	r5, [r4, #100]	; 0x64
 800f170:	f7ff fc2c 	bl	800e9cc <__retarget_lock_init_recursive>
 800f174:	f7ff ff96 	bl	800f0a4 <__sfp_lock_release>
 800f178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f17c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f180:	6025      	str	r5, [r4, #0]
 800f182:	61a5      	str	r5, [r4, #24]
 800f184:	2208      	movs	r2, #8
 800f186:	4629      	mov	r1, r5
 800f188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f18c:	f7fd f80e 	bl	800c1ac <memset>
 800f190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f198:	4620      	mov	r0, r4
 800f19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19c:	3468      	adds	r4, #104	; 0x68
 800f19e:	e7d9      	b.n	800f154 <__sfp+0x1c>
 800f1a0:	2104      	movs	r1, #4
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	f7ff ff62 	bl	800f06c <__sfmoreglue>
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	6030      	str	r0, [r6, #0]
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1d5      	bne.n	800f15c <__sfp+0x24>
 800f1b0:	f7ff ff78 	bl	800f0a4 <__sfp_lock_release>
 800f1b4:	230c      	movs	r3, #12
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	e7ee      	b.n	800f198 <__sfp+0x60>
 800f1ba:	bf00      	nop
 800f1bc:	0800fa9c 	.word	0x0800fa9c
 800f1c0:	ffff0001 	.word	0xffff0001

0800f1c4 <_fwalk_reent>:
 800f1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	4688      	mov	r8, r1
 800f1cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1d0:	2700      	movs	r7, #0
 800f1d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1d6:	f1b9 0901 	subs.w	r9, r9, #1
 800f1da:	d505      	bpl.n	800f1e8 <_fwalk_reent+0x24>
 800f1dc:	6824      	ldr	r4, [r4, #0]
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	d1f7      	bne.n	800f1d2 <_fwalk_reent+0xe>
 800f1e2:	4638      	mov	r0, r7
 800f1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e8:	89ab      	ldrh	r3, [r5, #12]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d907      	bls.n	800f1fe <_fwalk_reent+0x3a>
 800f1ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	d003      	beq.n	800f1fe <_fwalk_reent+0x3a>
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	47c0      	blx	r8
 800f1fc:	4307      	orrs	r7, r0
 800f1fe:	3568      	adds	r5, #104	; 0x68
 800f200:	e7e9      	b.n	800f1d6 <_fwalk_reent+0x12>

0800f202 <__swhatbuf_r>:
 800f202:	b570      	push	{r4, r5, r6, lr}
 800f204:	460e      	mov	r6, r1
 800f206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f20a:	2900      	cmp	r1, #0
 800f20c:	b096      	sub	sp, #88	; 0x58
 800f20e:	4614      	mov	r4, r2
 800f210:	461d      	mov	r5, r3
 800f212:	da07      	bge.n	800f224 <__swhatbuf_r+0x22>
 800f214:	2300      	movs	r3, #0
 800f216:	602b      	str	r3, [r5, #0]
 800f218:	89b3      	ldrh	r3, [r6, #12]
 800f21a:	061a      	lsls	r2, r3, #24
 800f21c:	d410      	bmi.n	800f240 <__swhatbuf_r+0x3e>
 800f21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f222:	e00e      	b.n	800f242 <__swhatbuf_r+0x40>
 800f224:	466a      	mov	r2, sp
 800f226:	f000 f903 	bl	800f430 <_fstat_r>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	dbf2      	blt.n	800f214 <__swhatbuf_r+0x12>
 800f22e:	9a01      	ldr	r2, [sp, #4]
 800f230:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f234:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f238:	425a      	negs	r2, r3
 800f23a:	415a      	adcs	r2, r3
 800f23c:	602a      	str	r2, [r5, #0]
 800f23e:	e7ee      	b.n	800f21e <__swhatbuf_r+0x1c>
 800f240:	2340      	movs	r3, #64	; 0x40
 800f242:	2000      	movs	r0, #0
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	b016      	add	sp, #88	; 0x58
 800f248:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f24c <__smakebuf_r>:
 800f24c:	898b      	ldrh	r3, [r1, #12]
 800f24e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f250:	079d      	lsls	r5, r3, #30
 800f252:	4606      	mov	r6, r0
 800f254:	460c      	mov	r4, r1
 800f256:	d507      	bpl.n	800f268 <__smakebuf_r+0x1c>
 800f258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	6123      	str	r3, [r4, #16]
 800f260:	2301      	movs	r3, #1
 800f262:	6163      	str	r3, [r4, #20]
 800f264:	b002      	add	sp, #8
 800f266:	bd70      	pop	{r4, r5, r6, pc}
 800f268:	ab01      	add	r3, sp, #4
 800f26a:	466a      	mov	r2, sp
 800f26c:	f7ff ffc9 	bl	800f202 <__swhatbuf_r>
 800f270:	9900      	ldr	r1, [sp, #0]
 800f272:	4605      	mov	r5, r0
 800f274:	4630      	mov	r0, r6
 800f276:	f7fc fff1 	bl	800c25c <_malloc_r>
 800f27a:	b948      	cbnz	r0, 800f290 <__smakebuf_r+0x44>
 800f27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f280:	059a      	lsls	r2, r3, #22
 800f282:	d4ef      	bmi.n	800f264 <__smakebuf_r+0x18>
 800f284:	f023 0303 	bic.w	r3, r3, #3
 800f288:	f043 0302 	orr.w	r3, r3, #2
 800f28c:	81a3      	strh	r3, [r4, #12]
 800f28e:	e7e3      	b.n	800f258 <__smakebuf_r+0xc>
 800f290:	4b0d      	ldr	r3, [pc, #52]	; (800f2c8 <__smakebuf_r+0x7c>)
 800f292:	62b3      	str	r3, [r6, #40]	; 0x28
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	6020      	str	r0, [r4, #0]
 800f298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	6163      	str	r3, [r4, #20]
 800f2a2:	9b01      	ldr	r3, [sp, #4]
 800f2a4:	6120      	str	r0, [r4, #16]
 800f2a6:	b15b      	cbz	r3, 800f2c0 <__smakebuf_r+0x74>
 800f2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f000 f8d1 	bl	800f454 <_isatty_r>
 800f2b2:	b128      	cbz	r0, 800f2c0 <__smakebuf_r+0x74>
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	f023 0303 	bic.w	r3, r3, #3
 800f2ba:	f043 0301 	orr.w	r3, r3, #1
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	89a0      	ldrh	r0, [r4, #12]
 800f2c2:	4305      	orrs	r5, r0
 800f2c4:	81a5      	strh	r5, [r4, #12]
 800f2c6:	e7cd      	b.n	800f264 <__smakebuf_r+0x18>
 800f2c8:	0800f061 	.word	0x0800f061

0800f2cc <_malloc_usable_size_r>:
 800f2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d0:	1f18      	subs	r0, r3, #4
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bfbc      	itt	lt
 800f2d6:	580b      	ldrlt	r3, [r1, r0]
 800f2d8:	18c0      	addlt	r0, r0, r3
 800f2da:	4770      	bx	lr

0800f2dc <_raise_r>:
 800f2dc:	291f      	cmp	r1, #31
 800f2de:	b538      	push	{r3, r4, r5, lr}
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	d904      	bls.n	800f2f0 <_raise_r+0x14>
 800f2e6:	2316      	movs	r3, #22
 800f2e8:	6003      	str	r3, [r0, #0]
 800f2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2f2:	b112      	cbz	r2, 800f2fa <_raise_r+0x1e>
 800f2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2f8:	b94b      	cbnz	r3, 800f30e <_raise_r+0x32>
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 f830 	bl	800f360 <_getpid_r>
 800f300:	462a      	mov	r2, r5
 800f302:	4601      	mov	r1, r0
 800f304:	4620      	mov	r0, r4
 800f306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f30a:	f000 b817 	b.w	800f33c <_kill_r>
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d00a      	beq.n	800f328 <_raise_r+0x4c>
 800f312:	1c59      	adds	r1, r3, #1
 800f314:	d103      	bne.n	800f31e <_raise_r+0x42>
 800f316:	2316      	movs	r3, #22
 800f318:	6003      	str	r3, [r0, #0]
 800f31a:	2001      	movs	r0, #1
 800f31c:	e7e7      	b.n	800f2ee <_raise_r+0x12>
 800f31e:	2400      	movs	r4, #0
 800f320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f324:	4628      	mov	r0, r5
 800f326:	4798      	blx	r3
 800f328:	2000      	movs	r0, #0
 800f32a:	e7e0      	b.n	800f2ee <_raise_r+0x12>

0800f32c <raise>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	; (800f338 <raise+0xc>)
 800f32e:	4601      	mov	r1, r0
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	f7ff bfd3 	b.w	800f2dc <_raise_r>
 800f336:	bf00      	nop
 800f338:	200001f0 	.word	0x200001f0

0800f33c <_kill_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d07      	ldr	r5, [pc, #28]	; (800f35c <_kill_r+0x20>)
 800f340:	2300      	movs	r3, #0
 800f342:	4604      	mov	r4, r0
 800f344:	4608      	mov	r0, r1
 800f346:	4611      	mov	r1, r2
 800f348:	602b      	str	r3, [r5, #0]
 800f34a:	f7f1 ffcf 	bl	80012ec <_kill>
 800f34e:	1c43      	adds	r3, r0, #1
 800f350:	d102      	bne.n	800f358 <_kill_r+0x1c>
 800f352:	682b      	ldr	r3, [r5, #0]
 800f354:	b103      	cbz	r3, 800f358 <_kill_r+0x1c>
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	bd38      	pop	{r3, r4, r5, pc}
 800f35a:	bf00      	nop
 800f35c:	20002d20 	.word	0x20002d20

0800f360 <_getpid_r>:
 800f360:	f7f1 bfbc 	b.w	80012dc <_getpid>

0800f364 <__sread>:
 800f364:	b510      	push	{r4, lr}
 800f366:	460c      	mov	r4, r1
 800f368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f36c:	f000 f894 	bl	800f498 <_read_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	bfab      	itete	ge
 800f374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f376:	89a3      	ldrhlt	r3, [r4, #12]
 800f378:	181b      	addge	r3, r3, r0
 800f37a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f37e:	bfac      	ite	ge
 800f380:	6563      	strge	r3, [r4, #84]	; 0x54
 800f382:	81a3      	strhlt	r3, [r4, #12]
 800f384:	bd10      	pop	{r4, pc}

0800f386 <__swrite>:
 800f386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38a:	461f      	mov	r7, r3
 800f38c:	898b      	ldrh	r3, [r1, #12]
 800f38e:	05db      	lsls	r3, r3, #23
 800f390:	4605      	mov	r5, r0
 800f392:	460c      	mov	r4, r1
 800f394:	4616      	mov	r6, r2
 800f396:	d505      	bpl.n	800f3a4 <__swrite+0x1e>
 800f398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f39c:	2302      	movs	r3, #2
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f000 f868 	bl	800f474 <_lseek_r>
 800f3a4:	89a3      	ldrh	r3, [r4, #12]
 800f3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3ae:	81a3      	strh	r3, [r4, #12]
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	463b      	mov	r3, r7
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ba:	f000 b817 	b.w	800f3ec <_write_r>

0800f3be <__sseek>:
 800f3be:	b510      	push	{r4, lr}
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c6:	f000 f855 	bl	800f474 <_lseek_r>
 800f3ca:	1c43      	adds	r3, r0, #1
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	bf15      	itete	ne
 800f3d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3da:	81a3      	strheq	r3, [r4, #12]
 800f3dc:	bf18      	it	ne
 800f3de:	81a3      	strhne	r3, [r4, #12]
 800f3e0:	bd10      	pop	{r4, pc}

0800f3e2 <__sclose>:
 800f3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e6:	f000 b813 	b.w	800f410 <_close_r>
	...

0800f3ec <_write_r>:
 800f3ec:	b538      	push	{r3, r4, r5, lr}
 800f3ee:	4d07      	ldr	r5, [pc, #28]	; (800f40c <_write_r+0x20>)
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	4608      	mov	r0, r1
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	602a      	str	r2, [r5, #0]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	f7f1 ffad 	bl	800135a <_write>
 800f400:	1c43      	adds	r3, r0, #1
 800f402:	d102      	bne.n	800f40a <_write_r+0x1e>
 800f404:	682b      	ldr	r3, [r5, #0]
 800f406:	b103      	cbz	r3, 800f40a <_write_r+0x1e>
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	bd38      	pop	{r3, r4, r5, pc}
 800f40c:	20002d20 	.word	0x20002d20

0800f410 <_close_r>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	4d06      	ldr	r5, [pc, #24]	; (800f42c <_close_r+0x1c>)
 800f414:	2300      	movs	r3, #0
 800f416:	4604      	mov	r4, r0
 800f418:	4608      	mov	r0, r1
 800f41a:	602b      	str	r3, [r5, #0]
 800f41c:	f7f1 ffb9 	bl	8001392 <_close>
 800f420:	1c43      	adds	r3, r0, #1
 800f422:	d102      	bne.n	800f42a <_close_r+0x1a>
 800f424:	682b      	ldr	r3, [r5, #0]
 800f426:	b103      	cbz	r3, 800f42a <_close_r+0x1a>
 800f428:	6023      	str	r3, [r4, #0]
 800f42a:	bd38      	pop	{r3, r4, r5, pc}
 800f42c:	20002d20 	.word	0x20002d20

0800f430 <_fstat_r>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	4d07      	ldr	r5, [pc, #28]	; (800f450 <_fstat_r+0x20>)
 800f434:	2300      	movs	r3, #0
 800f436:	4604      	mov	r4, r0
 800f438:	4608      	mov	r0, r1
 800f43a:	4611      	mov	r1, r2
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	f7f1 ffb4 	bl	80013aa <_fstat>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	d102      	bne.n	800f44c <_fstat_r+0x1c>
 800f446:	682b      	ldr	r3, [r5, #0]
 800f448:	b103      	cbz	r3, 800f44c <_fstat_r+0x1c>
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	bd38      	pop	{r3, r4, r5, pc}
 800f44e:	bf00      	nop
 800f450:	20002d20 	.word	0x20002d20

0800f454 <_isatty_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d06      	ldr	r5, [pc, #24]	; (800f470 <_isatty_r+0x1c>)
 800f458:	2300      	movs	r3, #0
 800f45a:	4604      	mov	r4, r0
 800f45c:	4608      	mov	r0, r1
 800f45e:	602b      	str	r3, [r5, #0]
 800f460:	f7f1 ffb3 	bl	80013ca <_isatty>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_isatty_r+0x1a>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_isatty_r+0x1a>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	20002d20 	.word	0x20002d20

0800f474 <_lseek_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4d07      	ldr	r5, [pc, #28]	; (800f494 <_lseek_r+0x20>)
 800f478:	4604      	mov	r4, r0
 800f47a:	4608      	mov	r0, r1
 800f47c:	4611      	mov	r1, r2
 800f47e:	2200      	movs	r2, #0
 800f480:	602a      	str	r2, [r5, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	f7f1 ffac 	bl	80013e0 <_lseek>
 800f488:	1c43      	adds	r3, r0, #1
 800f48a:	d102      	bne.n	800f492 <_lseek_r+0x1e>
 800f48c:	682b      	ldr	r3, [r5, #0]
 800f48e:	b103      	cbz	r3, 800f492 <_lseek_r+0x1e>
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	bd38      	pop	{r3, r4, r5, pc}
 800f494:	20002d20 	.word	0x20002d20

0800f498 <_read_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4d07      	ldr	r5, [pc, #28]	; (800f4b8 <_read_r+0x20>)
 800f49c:	4604      	mov	r4, r0
 800f49e:	4608      	mov	r0, r1
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	602a      	str	r2, [r5, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	f7f1 ff3a 	bl	8001320 <_read>
 800f4ac:	1c43      	adds	r3, r0, #1
 800f4ae:	d102      	bne.n	800f4b6 <_read_r+0x1e>
 800f4b0:	682b      	ldr	r3, [r5, #0]
 800f4b2:	b103      	cbz	r3, 800f4b6 <_read_r+0x1e>
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	bd38      	pop	{r3, r4, r5, pc}
 800f4b8:	20002d20 	.word	0x20002d20

0800f4bc <_init>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	bf00      	nop
 800f4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4c2:	bc08      	pop	{r3}
 800f4c4:	469e      	mov	lr, r3
 800f4c6:	4770      	bx	lr

0800f4c8 <_fini>:
 800f4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ca:	bf00      	nop
 800f4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ce:	bc08      	pop	{r3}
 800f4d0:	469e      	mov	lr, r3
 800f4d2:	4770      	bx	lr
